
PERCEPTRONFINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08009e68  08009e68  00019e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fcc  08009fcc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009fcc  08009fcc  00019fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fd4  08009fd4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd4  08009fd4  00019fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fd8  08009fd8  00019fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008a0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000930  20000930  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c09f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004071  00000000  00000000  0003c15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  000401d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001680  00000000  00000000  00041a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273c9  00000000  00000000  00043080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f451  00000000  00000000  0006a449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1724  00000000  00000000  0008989a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016afbe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007244  00000000  00000000  0016b010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e50 	.word	0x08009e50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009e50 	.word	0x08009e50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2uiz>:
 800094c:	004a      	lsls	r2, r1, #1
 800094e:	d211      	bcs.n	8000974 <__aeabi_d2uiz+0x28>
 8000950:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000954:	d211      	bcs.n	800097a <__aeabi_d2uiz+0x2e>
 8000956:	d50d      	bpl.n	8000974 <__aeabi_d2uiz+0x28>
 8000958:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000960:	d40e      	bmi.n	8000980 <__aeabi_d2uiz+0x34>
 8000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800096e:	fa23 f002 	lsr.w	r0, r3, r2
 8000972:	4770      	bx	lr
 8000974:	f04f 0000 	mov.w	r0, #0
 8000978:	4770      	bx	lr
 800097a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800097e:	d102      	bne.n	8000986 <__aeabi_d2uiz+0x3a>
 8000980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000984:	4770      	bx	lr
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	4770      	bx	lr

0800098c <__aeabi_uldivmod>:
 800098c:	b953      	cbnz	r3, 80009a4 <__aeabi_uldivmod+0x18>
 800098e:	b94a      	cbnz	r2, 80009a4 <__aeabi_uldivmod+0x18>
 8000990:	2900      	cmp	r1, #0
 8000992:	bf08      	it	eq
 8000994:	2800      	cmpeq	r0, #0
 8000996:	bf1c      	itt	ne
 8000998:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800099c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009a0:	f000 b974 	b.w	8000c8c <__aeabi_idiv0>
 80009a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ac:	f000 f806 	bl	80009bc <__udivmoddi4>
 80009b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b8:	b004      	add	sp, #16
 80009ba:	4770      	bx	lr

080009bc <__udivmoddi4>:
 80009bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c0:	9d08      	ldr	r5, [sp, #32]
 80009c2:	4604      	mov	r4, r0
 80009c4:	468e      	mov	lr, r1
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d14d      	bne.n	8000a66 <__udivmoddi4+0xaa>
 80009ca:	428a      	cmp	r2, r1
 80009cc:	4694      	mov	ip, r2
 80009ce:	d969      	bls.n	8000aa4 <__udivmoddi4+0xe8>
 80009d0:	fab2 f282 	clz	r2, r2
 80009d4:	b152      	cbz	r2, 80009ec <__udivmoddi4+0x30>
 80009d6:	fa01 f302 	lsl.w	r3, r1, r2
 80009da:	f1c2 0120 	rsb	r1, r2, #32
 80009de:	fa20 f101 	lsr.w	r1, r0, r1
 80009e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e6:	ea41 0e03 	orr.w	lr, r1, r3
 80009ea:	4094      	lsls	r4, r2
 80009ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f0:	0c21      	lsrs	r1, r4, #16
 80009f2:	fbbe f6f8 	udiv	r6, lr, r8
 80009f6:	fa1f f78c 	uxth.w	r7, ip
 80009fa:	fb08 e316 	mls	r3, r8, r6, lr
 80009fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a02:	fb06 f107 	mul.w	r1, r6, r7
 8000a06:	4299      	cmp	r1, r3
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x64>
 8000a0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a12:	f080 811f 	bcs.w	8000c54 <__udivmoddi4+0x298>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 811c 	bls.w	8000c54 <__udivmoddi4+0x298>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	4463      	add	r3, ip
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a28:	fb08 3310 	mls	r3, r8, r0, r3
 8000a2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a30:	fb00 f707 	mul.w	r7, r0, r7
 8000a34:	42a7      	cmp	r7, r4
 8000a36:	d90a      	bls.n	8000a4e <__udivmoddi4+0x92>
 8000a38:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a40:	f080 810a 	bcs.w	8000c58 <__udivmoddi4+0x29c>
 8000a44:	42a7      	cmp	r7, r4
 8000a46:	f240 8107 	bls.w	8000c58 <__udivmoddi4+0x29c>
 8000a4a:	4464      	add	r4, ip
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a52:	1be4      	subs	r4, r4, r7
 8000a54:	2600      	movs	r6, #0
 8000a56:	b11d      	cbz	r5, 8000a60 <__udivmoddi4+0xa4>
 8000a58:	40d4      	lsrs	r4, r2
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a60:	4631      	mov	r1, r6
 8000a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a66:	428b      	cmp	r3, r1
 8000a68:	d909      	bls.n	8000a7e <__udivmoddi4+0xc2>
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	f000 80ef 	beq.w	8000c4e <__udivmoddi4+0x292>
 8000a70:	2600      	movs	r6, #0
 8000a72:	e9c5 0100 	strd	r0, r1, [r5]
 8000a76:	4630      	mov	r0, r6
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	fab3 f683 	clz	r6, r3
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d14a      	bne.n	8000b1c <__udivmoddi4+0x160>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xd4>
 8000a8a:	4282      	cmp	r2, r0
 8000a8c:	f200 80f9 	bhi.w	8000c82 <__udivmoddi4+0x2c6>
 8000a90:	1a84      	subs	r4, r0, r2
 8000a92:	eb61 0303 	sbc.w	r3, r1, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	469e      	mov	lr, r3
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d0e0      	beq.n	8000a60 <__udivmoddi4+0xa4>
 8000a9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aa2:	e7dd      	b.n	8000a60 <__udivmoddi4+0xa4>
 8000aa4:	b902      	cbnz	r2, 8000aa8 <__udivmoddi4+0xec>
 8000aa6:	deff      	udf	#255	; 0xff
 8000aa8:	fab2 f282 	clz	r2, r2
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	f040 8092 	bne.w	8000bd6 <__udivmoddi4+0x21a>
 8000ab2:	eba1 010c 	sub.w	r1, r1, ip
 8000ab6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aba:	fa1f fe8c 	uxth.w	lr, ip
 8000abe:	2601      	movs	r6, #1
 8000ac0:	0c20      	lsrs	r0, r4, #16
 8000ac2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ac6:	fb07 1113 	mls	r1, r7, r3, r1
 8000aca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ace:	fb0e f003 	mul.w	r0, lr, r3
 8000ad2:	4288      	cmp	r0, r1
 8000ad4:	d908      	bls.n	8000ae8 <__udivmoddi4+0x12c>
 8000ad6:	eb1c 0101 	adds.w	r1, ip, r1
 8000ada:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0x12a>
 8000ae0:	4288      	cmp	r0, r1
 8000ae2:	f200 80cb 	bhi.w	8000c7c <__udivmoddi4+0x2c0>
 8000ae6:	4643      	mov	r3, r8
 8000ae8:	1a09      	subs	r1, r1, r0
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af0:	fb07 1110 	mls	r1, r7, r0, r1
 8000af4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000af8:	fb0e fe00 	mul.w	lr, lr, r0
 8000afc:	45a6      	cmp	lr, r4
 8000afe:	d908      	bls.n	8000b12 <__udivmoddi4+0x156>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b08:	d202      	bcs.n	8000b10 <__udivmoddi4+0x154>
 8000b0a:	45a6      	cmp	lr, r4
 8000b0c:	f200 80bb 	bhi.w	8000c86 <__udivmoddi4+0x2ca>
 8000b10:	4608      	mov	r0, r1
 8000b12:	eba4 040e 	sub.w	r4, r4, lr
 8000b16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b1a:	e79c      	b.n	8000a56 <__udivmoddi4+0x9a>
 8000b1c:	f1c6 0720 	rsb	r7, r6, #32
 8000b20:	40b3      	lsls	r3, r6
 8000b22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b32:	431c      	orrs	r4, r3
 8000b34:	40f9      	lsrs	r1, r7
 8000b36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b42:	0c20      	lsrs	r0, r4, #16
 8000b44:	fa1f fe8c 	uxth.w	lr, ip
 8000b48:	fb09 1118 	mls	r1, r9, r8, r1
 8000b4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b50:	fb08 f00e 	mul.w	r0, r8, lr
 8000b54:	4288      	cmp	r0, r1
 8000b56:	fa02 f206 	lsl.w	r2, r2, r6
 8000b5a:	d90b      	bls.n	8000b74 <__udivmoddi4+0x1b8>
 8000b5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b64:	f080 8088 	bcs.w	8000c78 <__udivmoddi4+0x2bc>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f240 8085 	bls.w	8000c78 <__udivmoddi4+0x2bc>
 8000b6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b72:	4461      	add	r1, ip
 8000b74:	1a09      	subs	r1, r1, r0
 8000b76:	b2a4      	uxth	r4, r4
 8000b78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b88:	458e      	cmp	lr, r1
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x1e2>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b94:	d26c      	bcs.n	8000c70 <__udivmoddi4+0x2b4>
 8000b96:	458e      	cmp	lr, r1
 8000b98:	d96a      	bls.n	8000c70 <__udivmoddi4+0x2b4>
 8000b9a:	3802      	subs	r0, #2
 8000b9c:	4461      	add	r1, ip
 8000b9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ba2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ba6:	eba1 010e 	sub.w	r1, r1, lr
 8000baa:	42a1      	cmp	r1, r4
 8000bac:	46c8      	mov	r8, r9
 8000bae:	46a6      	mov	lr, r4
 8000bb0:	d356      	bcc.n	8000c60 <__udivmoddi4+0x2a4>
 8000bb2:	d053      	beq.n	8000c5c <__udivmoddi4+0x2a0>
 8000bb4:	b15d      	cbz	r5, 8000bce <__udivmoddi4+0x212>
 8000bb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bba:	eb61 010e 	sbc.w	r1, r1, lr
 8000bbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000bc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bc6:	40f1      	lsrs	r1, r6
 8000bc8:	431f      	orrs	r7, r3
 8000bca:	e9c5 7100 	strd	r7, r1, [r5]
 8000bce:	2600      	movs	r6, #0
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	f1c2 0320 	rsb	r3, r2, #32
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be0:	fa21 f303 	lsr.w	r3, r1, r3
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4301      	orrs	r1, r0
 8000be8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bec:	fa1f fe8c 	uxth.w	lr, ip
 8000bf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000bf8:	0c0b      	lsrs	r3, r1, #16
 8000bfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000c02:	429e      	cmp	r6, r3
 8000c04:	fa04 f402 	lsl.w	r4, r4, r2
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x260>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c12:	d22f      	bcs.n	8000c74 <__udivmoddi4+0x2b8>
 8000c14:	429e      	cmp	r6, r3
 8000c16:	d92d      	bls.n	8000c74 <__udivmoddi4+0x2b8>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	b289      	uxth	r1, r1
 8000c20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c24:	fb07 3316 	mls	r3, r7, r6, r3
 8000c28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d908      	bls.n	8000c46 <__udivmoddi4+0x28a>
 8000c34:	eb1c 0101 	adds.w	r1, ip, r1
 8000c38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c3c:	d216      	bcs.n	8000c6c <__udivmoddi4+0x2b0>
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d914      	bls.n	8000c6c <__udivmoddi4+0x2b0>
 8000c42:	3e02      	subs	r6, #2
 8000c44:	4461      	add	r1, ip
 8000c46:	1ac9      	subs	r1, r1, r3
 8000c48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c4c:	e738      	b.n	8000ac0 <__udivmoddi4+0x104>
 8000c4e:	462e      	mov	r6, r5
 8000c50:	4628      	mov	r0, r5
 8000c52:	e705      	b.n	8000a60 <__udivmoddi4+0xa4>
 8000c54:	4606      	mov	r6, r0
 8000c56:	e6e3      	b.n	8000a20 <__udivmoddi4+0x64>
 8000c58:	4618      	mov	r0, r3
 8000c5a:	e6f8      	b.n	8000a4e <__udivmoddi4+0x92>
 8000c5c:	454b      	cmp	r3, r9
 8000c5e:	d2a9      	bcs.n	8000bb4 <__udivmoddi4+0x1f8>
 8000c60:	ebb9 0802 	subs.w	r8, r9, r2
 8000c64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c68:	3801      	subs	r0, #1
 8000c6a:	e7a3      	b.n	8000bb4 <__udivmoddi4+0x1f8>
 8000c6c:	4646      	mov	r6, r8
 8000c6e:	e7ea      	b.n	8000c46 <__udivmoddi4+0x28a>
 8000c70:	4620      	mov	r0, r4
 8000c72:	e794      	b.n	8000b9e <__udivmoddi4+0x1e2>
 8000c74:	4640      	mov	r0, r8
 8000c76:	e7d1      	b.n	8000c1c <__udivmoddi4+0x260>
 8000c78:	46d0      	mov	r8, sl
 8000c7a:	e77b      	b.n	8000b74 <__udivmoddi4+0x1b8>
 8000c7c:	3b02      	subs	r3, #2
 8000c7e:	4461      	add	r1, ip
 8000c80:	e732      	b.n	8000ae8 <__udivmoddi4+0x12c>
 8000c82:	4630      	mov	r0, r6
 8000c84:	e709      	b.n	8000a9a <__udivmoddi4+0xde>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	e742      	b.n	8000b12 <__udivmoddi4+0x156>

08000c8c <__aeabi_idiv0>:
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <guess>:
 int Ninput;
 double *weights;
 double threshold;
}Perceptron;
double guess(Perceptron p, double *input)
  {
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	463c      	mov	r4, r7
 8000c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    double sum=0.0;
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int N=p.Ninput;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	613b      	str	r3, [r7, #16]
    for (int i=0;i<N;i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e01a      	b.n	8000ce8 <guess+0x58>
    {
    sum+=p.weights[i] *input[i];
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	4413      	add	r3, r2
 8000cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cc4:	4413      	add	r3, r2
 8000cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cca:	f7ff fad1 	bl	8000270 <__aeabi_dmul>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cd6:	f7ff fbfb 	bl	80004d0 <__adddf3>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i=0;i<N;i++)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbe0      	blt.n	8000cb2 <guess+0x22>
    } //for
    sum+=p.threshold;
 8000cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cf4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cf8:	f7ff fbea 	bl	80004d0 <__adddf3>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	e9c7 2306 	strd	r2, r3, [r7, #24]
    //activation
   if (sum >= 0 )
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d10:	f7ff fe08 	bl	8000924 <__aeabi_dcmpge>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <guess+0x92>
    {
      return 1.0;
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <guess+0xac>)
 8000d20:	e003      	b.n	8000d2a <guess+0x9a>
     }  else
      return 0.0;
 8000d22:	f04f 0200 	mov.w	r2, #0
 8000d26:	f04f 0300 	mov.w	r3, #0
  }//predict
 8000d2a:	ec43 2b17 	vmov	d7, r2, r3
 8000d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d32:	eef0 0a67 	vmov.f32	s1, s15
 8000d36:	3724      	adds	r7, #36	; 0x24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	3ff00000 	.word	0x3ff00000

08000d40 <figureout>:
  double figureout(Perceptron *p, double eta, double truevalue,double *input)//outtput is assumed to be of dim1
  {
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	b08f      	sub	sp, #60	; 0x3c
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	6178      	str	r0, [r7, #20]
 8000d48:	ed87 0b02 	vstr	d0, [r7, #8]
 8000d4c:	ed87 1b00 	vstr	d1, [r7]
 8000d50:	6139      	str	r1, [r7, #16]
     //predict for input array of size N
   double prediction= guess(*p,input);
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	9200      	str	r2, [sp, #0]
 8000d58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d5a:	f7ff ff99 	bl	8000c90 <guess>
 8000d5e:	ed87 0b08 	vstr	d0, [r7, #32]
   double err=truevalue-prediction;
 8000d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d6a:	f7ff fbaf 	bl	80004cc <__aeabi_dsub>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	e9c7 2306 	strd	r2, r3, [r7, #24]
   //update weights
   for (int i=0;i<p->Ninput;i++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d7a:	e02e      	b.n	8000dda <figureout+0x9a>
   {
    p->weights[i]+=eta*err*input[i];
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	4413      	add	r3, r2
 8000d86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d92:	f7ff fa6d 	bl	8000270 <__aeabi_dmul>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4413      	add	r3, r2
 8000da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000daa:	f7ff fa61 	bl	8000270 <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	18d6      	adds	r6, r2, r3
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	f7ff fb82 	bl	80004d0 <__adddf3>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	e9c6 2300 	strd	r2, r3, [r6]
   for (int i=0;i<p->Ninput;i++)
 8000dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbcb      	blt.n	8000d7c <figureout+0x3c>
   }
   //update threshold
   p->threshold+=eta*err;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000dea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f7ff fa3d 	bl	8000270 <__aeabi_dmul>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	4629      	mov	r1, r5
 8000dfe:	f7ff fb67 	bl	80004d0 <__adddf3>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	6979      	ldr	r1, [r7, #20]
 8000e08:	e9c1 2302 	strd	r2, r3, [r1, #8]
   return err;
 8000e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e10:	ec43 2b17 	vmov	d7, r2, r3
  }
 8000e14:	eeb0 0a47 	vmov.f32	s0, s14
 8000e18:	eef0 0a67 	vmov.f32	s1, s15
 8000e1c:	3734      	adds	r7, #52	; 0x34
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000e24 <generateperceptron>:
  void generateperceptron(Perceptron *p,int size)
  {
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  p->Ninput=size;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	601a      	str	r2, [r3, #0]
  p->weights = (double*) malloc(size * sizeof(double));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f007 ffc1 	bl	8008dc0 <malloc>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]
  p->threshold=((float)(rand()%100))/100;
 8000e46:	f008 f8b3 	bl	8008fb0 <rand>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <generateperceptron+0xc0>)
 8000e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e52:	1151      	asrs	r1, r2, #5
 8000e54:	17da      	asrs	r2, r3, #31
 8000e56:	1a8a      	subs	r2, r1, r2
 8000e58:	2164      	movs	r1, #100	; 0x64
 8000e5a:	fb01 f202 	mul.w	r2, r1, r2
 8000e5e:	1a9a      	subs	r2, r3, r2
 8000e60:	ee07 2a90 	vmov	s15, r2
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000ee8 <generateperceptron+0xc4>
 8000e6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e70:	ee16 0a90 	vmov	r0, s13
 8000e74:	f7ff fc8a 	bl	800078c <__aeabi_f2d>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  for (int i=0;i<size;i++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	e024      	b.n	8000ed2 <generateperceptron+0xae>
  {
    p->weights[i]=((float)(rand()%100))/100;
 8000e88:	f008 f892 	bl	8008fb0 <rand>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <generateperceptron+0xc0>)
 8000e90:	fb82 1203 	smull	r1, r2, r2, r3
 8000e94:	1151      	asrs	r1, r2, #5
 8000e96:	17da      	asrs	r2, r3, #31
 8000e98:	1a8a      	subs	r2, r1, r2
 8000e9a:	2164      	movs	r1, #100	; 0x64
 8000e9c:	fb01 f202 	mul.w	r2, r1, r2
 8000ea0:	1a9a      	subs	r2, r3, r2
 8000ea2:	ee07 2a90 	vmov	s15, r2
 8000ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eaa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ee8 <generateperceptron+0xc4>
 8000eae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	18d4      	adds	r4, r2, r3
 8000ebc:	ee16 0a90 	vmov	r0, s13
 8000ec0:	f7ff fc64 	bl	800078c <__aeabi_f2d>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	e9c4 2300 	strd	r2, r3, [r4]
  for (int i=0;i<size;i++)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	dbd6      	blt.n	8000e88 <generateperceptron+0x64>
  }
  }
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	51eb851f 	.word	0x51eb851f
 8000ee8:	42c80000 	.word	0x42c80000

08000eec <readadc>:
I2C_HandleTypeDef hi2c1;
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;
TIM_HandleTypeDef htim1;
/* USER CODE BEGIN PV */
void readadc(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
 HAL_ADC_Start(&hadc2);
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <readadc+0x30>)
 8000ef2:	f000 ff7b 	bl	8001dec <HAL_ADC_Start>
 if(HAL_ADC_PollForConversion(&hadc2,10)== HAL_OK)
 8000ef6:	210a      	movs	r1, #10
 8000ef8:	4808      	ldr	r0, [pc, #32]	; (8000f1c <readadc+0x30>)
 8000efa:	f001 f87c 	bl	8001ff6 <HAL_ADC_PollForConversion>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d109      	bne.n	8000f18 <readadc+0x2c>
 {
 C =HAL_ADC_GetValue(&hadc2);
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <readadc+0x30>)
 8000f06:	f001 f901 	bl	800210c <HAL_ADC_GetValue>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <readadc+0x34>)
 8000f10:	601a      	str	r2, [r3, #0]
 HAL_ADC_Stop(&hadc2);
 8000f12:	4802      	ldr	r0, [pc, #8]	; (8000f1c <readadc+0x30>)
 8000f14:	f001 f83c 	bl	8001f90 <HAL_ADC_Stop>
 }
  }
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000b4 	.word	0x200000b4
 8000f20:	200000b0 	.word	0x200000b0
 8000f24:	00000000 	.word	0x00000000

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	Perceptron A ;
	generateperceptron(&A,2);
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2102      	movs	r1, #2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff75 	bl	8000e24 <generateperceptron>

HAL_TIM_Base_Start(&htim1);
 8000f3a:	4837      	ldr	r0, [pc, #220]	; (8001018 <main+0xf0>)
 8000f3c:	f004 fe48 	bl	8005bd0 <HAL_TIM_Base_Start>
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f000 fe7a 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f870 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 fa62 	bl	8001410 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f4c:	f000 f928 	bl	80011a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f50:	f000 f954 	bl	80011fc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f54:	f000 f982 	bl	800125c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f58:	f007 fc58 	bl	800880c <MX_USB_HOST_Init>
  MX_ADC2_Init();
 8000f5c:	f000 f8ce 	bl	80010fc <MX_ADC2_Init>
  MX_TIM1_Init();
 8000f60:	f000 f9b2 	bl	80012c8 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  double array[2];
	  for (int i=0; i<2; i++){
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f68:	e012      	b.n	8000f90 <main+0x68>
		  readadc();
 8000f6a:	f7ff ffbf 	bl	8000eec <readadc>
	  	array [i]= C;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <main+0xf4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fbf8 	bl	8000768 <__aeabi_i2d>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f7e:	00c9      	lsls	r1, r1, #3
 8000f80:	3130      	adds	r1, #48	; 0x30
 8000f82:	4439      	add	r1, r7
 8000f84:	3930      	subs	r1, #48	; 0x30
 8000f86:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int i=0; i<2; i++){
 8000f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	dde9      	ble.n	8000f6a <main+0x42>
	  }
	double B;
if (array [0] != array[1])
 8000f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f9e:	f7ff fca3 	bl	80008e8 <__aeabi_dcmpeq>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d105      	bne.n	8000fb4 <main+0x8c>
	 B=1;
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <main+0xf8>)
 8000fae:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000fb2:	e005      	b.n	8000fc0 <main+0x98>
	else
	 B=0;
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	  figureout(&A , 0.2 , B , array);
 8000fc0:	463a      	mov	r2, r7
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	ed97 1b08 	vldr	d1, [r7, #32]
 8000fcc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001008 <main+0xe0>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff feb5 	bl	8000d40 <figureout>
	  pwm= guess (A,array)*999;
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe0:	f7ff fe56 	bl	8000c90 <guess>
 8000fe4:	ec51 0b10 	vmov	r0, r1, d0
 8000fe8:	a309      	add	r3, pc, #36	; (adr r3, 8001010 <main+0xe8>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff f93f 	bl	8000270 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fca7 	bl	800094c <__aeabi_d2uiz>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <main+0xfc>)
 8001002:	6013      	str	r3, [r2, #0]
  {
 8001004:	e7ae      	b.n	8000f64 <main+0x3c>
 8001006:	bf00      	nop
 8001008:	9999999a 	.word	0x9999999a
 800100c:	3fc99999 	.word	0x3fc99999
 8001010:	00000000 	.word	0x00000000
 8001014:	408f3800 	.word	0x408f3800
 8001018:	200001f0 	.word	0x200001f0
 800101c:	200000b0 	.word	0x200000b0
 8001020:	3ff00000 	.word	0x3ff00000
 8001024:	200000ac 	.word	0x200000ac

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f007 fed2 	bl	8008de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <SystemClock_Config+0xcc>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <SystemClock_Config+0xcc>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <SystemClock_Config+0xd0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <SystemClock_Config+0xd0>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001084:	2301      	movs	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108e:	2302      	movs	r3, #2
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001098:	2308      	movs	r3, #8
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800109c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010a6:	2307      	movs	r3, #7
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 fef2 	bl	8004e98 <HAL_RCC_OscConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ba:	f000 faa7 	bl	800160c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010be:	230f      	movs	r3, #15
 80010c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c2:	2302      	movs	r3, #2
 80010c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2105      	movs	r1, #5
 80010dc:	4618      	mov	r0, r3
 80010de:	f004 f953 	bl	8005388 <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010e8:	f000 fa90 	bl	800160c <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3750      	adds	r7, #80	; 0x50
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC2_Init 0 */
  /* USER CODE END ADC2_Init 0 */
  ADC_ChannelConfTypeDef sConfig = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */
  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_ADC2_Init+0x98>)
 8001110:	4a21      	ldr	r2, [pc, #132]	; (8001198 <MX_ADC2_Init+0x9c>)
 8001112:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_ADC2_Init+0x98>)
 8001116:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800111a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_ADC2_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_ADC2_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_ADC2_Init+0x98>)
 800112a:	2201      	movs	r2, #1
 800112c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_ADC2_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_ADC2_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_ADC2_Init+0x98>)
 800113e:	4a17      	ldr	r2, [pc, #92]	; (800119c <MX_ADC2_Init+0xa0>)
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_ADC2_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_ADC2_Init+0x98>)
 800114a:	2201      	movs	r2, #1
 800114c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_ADC2_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_ADC2_Init+0x98>)
 8001158:	2201      	movs	r2, #1
 800115a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_ADC2_Init+0x98>)
 800115e:	f000 fe01 	bl	8001d64 <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 fa50 	bl	800160c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800116c:	2302      	movs	r3, #2
 800116e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001170:	2301      	movs	r3, #1
 8001172:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_ADC2_Init+0x98>)
 800117e:	f000 ffd3 	bl	8002128 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001188:	f000 fa40 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000b4 	.word	0x200000b4
 8001198:	40012100 	.word	0x40012100
 800119c:	0f000001 	.word	0x0f000001

080011a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */
  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <MX_I2C1_Init+0x54>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_I2C1_Init+0x58>)
 80011ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011de:	f003 f877 	bl	80042d0 <HAL_I2C_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e8:	f000 fa10 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000fc 	.word	0x200000fc
 80011f4:	40005400 	.word	0x40005400
 80011f8:	000186a0 	.word	0x000186a0

080011fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2S3_Init 0 */
  /* USER CODE END I2S3_Init 0 */
  /* USER CODE BEGIN I2S3_Init 1 */
  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_I2S3_Init+0x54>)
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <MX_I2S3_Init+0x58>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_I2S3_Init+0x54>)
 8001208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800120c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_I2S3_Init+0x54>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_I2S3_Init+0x54>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <MX_I2S3_Init+0x54>)
 800121c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001220:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_I2S3_Init+0x54>)
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <MX_I2S3_Init+0x5c>)
 8001226:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_I2S3_Init+0x54>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_I2S3_Init+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_I2S3_Init+0x54>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_I2S3_Init+0x54>)
 800123c:	f003 f98c 	bl	8004558 <HAL_I2S_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001246:	f000 f9e1 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */
  /* USER CODE END I2S3_Init 2 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000150 	.word	0x20000150
 8001254:	40003c00 	.word	0x40003c00
 8001258:	00017700 	.word	0x00017700

0800125c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 0 */
  /* USER CODE END SPI1_Init 0 */
  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_SPI1_Init+0x64>)
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <MX_SPI1_Init+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_SPI1_Init+0x64>)
 8001268:	f44f 7282 	mov.w	r2, #260	; 0x104
 800126c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_SPI1_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_SPI1_Init+0x64>)
 8001288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800128c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_SPI1_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_SPI1_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_SPI1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_SPI1_Init+0x64>)
 80012a8:	220a      	movs	r2, #10
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_SPI1_Init+0x64>)
 80012ae:	f004 fbb7 	bl	8005a20 <HAL_SPI_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012b8:	f000 f9a8 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000198 	.word	0x20000198
 80012c4:	40013000 	.word	0x40013000

080012c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b096      	sub	sp, #88	; 0x58
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2220      	movs	r2, #32
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f007 fd6d 	bl	8008de0 <memset>
  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <MX_TIM1_Init+0x13c>)
 8001308:	4a3f      	ldr	r2, [pc, #252]	; (8001408 <MX_TIM1_Init+0x140>)
 800130a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800130c:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <MX_TIM1_Init+0x13c>)
 800130e:	2253      	movs	r2, #83	; 0x53
 8001310:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <MX_TIM1_Init+0x13c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001318:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <MX_TIM1_Init+0x13c>)
 800131a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800131e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b38      	ldr	r3, [pc, #224]	; (8001404 <MX_TIM1_Init+0x13c>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <MX_TIM1_Init+0x13c>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132c:	4b35      	ldr	r3, [pc, #212]	; (8001404 <MX_TIM1_Init+0x13c>)
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001332:	4834      	ldr	r0, [pc, #208]	; (8001404 <MX_TIM1_Init+0x13c>)
 8001334:	f004 fbfd 	bl	8005b32 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800133e:	f000 f965 	bl	800160c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800134c:	4619      	mov	r1, r3
 800134e:	482d      	ldr	r0, [pc, #180]	; (8001404 <MX_TIM1_Init+0x13c>)
 8001350:	f004 fdc2 	bl	8005ed8 <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800135a:	f000 f957 	bl	800160c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800135e:	4829      	ldr	r0, [pc, #164]	; (8001404 <MX_TIM1_Init+0x13c>)
 8001360:	f004 fc9e 	bl	8005ca0 <HAL_TIM_PWM_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800136a:	f000 f94f 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001376:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800137a:	4619      	mov	r1, r3
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <MX_TIM1_Init+0x13c>)
 800137e:	f005 f95d 	bl	800663c <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001388:	f000 f940 	bl	800160c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138c:	2360      	movs	r3, #96	; 0x60
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = pwm;
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_TIM1_Init+0x144>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	2208      	movs	r2, #8
 80013b0:	4619      	mov	r1, r3
 80013b2:	4814      	ldr	r0, [pc, #80]	; (8001404 <MX_TIM1_Init+0x13c>)
 80013b4:	f004 fcce 	bl	8005d54 <HAL_TIM_PWM_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80013be:	f000 f925 	bl	800160c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM1_Init+0x13c>)
 80013e6:	f005 f9a5 	bl	8006734 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80013f0:	f000 f90c 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM1_Init+0x13c>)
 80013f6:	f000 faaf 	bl	8001958 <HAL_TIM_MspPostInit>
}
 80013fa:	bf00      	nop
 80013fc:	3758      	adds	r7, #88	; 0x58
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200001f0 	.word	0x200001f0
 8001408:	40010000 	.word	0x40010000
 800140c:	200000ac 	.word	0x200000ac

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	4b72      	ldr	r3, [pc, #456]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a71      	ldr	r2, [pc, #452]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b6f      	ldr	r3, [pc, #444]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a6a      	ldr	r2, [pc, #424]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a63      	ldr	r2, [pc, #396]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b61      	ldr	r3, [pc, #388]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a5c      	ldr	r2, [pc, #368]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b5a      	ldr	r3, [pc, #360]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b56      	ldr	r3, [pc, #344]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a55      	ldr	r2, [pc, #340]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b4f      	ldr	r3, [pc, #316]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <MX_GPIO_Init+0x1e4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2108      	movs	r1, #8
 80014d2:	4849      	ldr	r0, [pc, #292]	; (80015f8 <MX_GPIO_Init+0x1e8>)
 80014d4:	f001 faf4 	bl	8002ac0 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	2101      	movs	r1, #1
 80014dc:	4847      	ldr	r0, [pc, #284]	; (80015fc <MX_GPIO_Init+0x1ec>)
 80014de:	f001 faef 	bl	8002ac0 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014e2:	2200      	movs	r2, #0
 80014e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014e8:	4845      	ldr	r0, [pc, #276]	; (8001600 <MX_GPIO_Init+0x1f0>)
 80014ea:	f001 fae9 	bl	8002ac0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);
  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014ee:	2308      	movs	r3, #8
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	483c      	ldr	r0, [pc, #240]	; (80015f8 <MX_GPIO_Init+0x1e8>)
 8001506:	f001 f93f 	bl	8002788 <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4836      	ldr	r0, [pc, #216]	; (80015fc <MX_GPIO_Init+0x1ec>)
 8001522:	f001 f931 	bl	8002788 <HAL_GPIO_Init>
  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001526:	2308      	movs	r3, #8
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001536:	2305      	movs	r3, #5
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	482e      	ldr	r0, [pc, #184]	; (80015fc <MX_GPIO_Init+0x1ec>)
 8001542:	f001 f921 	bl	8002788 <HAL_GPIO_Init>
  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001546:	2301      	movs	r3, #1
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800154a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	482a      	ldr	r0, [pc, #168]	; (8001604 <MX_GPIO_Init+0x1f4>)
 800155c:	f001 f914 	bl	8002788 <HAL_GPIO_Init>
  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001560:	2304      	movs	r3, #4
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4825      	ldr	r0, [pc, #148]	; (8001608 <MX_GPIO_Init+0x1f8>)
 8001574:	f001 f908 	bl	8002788 <HAL_GPIO_Init>
  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800158a:	2305      	movs	r3, #5
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	481c      	ldr	r0, [pc, #112]	; (8001608 <MX_GPIO_Init+0x1f8>)
 8001596:	f001 f8f7 	bl	8002788 <HAL_GPIO_Init>
  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800159a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800159e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_GPIO_Init+0x1f0>)
 80015b4:	f001 f8e8 	bl	8002788 <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015b8:	2320      	movs	r3, #32
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_GPIO_Init+0x1f0>)
 80015cc:	f001 f8dc 	bl	8002788 <HAL_GPIO_Init>
  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <MX_GPIO_Init+0x1e8>)
 80015e6:	f001 f8cf 	bl	8002788 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ea:	bf00      	nop
 80015ec:	3730      	adds	r7, #48	; 0x30
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_MspInit+0x4c>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_MspInit+0x4c>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_MspInit+0x4c>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800165a:	2007      	movs	r0, #7
 800165c:	f001 f852 	bl	8002704 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800

0800166c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_ADC_MspInit+0x7c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d127      	bne.n	80016de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_ADC_MspInit+0x80>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <HAL_ADC_MspInit+0x80>)
 8001698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_ADC_MspInit+0x80>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_ADC_MspInit+0x80>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_ADC_MspInit+0x80>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_ADC_MspInit+0x80>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016c6:	2304      	movs	r3, #4
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ca:	2303      	movs	r3, #3
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <HAL_ADC_MspInit+0x84>)
 80016da:	f001 f855 	bl	8002788 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40012100 	.word	0x40012100
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000

080016f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	; (8001778 <HAL_I2C_MspInit+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12c      	bne.n	8001770 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_I2C_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_I2C_MspInit+0x88>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_I2C_MspInit+0x88>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001732:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001738:	2312      	movs	r3, #18
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173c:	2301      	movs	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001744:	2304      	movs	r3, #4
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	480c      	ldr	r0, [pc, #48]	; (8001780 <HAL_I2C_MspInit+0x8c>)
 8001750:	f001 f81a 	bl	8002788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_I2C_MspInit+0x88>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_I2C_MspInit+0x88>)
 800175e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_I2C_MspInit+0x88>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40005400 	.word	0x40005400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400

08001784 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_I2S_MspInit+0xf0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d15a      	bne.n	800186a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017b4:	2301      	movs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80017b8:	23c0      	movs	r3, #192	; 0xc0
 80017ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017bc:	2302      	movs	r3, #2
 80017be:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 ffeb 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80017d0:	f7ff ff1c 	bl	800160c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_I2S_MspInit+0xf4>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <HAL_I2S_MspInit+0xf4>)
 80017de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_I2S_MspInit+0xf4>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_I2S_MspInit+0xf4>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_I2S_MspInit+0xf4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_I2S_MspInit+0xf4>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_I2S_MspInit+0xf4>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	4a18      	ldr	r2, [pc, #96]	; (8001878 <HAL_I2S_MspInit+0xf4>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6313      	str	r3, [r2, #48]	; 0x30
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_I2S_MspInit+0xf4>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001828:	2310      	movs	r3, #16
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001838:	2306      	movs	r3, #6
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <HAL_I2S_MspInit+0xf8>)
 8001844:	f000 ffa0 	bl	8002788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001848:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800185a:	2306      	movs	r3, #6
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001862:	4619      	mov	r1, r3
 8001864:	4806      	ldr	r0, [pc, #24]	; (8001880 <HAL_I2S_MspInit+0xfc>)
 8001866:	f000 ff8f 	bl	8002788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3738      	adds	r7, #56	; 0x38
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40003c00 	.word	0x40003c00
 8001878:	40023800 	.word	0x40023800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020800 	.word	0x40020800

08001884 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a19      	ldr	r2, [pc, #100]	; (8001908 <HAL_SPI_MspInit+0x84>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d12b      	bne.n	80018fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_SPI_MspInit+0x88>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a17      	ldr	r2, [pc, #92]	; (800190c <HAL_SPI_MspInit+0x88>)
 80018b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_SPI_MspInit+0x88>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_SPI_MspInit+0x88>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_SPI_MspInit+0x88>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_SPI_MspInit+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018de:	23e0      	movs	r3, #224	; 0xe0
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ee:	2305      	movs	r3, #5
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <HAL_SPI_MspInit+0x8c>)
 80018fa:	f000 ff45 	bl	8002788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3728      	adds	r7, #40	; 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40013000 	.word	0x40013000
 800190c:	40023800 	.word	0x40023800
 8001910:	40020000 	.word	0x40020000

08001914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_TIM_Base_MspInit+0x3c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10d      	bne.n	8001942 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_TIM_Base_MspInit+0x40>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <HAL_TIM_Base_MspInit+0x40>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <HAL_TIM_Base_MspInit+0x40>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40010000 	.word	0x40010000
 8001954:	40023800 	.word	0x40023800

08001958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_TIM_MspPostInit+0x68>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d11e      	bne.n	80019b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_TIM_MspPostInit+0x6c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_TIM_MspPostInit+0x6c>)
 8001984:	f043 0310 	orr.w	r3, r3, #16
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_TIM_MspPostInit+0x6c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	4619      	mov	r1, r3
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_TIM_MspPostInit+0x70>)
 80019b4:	f000 fee8 	bl	8002788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019b8:	bf00      	nop
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40010000 	.word	0x40010000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40021000 	.word	0x40021000

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 f960 	bl	8001cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <OTG_FS_IRQHandler+0x10>)
 8001a26:	f001 facf 	bl	8002fc8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000061c 	.word	0x2000061c

08001a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_kill>:

int _kill(int pid, int sig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4e:	f007 f98d 	bl	8008d6c <__errno>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2216      	movs	r2, #22
 8001a56:	601a      	str	r2, [r3, #0]
  return -1;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_exit>:

void _exit (int status)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffe7 	bl	8001a44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a76:	e7fe      	b.n	8001a76 <_exit+0x12>

08001a78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e00a      	b.n	8001aa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8a:	f3af 8000 	nop.w
 8001a8e:	4601      	mov	r1, r0
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	60ba      	str	r2, [r7, #8]
 8001a96:	b2ca      	uxtb	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dbf0      	blt.n	8001a8a <_read+0x12>
  }

  return len;
 8001aa8:	687b      	ldr	r3, [r7, #4]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e009      	b.n	8001ad8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	60ba      	str	r2, [r7, #8]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dbf1      	blt.n	8001ac4 <_write+0x12>
  }
  return len;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_close>:

int _close(int file)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b12:	605a      	str	r2, [r3, #4]
  return 0;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_isatty>:

int _isatty(int file)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f007 f8f2 	bl	8008d6c <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20020000 	.word	0x20020000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	20000238 	.word	0x20000238
 8001bbc:	20000930 	.word	0x20000930

08001bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <SystemInit+0x20>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <SystemInit+0x20>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bea:	490e      	ldr	r1, [pc, #56]	; (8001c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bec:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf0:	e002      	b.n	8001bf8 <LoopCopyDataInit>

08001bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf6:	3304      	adds	r3, #4

08001bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bfc:	d3f9      	bcc.n	8001bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c00:	4c0b      	ldr	r4, [pc, #44]	; (8001c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c04:	e001      	b.n	8001c0a <LoopFillZerobss>

08001c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c08:	3204      	adds	r2, #4

08001c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c0c:	d3fb      	bcc.n	8001c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c0e:	f7ff ffd7 	bl	8001bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c12:	f007 f8b1 	bl	8008d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c16:	f7ff f987 	bl	8000f28 <main>
  bx  lr    
 8001c1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001c28:	08009fdc 	.word	0x08009fdc
  ldr r2, =_sbss
 8001c2c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001c30:	20000930 	.word	0x20000930

08001c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_Init+0x40>)
 8001c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_Init+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_Init+0x40>)
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_Init+0x40>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f000 fd4f 	bl	8002704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f808 	bl	8001c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c6c:	f7ff fcd6 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x54>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_InitTick+0x58>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fd67 	bl	800276e <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00e      	b.n	8001cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d80a      	bhi.n	8001cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb8:	f000 fd2f 	bl	800271a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_InitTick+0x5c>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x24>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_IncTick+0x24>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	2000023c 	.word	0x2000023c

08001d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_GetTick+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	2000023c 	.word	0x2000023c

08001d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff ffee 	bl	8001d04 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d34:	d005      	beq.n	8001d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_Delay+0x44>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d42:	bf00      	nop
 8001d44:	f7ff ffde 	bl	8001d04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d8f7      	bhi.n	8001d44 <HAL_Delay+0x28>
  {
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008

08001d64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e033      	b.n	8001de2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fc72 	bl	800166c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001daa:	f023 0302 	bic.w	r3, r3, #2
 8001dae:	f043 0202 	orr.w	r2, r3, #2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fad8 	bl	800236c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f023 0303 	bic.w	r3, r3, #3
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8001dd2:	e001      	b.n	8001dd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Start+0x1a>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e0b2      	b.n	8001f6c <HAL_ADC_Start+0x180>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d018      	beq.n	8001e4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e2c:	4b52      	ldr	r3, [pc, #328]	; (8001f78 <HAL_ADC_Start+0x18c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_ADC_Start+0x190>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0c9a      	lsrs	r2, r3, #18
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e40:	e002      	b.n	8001e48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f9      	bne.n	8001e42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d17a      	bne.n	8001f52 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9a:	d106      	bne.n	8001eaa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	f023 0206 	bic.w	r2, r3, #6
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ea8:	e002      	b.n	8001eb0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_ADC_Start+0x194>)
 8001eba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ec4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d12a      	bne.n	8001f28 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <HAL_ADC_Start+0x198>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d015      	beq.n	8001f08 <HAL_ADC_Start+0x11c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a29      	ldr	r2, [pc, #164]	; (8001f88 <HAL_ADC_Start+0x19c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d105      	bne.n	8001ef2 <HAL_ADC_Start+0x106>
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_ADC_Start+0x194>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <HAL_ADC_Start+0x1a0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d136      	bne.n	8001f6a <HAL_ADC_Start+0x17e>
 8001efc:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_ADC_Start+0x194>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d130      	bne.n	8001f6a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d129      	bne.n	8001f6a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	e020      	b.n	8001f6a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <HAL_ADC_Start+0x198>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d11b      	bne.n	8001f6a <HAL_ADC_Start+0x17e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d114      	bne.n	8001f6a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	e00b      	b.n	8001f6a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	431bde83 	.word	0x431bde83
 8001f80:	40012300 	.word	0x40012300
 8001f84:	40012000 	.word	0x40012000
 8001f88:	40012100 	.word	0x40012100
 8001f8c:	40012200 	.word	0x40012200

08001f90 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_Stop+0x16>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e021      	b.n	8001fea <HAL_ADC_Stop+0x5a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002012:	d113      	bne.n	800203c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800201e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002022:	d10b      	bne.n	800203c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e063      	b.n	8002104 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800203c:	f7ff fe62 	bl	8001d04 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002042:	e021      	b.n	8002088 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800204a:	d01d      	beq.n	8002088 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_ADC_PollForConversion+0x6c>
 8002052:	f7ff fe57 	bl	8001d04 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d212      	bcs.n	8002088 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b02      	cmp	r3, #2
 800206e:	d00b      	beq.n	8002088 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f043 0204 	orr.w	r2, r3, #4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e03d      	b.n	8002104 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b02      	cmp	r3, #2
 8002094:	d1d6      	bne.n	8002044 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f06f 0212 	mvn.w	r2, #18
 800209e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d123      	bne.n	8002102 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d11f      	bne.n	8002102 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d111      	bne.n	8002102 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1c>
 8002140:	2302      	movs	r3, #2
 8002142:	e105      	b.n	8002350 <HAL_ADC_ConfigChannel+0x228>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b09      	cmp	r3, #9
 8002152:	d925      	bls.n	80021a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68d9      	ldr	r1, [r3, #12]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	3b1e      	subs	r3, #30
 800216a:	2207      	movs	r2, #7
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43da      	mvns	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	400a      	ands	r2, r1
 8002178:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68d9      	ldr	r1, [r3, #12]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	4603      	mov	r3, r0
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4403      	add	r3, r0
 8002192:	3b1e      	subs	r3, #30
 8002194:	409a      	lsls	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	e022      	b.n	80021e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6919      	ldr	r1, [r3, #16]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	2207      	movs	r2, #7
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	400a      	ands	r2, r1
 80021c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6919      	ldr	r1, [r3, #16]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4618      	mov	r0, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4403      	add	r3, r0
 80021dc:	409a      	lsls	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d824      	bhi.n	8002238 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b05      	subs	r3, #5
 8002200:	221f      	movs	r2, #31
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	400a      	ands	r2, r1
 800220e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b05      	subs	r3, #5
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	635a      	str	r2, [r3, #52]	; 0x34
 8002236:	e04c      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d824      	bhi.n	800228a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	3b23      	subs	r3, #35	; 0x23
 8002252:	221f      	movs	r2, #31
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43da      	mvns	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	400a      	ands	r2, r1
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	4618      	mov	r0, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b23      	subs	r3, #35	; 0x23
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
 8002288:	e023      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	3b41      	subs	r3, #65	; 0x41
 800229c:	221f      	movs	r2, #31
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	400a      	ands	r2, r1
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4618      	mov	r0, r3
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	3b41      	subs	r3, #65	; 0x41
 80022c6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_ADC_ConfigChannel+0x234>)
 80022d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_ADC_ConfigChannel+0x238>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d109      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x1cc>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b12      	cmp	r3, #18
 80022e6:	d105      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_ADC_ConfigChannel+0x238>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d123      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x21e>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d003      	beq.n	800230e <HAL_ADC_ConfigChannel+0x1e6>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b11      	cmp	r3, #17
 800230c:	d11b      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b10      	cmp	r3, #16
 8002320:	d111      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_ADC_ConfigChannel+0x23c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_ADC_ConfigChannel+0x240>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	0c9a      	lsrs	r2, r3, #18
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002338:	e002      	b.n	8002340 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3b01      	subs	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f9      	bne.n	800233a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40012300 	.word	0x40012300
 8002360:	40012000 	.word	0x40012000
 8002364:	20000000 	.word	0x20000000
 8002368:	431bde83 	.word	0x431bde83

0800236c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002374:	4b79      	ldr	r3, [pc, #484]	; (800255c <ADC_Init+0x1f0>)
 8002376:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	431a      	orrs	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	021a      	lsls	r2, r3, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6899      	ldr	r1, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	4a58      	ldr	r2, [pc, #352]	; (8002560 <ADC_Init+0x1f4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d022      	beq.n	800244a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6899      	ldr	r1, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	e00f      	b.n	800246a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002468:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0202 	bic.w	r2, r2, #2
 8002478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7e1b      	ldrb	r3, [r3, #24]
 8002484:	005a      	lsls	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	3b01      	subs	r3, #1
 80024c4:	035a      	lsls	r2, r3, #13
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	e007      	b.n	80024e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	051a      	lsls	r2, r3, #20
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6899      	ldr	r1, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002522:	025a      	lsls	r2, r3, #9
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6899      	ldr	r1, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	029a      	lsls	r2, r3, #10
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	609a      	str	r2, [r3, #8]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40012300 	.word	0x40012300
 8002560:	0f000001 	.word	0x0f000001

08002564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800258c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <__NVIC_GetPriorityGrouping+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0307 	and.w	r3, r3, #7
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	db0b      	blt.n	80025f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4907      	ldr	r1, [pc, #28]	; (8002600 <__NVIC_EnableIRQ+0x38>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2001      	movs	r0, #1
 80025ea:	fa00 f202 	lsl.w	r2, r0, r2
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000e100 	.word	0xe000e100

08002604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	2b00      	cmp	r3, #0
 8002616:	db0a      	blt.n	800262e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	490c      	ldr	r1, [pc, #48]	; (8002650 <__NVIC_SetPriority+0x4c>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	0112      	lsls	r2, r2, #4
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	440b      	add	r3, r1
 8002628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800262c:	e00a      	b.n	8002644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4908      	ldr	r1, [pc, #32]	; (8002654 <__NVIC_SetPriority+0x50>)
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	3b04      	subs	r3, #4
 800263c:	0112      	lsls	r2, r2, #4
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	440b      	add	r3, r1
 8002642:	761a      	strb	r2, [r3, #24]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f1c3 0307 	rsb	r3, r3, #7
 8002672:	2b04      	cmp	r3, #4
 8002674:	bf28      	it	cs
 8002676:	2304      	movcs	r3, #4
 8002678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3304      	adds	r3, #4
 800267e:	2b06      	cmp	r3, #6
 8002680:	d902      	bls.n	8002688 <NVIC_EncodePriority+0x30>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3b03      	subs	r3, #3
 8002686:	e000      	b.n	800268a <NVIC_EncodePriority+0x32>
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	43d9      	mvns	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	4313      	orrs	r3, r2
         );
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d0:	d301      	bcc.n	80026d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00f      	b.n	80026f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <SysTick_Config+0x40>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026de:	210f      	movs	r1, #15
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e4:	f7ff ff8e 	bl	8002604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <SysTick_Config+0x40>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <SysTick_Config+0x40>)
 80026f0:	2207      	movs	r2, #7
 80026f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	e000e010 	.word	0xe000e010

08002704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff29 	bl	8002564 <__NVIC_SetPriorityGrouping>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800272c:	f7ff ff3e 	bl	80025ac <__NVIC_GetPriorityGrouping>
 8002730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	6978      	ldr	r0, [r7, #20]
 8002738:	f7ff ff8e 	bl	8002658 <NVIC_EncodePriority>
 800273c:	4602      	mov	r2, r0
 800273e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff5d 	bl	8002604 <__NVIC_SetPriority>
}
 800274a:	bf00      	nop
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff31 	bl	80025c8 <__NVIC_EnableIRQ>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ffa2 	bl	80026c0 <SysTick_Config>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	e16b      	b.n	8002a7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	f040 815a 	bne.w	8002a76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d005      	beq.n	80027da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d130      	bne.n	800283c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	2203      	movs	r2, #3
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 0201 	and.w	r2, r3, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b03      	cmp	r3, #3
 8002846:	d017      	beq.n	8002878 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d123      	bne.n	80028cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	08da      	lsrs	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3208      	adds	r2, #8
 800288c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	220f      	movs	r2, #15
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	08da      	lsrs	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3208      	adds	r2, #8
 80028c6:	69b9      	ldr	r1, [r7, #24]
 80028c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0203 	and.w	r2, r3, #3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80b4 	beq.w	8002a76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b60      	ldr	r3, [pc, #384]	; (8002a94 <HAL_GPIO_Init+0x30c>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a5f      	ldr	r2, [pc, #380]	; (8002a94 <HAL_GPIO_Init+0x30c>)
 8002918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <HAL_GPIO_Init+0x30c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800292a:	4a5b      	ldr	r2, [pc, #364]	; (8002a98 <HAL_GPIO_Init+0x310>)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	3302      	adds	r3, #2
 8002932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	220f      	movs	r2, #15
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <HAL_GPIO_Init+0x314>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d02b      	beq.n	80029ae <HAL_GPIO_Init+0x226>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a51      	ldr	r2, [pc, #324]	; (8002aa0 <HAL_GPIO_Init+0x318>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d025      	beq.n	80029aa <HAL_GPIO_Init+0x222>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a50      	ldr	r2, [pc, #320]	; (8002aa4 <HAL_GPIO_Init+0x31c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01f      	beq.n	80029a6 <HAL_GPIO_Init+0x21e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4f      	ldr	r2, [pc, #316]	; (8002aa8 <HAL_GPIO_Init+0x320>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0x21a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <HAL_GPIO_Init+0x324>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0x216>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4d      	ldr	r2, [pc, #308]	; (8002ab0 <HAL_GPIO_Init+0x328>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00d      	beq.n	800299a <HAL_GPIO_Init+0x212>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4c      	ldr	r2, [pc, #304]	; (8002ab4 <HAL_GPIO_Init+0x32c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x20e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4b      	ldr	r2, [pc, #300]	; (8002ab8 <HAL_GPIO_Init+0x330>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_GPIO_Init+0x20a>
 800298e:	2307      	movs	r3, #7
 8002990:	e00e      	b.n	80029b0 <HAL_GPIO_Init+0x228>
 8002992:	2308      	movs	r3, #8
 8002994:	e00c      	b.n	80029b0 <HAL_GPIO_Init+0x228>
 8002996:	2306      	movs	r3, #6
 8002998:	e00a      	b.n	80029b0 <HAL_GPIO_Init+0x228>
 800299a:	2305      	movs	r3, #5
 800299c:	e008      	b.n	80029b0 <HAL_GPIO_Init+0x228>
 800299e:	2304      	movs	r3, #4
 80029a0:	e006      	b.n	80029b0 <HAL_GPIO_Init+0x228>
 80029a2:	2303      	movs	r3, #3
 80029a4:	e004      	b.n	80029b0 <HAL_GPIO_Init+0x228>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e002      	b.n	80029b0 <HAL_GPIO_Init+0x228>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_GPIO_Init+0x228>
 80029ae:	2300      	movs	r3, #0
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	f002 0203 	and.w	r2, r2, #3
 80029b6:	0092      	lsls	r2, r2, #2
 80029b8:	4093      	lsls	r3, r2
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c0:	4935      	ldr	r1, [pc, #212]	; (8002a98 <HAL_GPIO_Init+0x310>)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	089b      	lsrs	r3, r3, #2
 80029c6:	3302      	adds	r3, #2
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ce:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_GPIO_Init+0x334>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029f2:	4a32      	ldr	r2, [pc, #200]	; (8002abc <HAL_GPIO_Init+0x334>)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f8:	4b30      	ldr	r3, [pc, #192]	; (8002abc <HAL_GPIO_Init+0x334>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a1c:	4a27      	ldr	r2, [pc, #156]	; (8002abc <HAL_GPIO_Init+0x334>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <HAL_GPIO_Init+0x334>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <HAL_GPIO_Init+0x334>)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_GPIO_Init+0x334>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a70:	4a12      	ldr	r2, [pc, #72]	; (8002abc <HAL_GPIO_Init+0x334>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2b0f      	cmp	r3, #15
 8002a80:	f67f ae90 	bls.w	80027a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	3724      	adds	r7, #36	; 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40013800 	.word	0x40013800
 8002a9c:	40020000 	.word	0x40020000
 8002aa0:	40020400 	.word	0x40020400
 8002aa4:	40020800 	.word	0x40020800
 8002aa8:	40020c00 	.word	0x40020c00
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40021400 	.word	0x40021400
 8002ab4:	40021800 	.word	0x40021800
 8002ab8:	40021c00 	.word	0x40021c00
 8002abc:	40013c00 	.word	0x40013c00

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002adc:	e003      	b.n	8002ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	041a      	lsls	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af4:	b08f      	sub	sp, #60	; 0x3c
 8002af6:	af0a      	add	r7, sp, #40	; 0x28
 8002af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e054      	b.n	8002bae <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f005 fec8 	bl	80088b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2203      	movs	r2, #3
 8002b28:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 feba 	bl	80068bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	687e      	ldr	r6, [r7, #4]
 8002b50:	466d      	mov	r5, sp
 8002b52:	f106 0410 	add.w	r4, r6, #16
 8002b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b62:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b66:	1d33      	adds	r3, r6, #4
 8002b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	f003 fe34 	bl	80067d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 feb1 	bl	80068de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	687e      	ldr	r6, [r7, #4]
 8002b84:	466d      	mov	r5, sp
 8002b86:	f106 0410 	add.w	r4, r6, #16
 8002b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b9a:	1d33      	adds	r3, r6, #4
 8002b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9e:	6838      	ldr	r0, [r7, #0]
 8002ba0:	f004 f83a 	bl	8006c18 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bb6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002bb6:	b590      	push	{r4, r7, lr}
 8002bb8:	b089      	sub	sp, #36	; 0x24
 8002bba:	af04      	add	r7, sp, #16
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	4608      	mov	r0, r1
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	70fb      	strb	r3, [r7, #3]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70bb      	strb	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_HCD_HC_Init+0x28>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e076      	b.n	8002ccc <HAL_HCD_HC_Init+0x116>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	333d      	adds	r3, #61	; 0x3d
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3338      	adds	r3, #56	; 0x38
 8002c06:	787a      	ldrb	r2, [r7, #1]
 8002c08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3340      	adds	r3, #64	; 0x40
 8002c18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c1a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3339      	adds	r3, #57	; 0x39
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	333f      	adds	r3, #63	; 0x3f
 8002c3c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002c40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	78ba      	ldrb	r2, [r7, #2]
 8002c46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c4a:	b2d0      	uxtb	r0, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	333a      	adds	r3, #58	; 0x3a
 8002c58:	4602      	mov	r2, r0
 8002c5a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002c5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da09      	bge.n	8002c78 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	333b      	adds	r3, #59	; 0x3b
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e008      	b.n	8002c8a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	333b      	adds	r3, #59	; 0x3b
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	333c      	adds	r3, #60	; 0x3c
 8002c98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c9c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	787c      	ldrb	r4, [r7, #1]
 8002ca4:	78ba      	ldrb	r2, [r7, #2]
 8002ca6:	78f9      	ldrb	r1, [r7, #3]
 8002ca8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4623      	mov	r3, r4
 8002cba:	f004 f909 	bl	8006ed0 <USB_HC_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd90      	pop	{r4, r7, pc}

08002cd4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_HCD_HC_Halt+0x1e>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e00f      	b.n	8002d12 <HAL_HCD_HC_Halt+0x3e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f004 fb59 	bl	80073ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	4608      	mov	r0, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	70fb      	strb	r3, [r7, #3]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	70bb      	strb	r3, [r7, #2]
 8002d32:	4613      	mov	r3, r2
 8002d34:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	333b      	adds	r3, #59	; 0x3b
 8002d44:	78ba      	ldrb	r2, [r7, #2]
 8002d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	333f      	adds	r3, #63	; 0x3f
 8002d56:	787a      	ldrb	r2, [r7, #1]
 8002d58:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002d5a:	7c3b      	ldrb	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d112      	bne.n	8002d86 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3342      	adds	r3, #66	; 0x42
 8002d6e:	2203      	movs	r2, #3
 8002d70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	333d      	adds	r3, #61	; 0x3d
 8002d80:	7f3a      	ldrb	r2, [r7, #28]
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e008      	b.n	8002d98 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3342      	adds	r3, #66	; 0x42
 8002d94:	2202      	movs	r2, #2
 8002d96:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002d98:	787b      	ldrb	r3, [r7, #1]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	f200 80c6 	bhi.w	8002f2c <HAL_HCD_HC_SubmitRequest+0x210>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002f19 	.word	0x08002f19
 8002db0:	08002e1d 	.word	0x08002e1d
 8002db4:	08002e9b 	.word	0x08002e9b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002db8:	7c3b      	ldrb	r3, [r7, #16]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	f040 80b8 	bne.w	8002f30 <HAL_HCD_HC_SubmitRequest+0x214>
 8002dc0:	78bb      	ldrb	r3, [r7, #2]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 80b4 	bne.w	8002f30 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002dc8:	8b3b      	ldrh	r3, [r7, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d108      	bne.n	8002de0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3355      	adds	r3, #85	; 0x55
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	3355      	adds	r3, #85	; 0x55
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3342      	adds	r3, #66	; 0x42
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e06:	e093      	b.n	8002f30 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3342      	adds	r3, #66	; 0x42
 8002e16:	2202      	movs	r2, #2
 8002e18:	701a      	strb	r2, [r3, #0]
      break;
 8002e1a:	e089      	b.n	8002f30 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002e1c:	78bb      	ldrb	r3, [r7, #2]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11d      	bne.n	8002e5e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3355      	adds	r3, #85	; 0x55
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3342      	adds	r3, #66	; 0x42
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002e48:	e073      	b.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3342      	adds	r3, #66	; 0x42
 8002e58:	2202      	movs	r2, #2
 8002e5a:	701a      	strb	r2, [r3, #0]
      break;
 8002e5c:	e069      	b.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	3354      	adds	r3, #84	; 0x54
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3342      	adds	r3, #66	; 0x42
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
      break;
 8002e84:	e055      	b.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3342      	adds	r3, #66	; 0x42
 8002e94:	2202      	movs	r2, #2
 8002e96:	701a      	strb	r2, [r3, #0]
      break;
 8002e98:	e04b      	b.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e9a:	78bb      	ldrb	r3, [r7, #2]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11d      	bne.n	8002edc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3355      	adds	r3, #85	; 0x55
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3342      	adds	r3, #66	; 0x42
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ec6:	e034      	b.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3342      	adds	r3, #66	; 0x42
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	701a      	strb	r2, [r3, #0]
      break;
 8002eda:	e02a      	b.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3354      	adds	r3, #84	; 0x54
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	212c      	movs	r1, #44	; 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	3342      	adds	r3, #66	; 0x42
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
      break;
 8002f02:	e016      	b.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3342      	adds	r3, #66	; 0x42
 8002f12:	2202      	movs	r2, #2
 8002f14:	701a      	strb	r2, [r3, #0]
      break;
 8002f16:	e00c      	b.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3342      	adds	r3, #66	; 0x42
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002f30:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3344      	adds	r3, #68	; 0x44
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	8b3a      	ldrh	r2, [r7, #24]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	202c      	movs	r0, #44	; 0x2c
 8002f4c:	fb00 f303 	mul.w	r3, r0, r3
 8002f50:	440b      	add	r3, r1
 8002f52:	334c      	adds	r3, #76	; 0x4c
 8002f54:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3360      	adds	r3, #96	; 0x60
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	3350      	adds	r3, #80	; 0x50
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	212c      	movs	r1, #44	; 0x2c
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	3339      	adds	r3, #57	; 0x39
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3361      	adds	r3, #97	; 0x61
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	222c      	movs	r2, #44	; 0x2c
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	3338      	adds	r3, #56	; 0x38
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	18d1      	adds	r1, r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f004 f8ac 	bl	8007114 <USB_HC_StartXfer>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop

08002fc8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 fdd7 	bl	8006b92 <USB_GetMode>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	f040 80f6 	bne.w	80031d8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 fdbb 	bl	8006b6c <USB_ReadInterrupts>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80ec 	beq.w	80031d6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f003 fdb2 	bl	8006b6c <USB_ReadInterrupts>
 8003008:	4603      	mov	r3, r0
 800300a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003012:	d104      	bne.n	800301e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800301c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 fda2 	bl	8006b6c <USB_ReadInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003032:	d104      	bne.n	800303e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800303c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fd92 	bl	8006b6c <USB_ReadInterrupts>
 8003048:	4603      	mov	r3, r0
 800304a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800304e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003052:	d104      	bne.n	800305e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800305c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fd82 	bl	8006b6c <USB_ReadInterrupts>
 8003068:	4603      	mov	r3, r0
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b02      	cmp	r3, #2
 8003070:	d103      	bne.n	800307a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2202      	movs	r2, #2
 8003078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f003 fd74 	bl	8006b6c <USB_ReadInterrupts>
 8003084:	4603      	mov	r3, r0
 8003086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800308a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800308e:	d11c      	bne.n	80030ca <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003098:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80030aa:	2110      	movs	r1, #16
 80030ac:	6938      	ldr	r0, [r7, #16]
 80030ae:	f003 fc63 	bl	8006978 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80030b2:	6938      	ldr	r0, [r7, #16]
 80030b4:	f003 fc94 	bl	80069e0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 fe6a 	bl	8006d98 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f005 fc73 	bl	80089b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fd4c 	bl	8006b6c <USB_ReadInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030de:	d102      	bne.n	80030e6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f001 f882 	bl	80041ea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 fd3e 	bl	8006b6c <USB_ReadInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d106      	bne.n	8003108 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f005 fc3c 	bl	8008978 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2208      	movs	r2, #8
 8003106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f003 fd2d 	bl	8006b6c <USB_ReadInterrupts>
 8003112:	4603      	mov	r3, r0
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b10      	cmp	r3, #16
 800311a:	d101      	bne.n	8003120 <HAL_HCD_IRQHandler+0x158>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_HCD_IRQHandler+0x15a>
 8003120:	2300      	movs	r3, #0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d012      	beq.n	800314c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0210 	bic.w	r2, r2, #16
 8003134:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 ff85 	bl	8004046 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0210 	orr.w	r2, r2, #16
 800314a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fd0b 	bl	8006b6c <USB_ReadInterrupts>
 8003156:	4603      	mov	r3, r0
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003160:	d13a      	bne.n	80031d8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f004 f916 	bl	8007398 <USB_HC_ReadInterrupt>
 800316c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e025      	b.n	80031c0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d018      	beq.n	80031ba <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319e:	d106      	bne.n	80031ae <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	4619      	mov	r1, r3
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f88f 	bl	80032ca <HCD_HC_IN_IRQHandler>
 80031ac:	e005      	b.n	80031ba <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fbdd 	bl	8003974 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3301      	adds	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3d4      	bcc.n	8003174 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d2:	615a      	str	r2, [r3, #20]
 80031d4:	e000      	b.n	80031d8 <HAL_HCD_IRQHandler+0x210>
      return;
 80031d6:	bf00      	nop
    }
  }
}
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_HCD_Start+0x16>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e013      	b.n	800321c <HAL_HCD_Start+0x3e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2101      	movs	r1, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f003 fe02 	bl	8006e0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f003 fb44 	bl	800689a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_HCD_Stop+0x16>
 8003236:	2302      	movs	r3, #2
 8003238:	e00d      	b.n	8003256 <HAL_HCD_Stop+0x32>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f004 f9f0 	bl	800762c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3360      	adds	r3, #96	; 0x60
 8003278:	781b      	ldrb	r3, [r3, #0]
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3350      	adds	r3, #80	; 0x50
 80032a0:	681b      	ldr	r3, [r3, #0]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fdf6 	bl	8006eac <USB_GetCurrentFrame>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d11a      	bne.n	8003330 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4413      	add	r3, r2
 8003302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003306:	461a      	mov	r2, r3
 8003308:	2304      	movs	r3, #4
 800330a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3361      	adds	r3, #97	; 0x61
 800331a:	2206      	movs	r2, #6
 800331c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f004 f846 	bl	80073ba <USB_HC_Halt>
 800332e:	e0af      	b.n	8003490 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003346:	d11b      	bne.n	8003380 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003354:	461a      	mov	r2, r3
 8003356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800335a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3361      	adds	r3, #97	; 0x61
 800336a:	2207      	movs	r2, #7
 800336c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f004 f81e 	bl	80073ba <USB_HC_Halt>
 800337e:	e087      	b.n	8003490 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b20      	cmp	r3, #32
 8003394:	d109      	bne.n	80033aa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a2:	461a      	mov	r2, r3
 80033a4:	2320      	movs	r3, #32
 80033a6:	6093      	str	r3, [r2, #8]
 80033a8:	e072      	b.n	8003490 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d11a      	bne.n	80033f6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	461a      	mov	r2, r3
 80033ce:	2308      	movs	r3, #8
 80033d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	212c      	movs	r1, #44	; 0x2c
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	4413      	add	r3, r2
 80033de:	3361      	adds	r3, #97	; 0x61
 80033e0:	2205      	movs	r2, #5
 80033e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f003 ffe3 	bl	80073ba <USB_HC_Halt>
 80033f4:	e04c      	b.n	8003490 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340c:	d11b      	bne.n	8003446 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	461a      	mov	r2, r3
 800341c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003420:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	212c      	movs	r1, #44	; 0x2c
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	4413      	add	r3, r2
 800342e:	3361      	adds	r3, #97	; 0x61
 8003430:	2208      	movs	r2, #8
 8003432:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f003 ffbb 	bl	80073ba <USB_HC_Halt>
 8003444:	e024      	b.n	8003490 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d119      	bne.n	8003490 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	3361      	adds	r3, #97	; 0x61
 800347c:	2206      	movs	r2, #6
 800347e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f003 ff95 	bl	80073ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a6:	d112      	bne.n	80034ce <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 ff81 	bl	80073ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	461a      	mov	r2, r3
 80034c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80034cc:	e24e      	b.n	800396c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	f040 80df 	bne.w	80036a4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d019      	beq.n	8003522 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	3348      	adds	r3, #72	; 0x48
 80034fc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	0159      	lsls	r1, r3, #5
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	440b      	add	r3, r1
 8003506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003510:	1ad2      	subs	r2, r2, r3
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	202c      	movs	r0, #44	; 0x2c
 8003518:	fb00 f303 	mul.w	r3, r0, r3
 800351c:	440b      	add	r3, r1
 800351e:	3350      	adds	r3, #80	; 0x50
 8003520:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	3361      	adds	r3, #97	; 0x61
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	335c      	adds	r3, #92	; 0x5c
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	461a      	mov	r2, r3
 8003554:	2301      	movs	r3, #1
 8003556:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	333f      	adds	r3, #63	; 0x3f
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d009      	beq.n	8003580 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	212c      	movs	r1, #44	; 0x2c
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	333f      	adds	r3, #63	; 0x3f
 800357a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800357c:	2b02      	cmp	r3, #2
 800357e:	d111      	bne.n	80035a4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f003 ff15 	bl	80073ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	461a      	mov	r2, r3
 800359e:	2310      	movs	r3, #16
 80035a0:	6093      	str	r3, [r2, #8]
 80035a2:	e03a      	b.n	800361a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	333f      	adds	r3, #63	; 0x3f
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d009      	beq.n	80035cc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	333f      	adds	r3, #63	; 0x3f
 80035c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d126      	bne.n	800361a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ea:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	3360      	adds	r3, #96	; 0x60
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	b2d9      	uxtb	r1, r3
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	202c      	movs	r0, #44	; 0x2c
 8003608:	fb00 f303 	mul.w	r3, r0, r3
 800360c:	4413      	add	r3, r2
 800360e:	3360      	adds	r3, #96	; 0x60
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f005 f9d9 	bl	80089cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d12b      	bne.n	800367a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	3348      	adds	r3, #72	; 0x48
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	202c      	movs	r0, #44	; 0x2c
 8003638:	fb00 f202 	mul.w	r2, r0, r2
 800363c:	440a      	add	r2, r1
 800363e:	3240      	adds	r2, #64	; 0x40
 8003640:	8812      	ldrh	r2, [r2, #0]
 8003642:	fbb3 f3f2 	udiv	r3, r3, r2
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 818e 	beq.w	800396c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3354      	adds	r3, #84	; 0x54
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	f083 0301 	eor.w	r3, r3, #1
 8003664:	b2d8      	uxtb	r0, r3
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3354      	adds	r3, #84	; 0x54
 8003674:	4602      	mov	r2, r0
 8003676:	701a      	strb	r2, [r3, #0]
}
 8003678:	e178      	b.n	800396c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	3354      	adds	r3, #84	; 0x54
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	f083 0301 	eor.w	r3, r3, #1
 800368e:	b2d8      	uxtb	r0, r3
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3354      	adds	r3, #84	; 0x54
 800369e:	4602      	mov	r2, r0
 80036a0:	701a      	strb	r2, [r3, #0]
}
 80036a2:	e163      	b.n	800396c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	f040 80f6 	bne.w	80038a8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3361      	adds	r3, #97	; 0x61
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d109      	bne.n	80036e4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3360      	adds	r3, #96	; 0x60
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e0c9      	b.n	8003878 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3361      	adds	r3, #97	; 0x61
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d109      	bne.n	800370c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3360      	adds	r3, #96	; 0x60
 8003706:	2205      	movs	r2, #5
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e0b5      	b.n	8003878 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3361      	adds	r3, #97	; 0x61
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b06      	cmp	r3, #6
 800371e:	d009      	beq.n	8003734 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3361      	adds	r3, #97	; 0x61
 800372e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003730:	2b08      	cmp	r3, #8
 8003732:	d150      	bne.n	80037d6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	335c      	adds	r3, #92	; 0x5c
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	202c      	movs	r0, #44	; 0x2c
 800374c:	fb00 f303 	mul.w	r3, r0, r3
 8003750:	440b      	add	r3, r1
 8003752:	335c      	adds	r3, #92	; 0x5c
 8003754:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	335c      	adds	r3, #92	; 0x5c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d912      	bls.n	8003790 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	212c      	movs	r1, #44	; 0x2c
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	335c      	adds	r3, #92	; 0x5c
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3360      	adds	r3, #96	; 0x60
 800378a:	2204      	movs	r2, #4
 800378c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800378e:	e073      	b.n	8003878 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3360      	adds	r3, #96	; 0x60
 800379e:	2202      	movs	r2, #2
 80037a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037b8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037c0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ce:	461a      	mov	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037d4:	e050      	b.n	8003878 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	212c      	movs	r1, #44	; 0x2c
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	4413      	add	r3, r2
 80037e2:	3361      	adds	r3, #97	; 0x61
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d122      	bne.n	8003830 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	3360      	adds	r3, #96	; 0x60
 80037f8:	2202      	movs	r2, #2
 80037fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003812:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800381a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e023      	b.n	8003878 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3361      	adds	r3, #97	; 0x61
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b07      	cmp	r3, #7
 8003842:	d119      	bne.n	8003878 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	335c      	adds	r3, #92	; 0x5c
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	202c      	movs	r0, #44	; 0x2c
 800385c:	fb00 f303 	mul.w	r3, r0, r3
 8003860:	440b      	add	r3, r1
 8003862:	335c      	adds	r3, #92	; 0x5c
 8003864:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	212c      	movs	r1, #44	; 0x2c
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	4413      	add	r3, r2
 8003872:	3360      	adds	r3, #96	; 0x60
 8003874:	2204      	movs	r2, #4
 8003876:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003884:	461a      	mov	r2, r3
 8003886:	2302      	movs	r3, #2
 8003888:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	b2d9      	uxtb	r1, r3
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	202c      	movs	r0, #44	; 0x2c
 8003894:	fb00 f303 	mul.w	r3, r0, r3
 8003898:	4413      	add	r3, r2
 800389a:	3360      	adds	r3, #96	; 0x60
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f005 f893 	bl	80089cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038a6:	e061      	b.n	800396c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d156      	bne.n	800396c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	333f      	adds	r3, #63	; 0x3f
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d111      	bne.n	80038f6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	335c      	adds	r3, #92	; 0x5c
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f003 fd63 	bl	80073ba <USB_HC_Halt>
 80038f4:	e031      	b.n	800395a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	333f      	adds	r3, #63	; 0x3f
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	333f      	adds	r3, #63	; 0x3f
 8003918:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800391a:	2b02      	cmp	r3, #2
 800391c:	d11d      	bne.n	800395a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	335c      	adds	r3, #92	; 0x5c
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d110      	bne.n	800395a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3361      	adds	r3, #97	; 0x61
 8003946:	2203      	movs	r2, #3
 8003948:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fd30 	bl	80073ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003966:	461a      	mov	r2, r3
 8003968:	2310      	movs	r3, #16
 800396a:	6093      	str	r3, [r2, #8]
}
 800396c:	bf00      	nop
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d11a      	bne.n	80039da <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	461a      	mov	r2, r3
 80039b2:	2304      	movs	r3, #4
 80039b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3361      	adds	r3, #97	; 0x61
 80039c4:	2206      	movs	r2, #6
 80039c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f003 fcf1 	bl	80073ba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80039d8:	e331      	b.n	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d12e      	bne.n	8003a4e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	461a      	mov	r2, r3
 80039fe:	2320      	movs	r3, #32
 8003a00:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	333d      	adds	r3, #61	; 0x3d
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	f040 8313 	bne.w	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	333d      	adds	r3, #61	; 0x3d
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	212c      	movs	r1, #44	; 0x2c
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	4413      	add	r3, r2
 8003a36:	3360      	adds	r3, #96	; 0x60
 8003a38:	2202      	movs	r2, #2
 8003a3a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 fcb7 	bl	80073ba <USB_HC_Halt>
}
 8003a4c:	e2f7      	b.n	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a64:	d112      	bne.n	8003a8c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a72:	461a      	mov	r2, r3
 8003a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a78:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f003 fc98 	bl	80073ba <USB_HC_Halt>
}
 8003a8a:	e2d8      	b.n	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d140      	bne.n	8003b24 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	335c      	adds	r3, #92	; 0x5c
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d111      	bne.n	8003aee <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	212c      	movs	r1, #44	; 0x2c
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	333d      	adds	r3, #61	; 0x3d
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2340      	movs	r3, #64	; 0x40
 8003aec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afa:	461a      	mov	r2, r3
 8003afc:	2301      	movs	r3, #1
 8003afe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3361      	adds	r3, #97	; 0x61
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f003 fc4c 	bl	80073ba <USB_HC_Halt>
}
 8003b22:	e28c      	b.n	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d12c      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	212c      	movs	r1, #44	; 0x2c
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	3361      	adds	r3, #97	; 0x61
 8003b48:	2204      	movs	r2, #4
 8003b4a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	333d      	adds	r3, #61	; 0x3d
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	335c      	adds	r3, #92	; 0x5c
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 fc1d 	bl	80073ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2340      	movs	r3, #64	; 0x40
 8003b90:	6093      	str	r3, [r2, #8]
}
 8003b92:	e254      	b.n	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d11a      	bne.n	8003be0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2308      	movs	r3, #8
 8003bba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	212c      	movs	r1, #44	; 0x2c
 8003bc2:	fb01 f303 	mul.w	r3, r1, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3361      	adds	r3, #97	; 0x61
 8003bca:	2205      	movs	r2, #5
 8003bcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f003 fbee 	bl	80073ba <USB_HC_Halt>
}
 8003bde:	e22e      	b.n	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d140      	bne.n	8003c78 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	335c      	adds	r3, #92	; 0x5c
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3361      	adds	r3, #97	; 0x61
 8003c16:	2203      	movs	r2, #3
 8003c18:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	212c      	movs	r1, #44	; 0x2c
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	333d      	adds	r3, #61	; 0x3d
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d112      	bne.n	8003c54 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	333c      	adds	r3, #60	; 0x3c
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	212c      	movs	r1, #44	; 0x2c
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	333d      	adds	r3, #61	; 0x3d
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f003 fbab 	bl	80073ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c70:	461a      	mov	r2, r3
 8003c72:	2310      	movs	r3, #16
 8003c74:	6093      	str	r3, [r2, #8]
}
 8003c76:	e1e2      	b.n	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b80      	cmp	r3, #128	; 0x80
 8003c8c:	d164      	bne.n	8003d58 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d111      	bne.n	8003cba <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3361      	adds	r3, #97	; 0x61
 8003ca4:	2206      	movs	r2, #6
 8003ca6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f003 fb81 	bl	80073ba <USB_HC_Halt>
 8003cb8:	e044      	b.n	8003d44 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	335c      	adds	r3, #92	; 0x5c
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	202c      	movs	r0, #44	; 0x2c
 8003cd2:	fb00 f303 	mul.w	r3, r0, r3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	335c      	adds	r3, #92	; 0x5c
 8003cda:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	212c      	movs	r1, #44	; 0x2c
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	335c      	adds	r3, #92	; 0x5c
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d920      	bls.n	8003d32 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	212c      	movs	r1, #44	; 0x2c
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	335c      	adds	r3, #92	; 0x5c
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	212c      	movs	r1, #44	; 0x2c
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3360      	adds	r3, #96	; 0x60
 8003d10:	2204      	movs	r2, #4
 8003d12:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	b2d9      	uxtb	r1, r3
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	202c      	movs	r0, #44	; 0x2c
 8003d1e:	fb00 f303 	mul.w	r3, r0, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	3360      	adds	r3, #96	; 0x60
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f004 fe4e 	bl	80089cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d30:	e008      	b.n	8003d44 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3360      	adds	r3, #96	; 0x60
 8003d40:	2202      	movs	r2, #2
 8003d42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d50:	461a      	mov	r2, r3
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	6093      	str	r3, [r2, #8]
}
 8003d56:	e172      	b.n	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6e:	d11b      	bne.n	8003da8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3361      	adds	r3, #97	; 0x61
 8003d7e:	2208      	movs	r2, #8
 8003d80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f003 fb14 	bl	80073ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da4:	6093      	str	r3, [r2, #8]
}
 8003da6:	e14a      	b.n	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	f040 813f 	bne.w	800403e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	3361      	adds	r3, #97	; 0x61
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d17d      	bne.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3360      	adds	r3, #96	; 0x60
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	212c      	movs	r1, #44	; 0x2c
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	333f      	adds	r3, #63	; 0x3f
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d00a      	beq.n	8003e10 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	212c      	movs	r1, #44	; 0x2c
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	333f      	adds	r3, #63	; 0x3f
 8003e08:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	f040 8100 	bne.w	8004010 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d113      	bne.n	8003e40 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3355      	adds	r3, #85	; 0x55
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f083 0301 	eor.w	r3, r3, #1
 8003e2c:	b2d8      	uxtb	r0, r3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	212c      	movs	r1, #44	; 0x2c
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3355      	adds	r3, #85	; 0x55
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	f040 80e3 	bne.w	8004010 <HCD_HC_OUT_IRQHandler+0x69c>
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	334c      	adds	r3, #76	; 0x4c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80d8 	beq.w	8004010 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	334c      	adds	r3, #76	; 0x4c
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	202c      	movs	r0, #44	; 0x2c
 8003e76:	fb00 f202 	mul.w	r2, r0, r2
 8003e7a:	440a      	add	r2, r1
 8003e7c:	3240      	adds	r2, #64	; 0x40
 8003e7e:	8812      	ldrh	r2, [r2, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	3b01      	subs	r3, #1
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	202c      	movs	r0, #44	; 0x2c
 8003e8a:	fb00 f202 	mul.w	r2, r0, r2
 8003e8e:	440a      	add	r2, r1
 8003e90:	3240      	adds	r2, #64	; 0x40
 8003e92:	8812      	ldrh	r2, [r2, #0]
 8003e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80b5 	beq.w	8004010 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	212c      	movs	r1, #44	; 0x2c
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3355      	adds	r3, #85	; 0x55
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	f083 0301 	eor.w	r3, r3, #1
 8003eba:	b2d8      	uxtb	r0, r3
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3355      	adds	r3, #85	; 0x55
 8003eca:	4602      	mov	r2, r0
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e09f      	b.n	8004010 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	212c      	movs	r1, #44	; 0x2c
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	3361      	adds	r3, #97	; 0x61
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d109      	bne.n	8003ef8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	212c      	movs	r1, #44	; 0x2c
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	4413      	add	r3, r2
 8003ef0:	3360      	adds	r3, #96	; 0x60
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e08b      	b.n	8004010 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3361      	adds	r3, #97	; 0x61
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d109      	bne.n	8003f20 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3360      	adds	r3, #96	; 0x60
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e077      	b.n	8004010 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	212c      	movs	r1, #44	; 0x2c
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3361      	adds	r3, #97	; 0x61
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b05      	cmp	r3, #5
 8003f32:	d109      	bne.n	8003f48 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	212c      	movs	r1, #44	; 0x2c
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	3360      	adds	r3, #96	; 0x60
 8003f42:	2205      	movs	r2, #5
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e063      	b.n	8004010 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	3361      	adds	r3, #97	; 0x61
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b06      	cmp	r3, #6
 8003f5a:	d009      	beq.n	8003f70 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	3361      	adds	r3, #97	; 0x61
 8003f6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d14f      	bne.n	8004010 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	335c      	adds	r3, #92	; 0x5c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	202c      	movs	r0, #44	; 0x2c
 8003f88:	fb00 f303 	mul.w	r3, r0, r3
 8003f8c:	440b      	add	r3, r1
 8003f8e:	335c      	adds	r3, #92	; 0x5c
 8003f90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	335c      	adds	r3, #92	; 0x5c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d912      	bls.n	8003fcc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	212c      	movs	r1, #44	; 0x2c
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	335c      	adds	r3, #92	; 0x5c
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	212c      	movs	r1, #44	; 0x2c
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3360      	adds	r3, #96	; 0x60
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e021      	b.n	8004010 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	212c      	movs	r1, #44	; 0x2c
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3360      	adds	r3, #96	; 0x60
 8003fda:	2202      	movs	r2, #2
 8003fdc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ff4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ffc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	461a      	mov	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	4413      	add	r3, r2
 8004018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401c:	461a      	mov	r2, r3
 800401e:	2302      	movs	r3, #2
 8004020:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	b2d9      	uxtb	r1, r3
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	202c      	movs	r0, #44	; 0x2c
 800402c:	fb00 f303 	mul.w	r3, r0, r3
 8004030:	4413      	add	r3, r2
 8004032:	3360      	adds	r3, #96	; 0x60
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f004 fcc7 	bl	80089cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800403e:	bf00      	nop
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b08a      	sub	sp, #40	; 0x28
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	0c5b      	lsrs	r3, r3, #17
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800407a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d004      	beq.n	800408c <HCD_RXQLVL_IRQHandler+0x46>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b05      	cmp	r3, #5
 8004086:	f000 80a9 	beq.w	80041dc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800408a:	e0aa      	b.n	80041e2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80a6 	beq.w	80041e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3344      	adds	r3, #68	; 0x44
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 809b 	beq.w	80041e0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	212c      	movs	r1, #44	; 0x2c
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	3350      	adds	r3, #80	; 0x50
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	441a      	add	r2, r3
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	202c      	movs	r0, #44	; 0x2c
 80040c4:	fb00 f303 	mul.w	r3, r0, r3
 80040c8:	440b      	add	r3, r1
 80040ca:	334c      	adds	r3, #76	; 0x4c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d87a      	bhi.n	80041c8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3344      	adds	r3, #68	; 0x44
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	b292      	uxth	r2, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	f002 fce6 	bl	8006abc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	212c      	movs	r1, #44	; 0x2c
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	3344      	adds	r3, #68	; 0x44
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	441a      	add	r2, r3
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	202c      	movs	r0, #44	; 0x2c
 800410a:	fb00 f303 	mul.w	r3, r0, r3
 800410e:	440b      	add	r3, r1
 8004110:	3344      	adds	r3, #68	; 0x44
 8004112:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	3350      	adds	r3, #80	; 0x50
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	441a      	add	r2, r3
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	202c      	movs	r0, #44	; 0x2c
 800412e:	fb00 f303 	mul.w	r3, r0, r3
 8004132:	440b      	add	r3, r1
 8004134:	3350      	adds	r3, #80	; 0x50
 8004136:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	0cdb      	lsrs	r3, r3, #19
 8004148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800414c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	3340      	adds	r3, #64	; 0x40
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4293      	cmp	r3, r2
 8004164:	d13c      	bne.n	80041e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d039      	beq.n	80041e0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004182:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800418a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004198:	461a      	mov	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3354      	adds	r3, #84	; 0x54
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	f083 0301 	eor.w	r3, r3, #1
 80041b2:	b2d8      	uxtb	r0, r3
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	212c      	movs	r1, #44	; 0x2c
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	4413      	add	r3, r2
 80041c0:	3354      	adds	r3, #84	; 0x54
 80041c2:	4602      	mov	r2, r0
 80041c4:	701a      	strb	r2, [r3, #0]
      break;
 80041c6:	e00b      	b.n	80041e0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	212c      	movs	r1, #44	; 0x2c
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	3360      	adds	r3, #96	; 0x60
 80041d6:	2204      	movs	r2, #4
 80041d8:	701a      	strb	r2, [r3, #0]
      break;
 80041da:	e001      	b.n	80041e0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80041dc:	bf00      	nop
 80041de:	e000      	b.n	80041e2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80041e0:	bf00      	nop
  }
}
 80041e2:	bf00      	nop
 80041e4:	3728      	adds	r7, #40	; 0x28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004216:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b02      	cmp	r3, #2
 8004220:	d10b      	bne.n	800423a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d102      	bne.n	8004232 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f004 fbb1 	bl	8008994 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f043 0302 	orr.w	r3, r3, #2
 8004238:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b08      	cmp	r3, #8
 8004242:	d132      	bne.n	80042aa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f043 0308 	orr.w	r3, r3, #8
 800424a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d126      	bne.n	80042a4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d113      	bne.n	8004286 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004268:	d106      	bne.n	8004278 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f002 fd91 	bl	8006d98 <USB_InitFSLSPClkSel>
 8004276:	e011      	b.n	800429c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2101      	movs	r1, #1
 800427e:	4618      	mov	r0, r3
 8004280:	f002 fd8a 	bl	8006d98 <USB_InitFSLSPClkSel>
 8004284:	e00a      	b.n	800429c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d106      	bne.n	800429c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004294:	461a      	mov	r2, r3
 8004296:	f64e 2360 	movw	r3, #60000	; 0xea60
 800429a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f004 fba3 	bl	80089e8 <HAL_HCD_PortEnabled_Callback>
 80042a2:	e002      	b.n	80042aa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f004 fbad 	bl	8008a04 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d103      	bne.n	80042bc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f043 0320 	orr.w	r3, r3, #32
 80042ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042c2:	461a      	mov	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	6013      	str	r3, [r2, #0]
}
 80042c8:	bf00      	nop
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e12b      	b.n	800453a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fd f9fc 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2224      	movs	r2, #36	; 0x24
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004334:	f001 fa20 	bl	8005778 <HAL_RCC_GetPCLK1Freq>
 8004338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4a81      	ldr	r2, [pc, #516]	; (8004544 <HAL_I2C_Init+0x274>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d807      	bhi.n	8004354 <HAL_I2C_Init+0x84>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a80      	ldr	r2, [pc, #512]	; (8004548 <HAL_I2C_Init+0x278>)
 8004348:	4293      	cmp	r3, r2
 800434a:	bf94      	ite	ls
 800434c:	2301      	movls	r3, #1
 800434e:	2300      	movhi	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e006      	b.n	8004362 <HAL_I2C_Init+0x92>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a7d      	ldr	r2, [pc, #500]	; (800454c <HAL_I2C_Init+0x27c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	bf94      	ite	ls
 800435c:	2301      	movls	r3, #1
 800435e:	2300      	movhi	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e0e7      	b.n	800453a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a78      	ldr	r2, [pc, #480]	; (8004550 <HAL_I2C_Init+0x280>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	0c9b      	lsrs	r3, r3, #18
 8004374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a6a      	ldr	r2, [pc, #424]	; (8004544 <HAL_I2C_Init+0x274>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d802      	bhi.n	80043a4 <HAL_I2C_Init+0xd4>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3301      	adds	r3, #1
 80043a2:	e009      	b.n	80043b8 <HAL_I2C_Init+0xe8>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	4a69      	ldr	r2, [pc, #420]	; (8004554 <HAL_I2C_Init+0x284>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	099b      	lsrs	r3, r3, #6
 80043b6:	3301      	adds	r3, #1
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	430b      	orrs	r3, r1
 80043be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	495c      	ldr	r1, [pc, #368]	; (8004544 <HAL_I2C_Init+0x274>)
 80043d4:	428b      	cmp	r3, r1
 80043d6:	d819      	bhi.n	800440c <HAL_I2C_Init+0x13c>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1e59      	subs	r1, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e6:	1c59      	adds	r1, r3, #1
 80043e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043ec:	400b      	ands	r3, r1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_I2C_Init+0x138>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1e59      	subs	r1, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004406:	e051      	b.n	80044ac <HAL_I2C_Init+0x1dc>
 8004408:	2304      	movs	r3, #4
 800440a:	e04f      	b.n	80044ac <HAL_I2C_Init+0x1dc>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d111      	bne.n	8004438 <HAL_I2C_Init+0x168>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1e58      	subs	r0, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6859      	ldr	r1, [r3, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	440b      	add	r3, r1
 8004422:	fbb0 f3f3 	udiv	r3, r0, r3
 8004426:	3301      	adds	r3, #1
 8004428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e012      	b.n	800445e <HAL_I2C_Init+0x18e>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1e58      	subs	r0, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6859      	ldr	r1, [r3, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	0099      	lsls	r1, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	fbb0 f3f3 	udiv	r3, r0, r3
 800444e:	3301      	adds	r3, #1
 8004450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004454:	2b00      	cmp	r3, #0
 8004456:	bf0c      	ite	eq
 8004458:	2301      	moveq	r3, #1
 800445a:	2300      	movne	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_Init+0x196>
 8004462:	2301      	movs	r3, #1
 8004464:	e022      	b.n	80044ac <HAL_I2C_Init+0x1dc>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10e      	bne.n	800448c <HAL_I2C_Init+0x1bc>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1e58      	subs	r0, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6859      	ldr	r1, [r3, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	440b      	add	r3, r1
 800447c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004480:	3301      	adds	r3, #1
 8004482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448a:	e00f      	b.n	80044ac <HAL_I2C_Init+0x1dc>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1e58      	subs	r0, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	0099      	lsls	r1, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	6809      	ldr	r1, [r1, #0]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6911      	ldr	r1, [r2, #16]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68d2      	ldr	r2, [r2, #12]
 80044e6:	4311      	orrs	r1, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	000186a0 	.word	0x000186a0
 8004548:	001e847f 	.word	0x001e847f
 800454c:	003d08ff 	.word	0x003d08ff
 8004550:	431bde83 	.word	0x431bde83
 8004554:	10624dd3 	.word	0x10624dd3

08004558 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e128      	b.n	80047bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a90      	ldr	r2, [pc, #576]	; (80047c4 <HAL_I2S_Init+0x26c>)
 8004582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fd f8fd 	bl	8001784 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80045a0:	f023 030f 	bic.w	r3, r3, #15
 80045a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2202      	movs	r2, #2
 80045ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d060      	beq.n	8004678 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80045be:	2310      	movs	r3, #16
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	e001      	b.n	80045c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80045c4:	2320      	movs	r3, #32
 80045c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d802      	bhi.n	80045d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80045d6:	2001      	movs	r0, #1
 80045d8:	f001 f9c4 	bl	8005964 <HAL_RCCEx_GetPeriphCLKFreq>
 80045dc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e6:	d125      	bne.n	8004634 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d010      	beq.n	8004612 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	461a      	mov	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	3305      	adds	r3, #5
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	e01f      	b.n	8004652 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	fbb2 f2f3 	udiv	r2, r2, r3
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	461a      	mov	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	fbb2 f3f3 	udiv	r3, r2, r3
 800462e:	3305      	adds	r3, #5
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	e00e      	b.n	8004652 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	fbb2 f2f3 	udiv	r2, r2, r3
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	461a      	mov	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	3305      	adds	r3, #5
 8004650:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4a5c      	ldr	r2, [pc, #368]	; (80047c8 <HAL_I2S_Init+0x270>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	08db      	lsrs	r3, r3, #3
 800465c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e003      	b.n	8004680 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004678:	2302      	movs	r3, #2
 800467a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d902      	bls.n	800468c <HAL_I2S_Init+0x134>
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	2bff      	cmp	r3, #255	; 0xff
 800468a:	d907      	bls.n	800469c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	f043 0210 	orr.w	r2, r3, #16
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e08f      	b.n	80047bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	ea42 0103 	orr.w	r1, r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80046ba:	f023 030f 	bic.w	r3, r3, #15
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6851      	ldr	r1, [r2, #4]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6892      	ldr	r2, [r2, #8]
 80046c6:	4311      	orrs	r1, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68d2      	ldr	r2, [r2, #12]
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6992      	ldr	r2, [r2, #24]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d161      	bne.n	80047ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a38      	ldr	r2, [pc, #224]	; (80047cc <HAL_I2S_Init+0x274>)
 80046ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a37      	ldr	r2, [pc, #220]	; (80047d0 <HAL_I2S_Init+0x278>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <HAL_I2S_Init+0x1a4>
 80046f8:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <HAL_I2S_Init+0x27c>)
 80046fa:	e001      	b.n	8004700 <HAL_I2S_Init+0x1a8>
 80046fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	4932      	ldr	r1, [pc, #200]	; (80047d0 <HAL_I2S_Init+0x278>)
 8004708:	428a      	cmp	r2, r1
 800470a:	d101      	bne.n	8004710 <HAL_I2S_Init+0x1b8>
 800470c:	4a31      	ldr	r2, [pc, #196]	; (80047d4 <HAL_I2S_Init+0x27c>)
 800470e:	e001      	b.n	8004714 <HAL_I2S_Init+0x1bc>
 8004710:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004714:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004718:	f023 030f 	bic.w	r3, r3, #15
 800471c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2b      	ldr	r2, [pc, #172]	; (80047d0 <HAL_I2S_Init+0x278>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_I2S_Init+0x1d4>
 8004728:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_I2S_Init+0x27c>)
 800472a:	e001      	b.n	8004730 <HAL_I2S_Init+0x1d8>
 800472c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004730:	2202      	movs	r2, #2
 8004732:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <HAL_I2S_Init+0x278>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <HAL_I2S_Init+0x1ea>
 800473e:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <HAL_I2S_Init+0x27c>)
 8004740:	e001      	b.n	8004746 <HAL_I2S_Init+0x1ee>
 8004742:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004752:	d003      	beq.n	800475c <HAL_I2S_Init+0x204>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d103      	bne.n	8004764 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800475c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	e001      	b.n	8004768 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004772:	4313      	orrs	r3, r2
 8004774:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800477c:	4313      	orrs	r3, r2
 800477e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004786:	4313      	orrs	r3, r2
 8004788:	b29a      	uxth	r2, r3
 800478a:	897b      	ldrh	r3, [r7, #10]
 800478c:	4313      	orrs	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004794:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <HAL_I2S_Init+0x278>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d101      	bne.n	80047a4 <HAL_I2S_Init+0x24c>
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <HAL_I2S_Init+0x27c>)
 80047a2:	e001      	b.n	80047a8 <HAL_I2S_Init+0x250>
 80047a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047a8:	897a      	ldrh	r2, [r7, #10]
 80047aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	080048cf 	.word	0x080048cf
 80047c8:	cccccccd 	.word	0xcccccccd
 80047cc:	080049e5 	.word	0x080049e5
 80047d0:	40003800 	.word	0x40003800
 80047d4:	40003400 	.word	0x40003400

080047d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	881a      	ldrh	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	1c9a      	adds	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10e      	bne.n	8004868 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004858:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff ffb8 	bl	80047d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	b292      	uxth	r2, r2
 8004884:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	1c9a      	adds	r2, r3, #2
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10e      	bne.n	80048c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff93 	bl	80047ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b086      	sub	sp, #24
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d13a      	bne.n	8004960 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d109      	bne.n	8004908 <I2S_IRQHandler+0x3a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fe:	2b40      	cmp	r3, #64	; 0x40
 8004900:	d102      	bne.n	8004908 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff ffb4 	bl	8004870 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d126      	bne.n	8004960 <I2S_IRQHandler+0x92>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b20      	cmp	r3, #32
 800491e:	d11f      	bne.n	8004960 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800492e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f043 0202 	orr.w	r2, r3, #2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ff50 	bl	8004800 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b03      	cmp	r3, #3
 800496a:	d136      	bne.n	80049da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b02      	cmp	r3, #2
 8004974:	d109      	bne.n	800498a <I2S_IRQHandler+0xbc>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004980:	2b80      	cmp	r3, #128	; 0x80
 8004982:	d102      	bne.n	800498a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ff45 	bl	8004814 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b08      	cmp	r3, #8
 8004992:	d122      	bne.n	80049da <I2S_IRQHandler+0x10c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d11b      	bne.n	80049da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049cc:	f043 0204 	orr.w	r2, r3, #4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ff13 	bl	8004800 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a92      	ldr	r2, [pc, #584]	; (8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80049fe:	4b92      	ldr	r3, [pc, #584]	; (8004c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a00:	e001      	b.n	8004a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004a02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a8b      	ldr	r2, [pc, #556]	; (8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d101      	bne.n	8004a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004a1c:	4b8a      	ldr	r3, [pc, #552]	; (8004c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a1e:	e001      	b.n	8004a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a30:	d004      	beq.n	8004a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 8099 	bne.w	8004b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d107      	bne.n	8004a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f925 	bl	8004ca0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d107      	bne.n	8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9c8 	bl	8004e00 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d13a      	bne.n	8004af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d035      	beq.n	8004af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a6e      	ldr	r2, [pc, #440]	; (8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d101      	bne.n	8004a92 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004a8e:	4b6e      	ldr	r3, [pc, #440]	; (8004c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a90:	e001      	b.n	8004a96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004a92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4969      	ldr	r1, [pc, #420]	; (8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a9e:	428b      	cmp	r3, r1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004aa2:	4b69      	ldr	r3, [pc, #420]	; (8004c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa4:	e001      	b.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004aae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004abe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	f043 0202 	orr.w	r2, r3, #2
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fe88 	bl	8004800 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	f040 80c3 	bne.w	8004c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80bd 	beq.w	8004c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a49      	ldr	r2, [pc, #292]	; (8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004b22:	4b49      	ldr	r3, [pc, #292]	; (8004c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b24:	e001      	b.n	8004b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4944      	ldr	r1, [pc, #272]	; (8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b32:	428b      	cmp	r3, r1
 8004b34:	d101      	bne.n	8004b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004b36:	4b44      	ldr	r3, [pc, #272]	; (8004c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b38:	e001      	b.n	8004b3e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004b3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b42:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b44:	2300      	movs	r3, #0
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	f043 0204 	orr.w	r2, r3, #4
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fe4a 	bl	8004800 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b6c:	e089      	b.n	8004c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d107      	bne.n	8004b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f8be 	bl	8004d04 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d107      	bne.n	8004ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f8fd 	bl	8004d9c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d12f      	bne.n	8004c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d02a      	beq.n	8004c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bc4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a1e      	ldr	r2, [pc, #120]	; (8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004bd0:	4b1d      	ldr	r3, [pc, #116]	; (8004c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bd2:	e001      	b.n	8004bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4919      	ldr	r1, [pc, #100]	; (8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004be0:	428b      	cmp	r3, r1
 8004be2:	d101      	bne.n	8004be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004be6:	e001      	b.n	8004bec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bf0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f043 0202 	orr.w	r2, r3, #2
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fdfa 	bl	8004800 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d136      	bne.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d031      	beq.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004c2a:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c2c:	e001      	b.n	8004c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4902      	ldr	r1, [pc, #8]	; (8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c3a:	428b      	cmp	r3, r1
 8004c3c:	d106      	bne.n	8004c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004c3e:	4b02      	ldr	r3, [pc, #8]	; (8004c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c40:	e006      	b.n	8004c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004c42:	bf00      	nop
 8004c44:	40003800 	.word	0x40003800
 8004c48:	40003400 	.word	0x40003400
 8004c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c54:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	f043 0204 	orr.w	r2, r3, #4
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fdc0 	bl	8004800 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c80:	e000      	b.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c82:	bf00      	nop
}
 8004c84:	bf00      	nop
 8004c86:	3720      	adds	r7, #32
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	1c99      	adds	r1, r3, #2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6251      	str	r1, [r2, #36]	; 0x24
 8004cb2:	881a      	ldrh	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d113      	bne.n	8004cfa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ce0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ffc9 	bl	8004c8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	1c99      	adds	r1, r3, #2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6251      	str	r1, [r2, #36]	; 0x24
 8004d16:	8819      	ldrh	r1, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <I2SEx_TxISR_I2SExt+0x90>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <I2SEx_TxISR_I2SExt+0x22>
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <I2SEx_TxISR_I2SExt+0x94>)
 8004d24:	e001      	b.n	8004d2a <I2SEx_TxISR_I2SExt+0x26>
 8004d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d121      	bne.n	8004d8a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <I2SEx_TxISR_I2SExt+0x90>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <I2SEx_TxISR_I2SExt+0x50>
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <I2SEx_TxISR_I2SExt+0x94>)
 8004d52:	e001      	b.n	8004d58 <I2SEx_TxISR_I2SExt+0x54>
 8004d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	490d      	ldr	r1, [pc, #52]	; (8004d94 <I2SEx_TxISR_I2SExt+0x90>)
 8004d60:	428b      	cmp	r3, r1
 8004d62:	d101      	bne.n	8004d68 <I2SEx_TxISR_I2SExt+0x64>
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <I2SEx_TxISR_I2SExt+0x94>)
 8004d66:	e001      	b.n	8004d6c <I2SEx_TxISR_I2SExt+0x68>
 8004d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ff81 	bl	8004c8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40003800 	.word	0x40003800
 8004d98:	40003400 	.word	0x40003400

08004d9c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68d8      	ldr	r0, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	1c99      	adds	r1, r3, #2
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004db4:	b282      	uxth	r2, r0
 8004db6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d113      	bne.n	8004df8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dde:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff ff4a 	bl	8004c8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <I2SEx_RxISR_I2SExt+0x90>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d101      	bne.n	8004e16 <I2SEx_RxISR_I2SExt+0x16>
 8004e12:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <I2SEx_RxISR_I2SExt+0x94>)
 8004e14:	e001      	b.n	8004e1a <I2SEx_RxISR_I2SExt+0x1a>
 8004e16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e1a:	68d8      	ldr	r0, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	1c99      	adds	r1, r3, #2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e26:	b282      	uxth	r2, r0
 8004e28:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d121      	bne.n	8004e86 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <I2SEx_RxISR_I2SExt+0x90>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d101      	bne.n	8004e50 <I2SEx_RxISR_I2SExt+0x50>
 8004e4c:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <I2SEx_RxISR_I2SExt+0x94>)
 8004e4e:	e001      	b.n	8004e54 <I2SEx_RxISR_I2SExt+0x54>
 8004e50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	490d      	ldr	r1, [pc, #52]	; (8004e90 <I2SEx_RxISR_I2SExt+0x90>)
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	d101      	bne.n	8004e64 <I2SEx_RxISR_I2SExt+0x64>
 8004e60:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <I2SEx_RxISR_I2SExt+0x94>)
 8004e62:	e001      	b.n	8004e68 <I2SEx_RxISR_I2SExt+0x68>
 8004e64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e6c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff03 	bl	8004c8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40003800 	.word	0x40003800
 8004e94:	40003400 	.word	0x40003400

08004e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e267      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d075      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eb6:	4b88      	ldr	r3, [pc, #544]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d00c      	beq.n	8004edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec2:	4b85      	ldr	r3, [pc, #532]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d112      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ece:	4b82      	ldr	r3, [pc, #520]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eda:	d10b      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	4b7e      	ldr	r3, [pc, #504]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d05b      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x108>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d157      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e242      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d106      	bne.n	8004f0c <HAL_RCC_OscConfig+0x74>
 8004efe:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a75      	ldr	r2, [pc, #468]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e01d      	b.n	8004f48 <HAL_RCC_OscConfig+0xb0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x98>
 8004f16:	4b70      	ldr	r3, [pc, #448]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a6f      	ldr	r2, [pc, #444]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b6d      	ldr	r3, [pc, #436]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a6c      	ldr	r2, [pc, #432]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCC_OscConfig+0xb0>
 8004f30:	4b69      	ldr	r3, [pc, #420]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a68      	ldr	r2, [pc, #416]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b66      	ldr	r3, [pc, #408]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a65      	ldr	r2, [pc, #404]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d013      	beq.n	8004f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fc fed8 	bl	8001d04 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fc fed4 	bl	8001d04 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	; 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e207      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0xc0>
 8004f76:	e014      	b.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f78:	f7fc fec4 	bl	8001d04 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f80:	f7fc fec0 	bl	8001d04 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e1f3      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f92:	4b51      	ldr	r3, [pc, #324]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0xe8>
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d063      	beq.n	8005076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fae:	4b4a      	ldr	r3, [pc, #296]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b47      	ldr	r3, [pc, #284]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d11c      	bne.n	8005000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fc6:	4b44      	ldr	r3, [pc, #272]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d116      	bne.n	8005000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd2:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_RCC_OscConfig+0x152>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d001      	beq.n	8004fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e1c7      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fea:	4b3b      	ldr	r3, [pc, #236]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4937      	ldr	r1, [pc, #220]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	e03a      	b.n	8005076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d020      	beq.n	800504a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005008:	4b34      	ldr	r3, [pc, #208]	; (80050dc <HAL_RCC_OscConfig+0x244>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fc fe79 	bl	8001d04 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005016:	f7fc fe75 	bl	8001d04 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e1a8      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005028:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005034:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4925      	ldr	r1, [pc, #148]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]
 8005048:	e015      	b.n	8005076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <HAL_RCC_OscConfig+0x244>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fc fe58 	bl	8001d04 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005058:	f7fc fe54 	bl	8001d04 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e187      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506a:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d036      	beq.n	80050f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_RCC_OscConfig+0x248>)
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fc fe38 	bl	8001d04 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005098:	f7fc fe34 	bl	8001d04 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e167      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050aa:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_OscConfig+0x240>)
 80050ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x200>
 80050b6:	e01b      	b.n	80050f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <HAL_RCC_OscConfig+0x248>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050be:	f7fc fe21 	bl	8001d04 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c4:	e00e      	b.n	80050e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c6:	f7fc fe1d 	bl	8001d04 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d907      	bls.n	80050e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e150      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
 80050d8:	40023800 	.word	0x40023800
 80050dc:	42470000 	.word	0x42470000
 80050e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e4:	4b88      	ldr	r3, [pc, #544]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80050e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1ea      	bne.n	80050c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8097 	beq.w	800522c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005102:	4b81      	ldr	r3, [pc, #516]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10f      	bne.n	800512e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	4b7d      	ldr	r3, [pc, #500]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	4a7c      	ldr	r2, [pc, #496]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511c:	6413      	str	r3, [r2, #64]	; 0x40
 800511e:	4b7a      	ldr	r3, [pc, #488]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512e:	4b77      	ldr	r3, [pc, #476]	; (800530c <HAL_RCC_OscConfig+0x474>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d118      	bne.n	800516c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513a:	4b74      	ldr	r3, [pc, #464]	; (800530c <HAL_RCC_OscConfig+0x474>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a73      	ldr	r2, [pc, #460]	; (800530c <HAL_RCC_OscConfig+0x474>)
 8005140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005146:	f7fc fddd 	bl	8001d04 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514e:	f7fc fdd9 	bl	8001d04 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e10c      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005160:	4b6a      	ldr	r3, [pc, #424]	; (800530c <HAL_RCC_OscConfig+0x474>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d106      	bne.n	8005182 <HAL_RCC_OscConfig+0x2ea>
 8005174:	4b64      	ldr	r3, [pc, #400]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a63      	ldr	r2, [pc, #396]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
 8005180:	e01c      	b.n	80051bc <HAL_RCC_OscConfig+0x324>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b05      	cmp	r3, #5
 8005188:	d10c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x30c>
 800518a:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a5e      	ldr	r2, [pc, #376]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005190:	f043 0304 	orr.w	r3, r3, #4
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	4b5c      	ldr	r3, [pc, #368]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	4a5b      	ldr	r2, [pc, #364]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	6713      	str	r3, [r2, #112]	; 0x70
 80051a2:	e00b      	b.n	80051bc <HAL_RCC_OscConfig+0x324>
 80051a4:	4b58      	ldr	r3, [pc, #352]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	4a57      	ldr	r2, [pc, #348]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	6713      	str	r3, [r2, #112]	; 0x70
 80051b0:	4b55      	ldr	r3, [pc, #340]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	4a54      	ldr	r2, [pc, #336]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80051b6:	f023 0304 	bic.w	r3, r3, #4
 80051ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fc fd9e 	bl	8001d04 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051cc:	f7fc fd9a 	bl	8001d04 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e0cb      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e2:	4b49      	ldr	r3, [pc, #292]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0ee      	beq.n	80051cc <HAL_RCC_OscConfig+0x334>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f0:	f7fc fd88 	bl	8001d04 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f6:	e00a      	b.n	800520e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f8:	f7fc fd84 	bl	8001d04 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	; 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0b5      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520e:	4b3e      	ldr	r3, [pc, #248]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1ee      	bne.n	80051f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d105      	bne.n	800522c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005220:	4b39      	ldr	r3, [pc, #228]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	4a38      	ldr	r2, [pc, #224]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800522a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80a1 	beq.w	8005378 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005236:	4b34      	ldr	r3, [pc, #208]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b08      	cmp	r3, #8
 8005240:	d05c      	beq.n	80052fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d141      	bne.n	80052ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524a:	4b31      	ldr	r3, [pc, #196]	; (8005310 <HAL_RCC_OscConfig+0x478>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7fc fd58 	bl	8001d04 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005258:	f7fc fd54 	bl	8001d04 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e087      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526a:	4b27      	ldr	r3, [pc, #156]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69da      	ldr	r2, [r3, #28]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	019b      	lsls	r3, r3, #6
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	085b      	lsrs	r3, r3, #1
 800528e:	3b01      	subs	r3, #1
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	061b      	lsls	r3, r3, #24
 800529a:	491b      	ldr	r1, [pc, #108]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <HAL_RCC_OscConfig+0x478>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a6:	f7fc fd2d 	bl	8001d04 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ae:	f7fc fd29 	bl	8001d04 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e05c      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x416>
 80052cc:	e054      	b.n	8005378 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ce:	4b10      	ldr	r3, [pc, #64]	; (8005310 <HAL_RCC_OscConfig+0x478>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d4:	f7fc fd16 	bl	8001d04 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052dc:	f7fc fd12 	bl	8001d04 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e045      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <HAL_RCC_OscConfig+0x470>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x444>
 80052fa:	e03d      	b.n	8005378 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d107      	bne.n	8005314 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e038      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
 8005308:	40023800 	.word	0x40023800
 800530c:	40007000 	.word	0x40007000
 8005310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005314:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <HAL_RCC_OscConfig+0x4ec>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d028      	beq.n	8005374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d121      	bne.n	8005374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	429a      	cmp	r2, r3
 800533c:	d11a      	bne.n	8005374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005344:	4013      	ands	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800534a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800534c:	4293      	cmp	r3, r2
 800534e:	d111      	bne.n	8005374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	085b      	lsrs	r3, r3, #1
 800535c:	3b01      	subs	r3, #1
 800535e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d107      	bne.n	8005374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800

08005388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0cc      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800539c:	4b68      	ldr	r3, [pc, #416]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d90c      	bls.n	80053c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053aa:	4b65      	ldr	r3, [pc, #404]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b63      	ldr	r3, [pc, #396]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0b8      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d020      	beq.n	8005412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a58      	ldr	r2, [pc, #352]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053f4:	4b53      	ldr	r3, [pc, #332]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	494d      	ldr	r1, [pc, #308]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d044      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b47      	ldr	r3, [pc, #284]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d119      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d003      	beq.n	8005446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005442:	2b03      	cmp	r3, #3
 8005444:	d107      	bne.n	8005456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005446:	4b3f      	ldr	r3, [pc, #252]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e06f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005456:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e067      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005466:	4b37      	ldr	r3, [pc, #220]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f023 0203 	bic.w	r2, r3, #3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4934      	ldr	r1, [pc, #208]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	4313      	orrs	r3, r2
 8005476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005478:	f7fc fc44 	bl	8001d04 <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547e:	e00a      	b.n	8005496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005480:	f7fc fc40 	bl	8001d04 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	f241 3288 	movw	r2, #5000	; 0x1388
 800548e:	4293      	cmp	r3, r2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e04f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005496:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 020c 	and.w	r2, r3, #12
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d1eb      	bne.n	8005480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a8:	4b25      	ldr	r3, [pc, #148]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d20c      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b22      	ldr	r3, [pc, #136]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e032      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4916      	ldr	r1, [pc, #88]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	490e      	ldr	r1, [pc, #56]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800550e:	f000 f821 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8005512:	4602      	mov	r2, r0
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	490a      	ldr	r1, [pc, #40]	; (8005548 <HAL_RCC_ClockConfig+0x1c0>)
 8005520:	5ccb      	ldrb	r3, [r1, r3]
 8005522:	fa22 f303 	lsr.w	r3, r2, r3
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <HAL_RCC_ClockConfig+0x1c4>)
 8005528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCC_ClockConfig+0x1c8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fc fba4 	bl	8001c7c <HAL_InitTick>

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023c00 	.word	0x40023c00
 8005544:	40023800 	.word	0x40023800
 8005548:	08009e6c 	.word	0x08009e6c
 800554c:	20000000 	.word	0x20000000
 8005550:	20000004 	.word	0x20000004

08005554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005558:	b094      	sub	sp, #80	; 0x50
 800555a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	647b      	str	r3, [r7, #68]	; 0x44
 8005560:	2300      	movs	r3, #0
 8005562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005564:	2300      	movs	r3, #0
 8005566:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800556c:	4b79      	ldr	r3, [pc, #484]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 030c 	and.w	r3, r3, #12
 8005574:	2b08      	cmp	r3, #8
 8005576:	d00d      	beq.n	8005594 <HAL_RCC_GetSysClockFreq+0x40>
 8005578:	2b08      	cmp	r3, #8
 800557a:	f200 80e1 	bhi.w	8005740 <HAL_RCC_GetSysClockFreq+0x1ec>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x34>
 8005582:	2b04      	cmp	r3, #4
 8005584:	d003      	beq.n	800558e <HAL_RCC_GetSysClockFreq+0x3a>
 8005586:	e0db      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005588:	4b73      	ldr	r3, [pc, #460]	; (8005758 <HAL_RCC_GetSysClockFreq+0x204>)
 800558a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800558c:	e0db      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800558e:	4b73      	ldr	r3, [pc, #460]	; (800575c <HAL_RCC_GetSysClockFreq+0x208>)
 8005590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005592:	e0d8      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005594:	4b6f      	ldr	r3, [pc, #444]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800559c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800559e:	4b6d      	ldr	r3, [pc, #436]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d063      	beq.n	8005672 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055aa:	4b6a      	ldr	r3, [pc, #424]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	099b      	lsrs	r3, r3, #6
 80055b0:	2200      	movs	r2, #0
 80055b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
 80055be:	2300      	movs	r3, #0
 80055c0:	637b      	str	r3, [r7, #52]	; 0x34
 80055c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055c6:	4622      	mov	r2, r4
 80055c8:	462b      	mov	r3, r5
 80055ca:	f04f 0000 	mov.w	r0, #0
 80055ce:	f04f 0100 	mov.w	r1, #0
 80055d2:	0159      	lsls	r1, r3, #5
 80055d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d8:	0150      	lsls	r0, r2, #5
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4621      	mov	r1, r4
 80055e0:	1a51      	subs	r1, r2, r1
 80055e2:	6139      	str	r1, [r7, #16]
 80055e4:	4629      	mov	r1, r5
 80055e6:	eb63 0301 	sbc.w	r3, r3, r1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f8:	4659      	mov	r1, fp
 80055fa:	018b      	lsls	r3, r1, #6
 80055fc:	4651      	mov	r1, sl
 80055fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005602:	4651      	mov	r1, sl
 8005604:	018a      	lsls	r2, r1, #6
 8005606:	4651      	mov	r1, sl
 8005608:	ebb2 0801 	subs.w	r8, r2, r1
 800560c:	4659      	mov	r1, fp
 800560e:	eb63 0901 	sbc.w	r9, r3, r1
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800561e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005626:	4690      	mov	r8, r2
 8005628:	4699      	mov	r9, r3
 800562a:	4623      	mov	r3, r4
 800562c:	eb18 0303 	adds.w	r3, r8, r3
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	462b      	mov	r3, r5
 8005634:	eb49 0303 	adc.w	r3, r9, r3
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005646:	4629      	mov	r1, r5
 8005648:	024b      	lsls	r3, r1, #9
 800564a:	4621      	mov	r1, r4
 800564c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005650:	4621      	mov	r1, r4
 8005652:	024a      	lsls	r2, r1, #9
 8005654:	4610      	mov	r0, r2
 8005656:	4619      	mov	r1, r3
 8005658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565a:	2200      	movs	r2, #0
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
 800565e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005664:	f7fb f992 	bl	800098c <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4613      	mov	r3, r2
 800566e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005670:	e058      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005672:	4b38      	ldr	r3, [pc, #224]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	099b      	lsrs	r3, r3, #6
 8005678:	2200      	movs	r2, #0
 800567a:	4618      	mov	r0, r3
 800567c:	4611      	mov	r1, r2
 800567e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005682:	623b      	str	r3, [r7, #32]
 8005684:	2300      	movs	r3, #0
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
 8005688:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800568c:	4642      	mov	r2, r8
 800568e:	464b      	mov	r3, r9
 8005690:	f04f 0000 	mov.w	r0, #0
 8005694:	f04f 0100 	mov.w	r1, #0
 8005698:	0159      	lsls	r1, r3, #5
 800569a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800569e:	0150      	lsls	r0, r2, #5
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4641      	mov	r1, r8
 80056a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80056aa:	4649      	mov	r1, r9
 80056ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056c4:	ebb2 040a 	subs.w	r4, r2, sl
 80056c8:	eb63 050b 	sbc.w	r5, r3, fp
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	00eb      	lsls	r3, r5, #3
 80056d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056da:	00e2      	lsls	r2, r4, #3
 80056dc:	4614      	mov	r4, r2
 80056de:	461d      	mov	r5, r3
 80056e0:	4643      	mov	r3, r8
 80056e2:	18e3      	adds	r3, r4, r3
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	464b      	mov	r3, r9
 80056e8:	eb45 0303 	adc.w	r3, r5, r3
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056fa:	4629      	mov	r1, r5
 80056fc:	028b      	lsls	r3, r1, #10
 80056fe:	4621      	mov	r1, r4
 8005700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005704:	4621      	mov	r1, r4
 8005706:	028a      	lsls	r2, r1, #10
 8005708:	4610      	mov	r0, r2
 800570a:	4619      	mov	r1, r3
 800570c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570e:	2200      	movs	r2, #0
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	61fa      	str	r2, [r7, #28]
 8005714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005718:	f7fb f938 	bl	800098c <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4613      	mov	r3, r2
 8005722:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	0c1b      	lsrs	r3, r3, #16
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	3301      	adds	r3, #1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005738:	fbb2 f3f3 	udiv	r3, r2, r3
 800573c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800573e:	e002      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_RCC_GetSysClockFreq+0x204>)
 8005742:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005748:	4618      	mov	r0, r3
 800574a:	3750      	adds	r7, #80	; 0x50
 800574c:	46bd      	mov	sp, r7
 800574e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005752:	bf00      	nop
 8005754:	40023800 	.word	0x40023800
 8005758:	00f42400 	.word	0x00f42400
 800575c:	007a1200 	.word	0x007a1200

08005760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005764:	4b03      	ldr	r3, [pc, #12]	; (8005774 <HAL_RCC_GetHCLKFreq+0x14>)
 8005766:	681b      	ldr	r3, [r3, #0]
}
 8005768:	4618      	mov	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20000000 	.word	0x20000000

08005778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800577c:	f7ff fff0 	bl	8005760 <HAL_RCC_GetHCLKFreq>
 8005780:	4602      	mov	r2, r0
 8005782:	4b05      	ldr	r3, [pc, #20]	; (8005798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	0a9b      	lsrs	r3, r3, #10
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	4903      	ldr	r1, [pc, #12]	; (800579c <HAL_RCC_GetPCLK1Freq+0x24>)
 800578e:	5ccb      	ldrb	r3, [r1, r3]
 8005790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005794:	4618      	mov	r0, r3
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40023800 	.word	0x40023800
 800579c:	08009e7c 	.word	0x08009e7c

080057a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d035      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057c8:	4b62      	ldr	r3, [pc, #392]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057ce:	f7fc fa99 	bl	8001d04 <HAL_GetTick>
 80057d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057d6:	f7fc fa95 	bl	8001d04 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e0b0      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057e8:	4b5b      	ldr	r3, [pc, #364]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	019a      	lsls	r2, r3, #6
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	071b      	lsls	r3, r3, #28
 8005800:	4955      	ldr	r1, [pc, #340]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005808:	4b52      	ldr	r3, [pc, #328]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800580a:	2201      	movs	r2, #1
 800580c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800580e:	f7fc fa79 	bl	8001d04 <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005814:	e008      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005816:	f7fc fa75 	bl	8001d04 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e090      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005828:	4b4b      	ldr	r3, [pc, #300]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0f0      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8083 	beq.w	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	4b44      	ldr	r3, [pc, #272]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	4a43      	ldr	r2, [pc, #268]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800584c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005850:	6413      	str	r3, [r2, #64]	; 0x40
 8005852:	4b41      	ldr	r3, [pc, #260]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800585e:	4b3f      	ldr	r3, [pc, #252]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a3e      	ldr	r2, [pc, #248]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005868:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800586a:	f7fc fa4b 	bl	8001d04 <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005870:	e008      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005872:	f7fc fa47 	bl	8001d04 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e062      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005884:	4b35      	ldr	r3, [pc, #212]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005890:	4b31      	ldr	r3, [pc, #196]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005898:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d02f      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d028      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ae:	4b2a      	ldr	r3, [pc, #168]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058b8:	4b29      	ldr	r3, [pc, #164]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058be:	4b28      	ldr	r3, [pc, #160]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058c4:	4a24      	ldr	r2, [pc, #144]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058ca:	4b23      	ldr	r3, [pc, #140]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d114      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058d6:	f7fc fa15 	bl	8001d04 <HAL_GetTick>
 80058da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058dc:	e00a      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058de:	f7fc fa11 	bl	8001d04 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e02a      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f4:	4b18      	ldr	r3, [pc, #96]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0ee      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800590c:	d10d      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800591e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005922:	490d      	ldr	r1, [pc, #52]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005924:	4313      	orrs	r3, r2
 8005926:	608b      	str	r3, [r1, #8]
 8005928:	e005      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800592a:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	4a0a      	ldr	r2, [pc, #40]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005930:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005934:	6093      	str	r3, [r2, #8]
 8005936:	4b08      	ldr	r3, [pc, #32]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005938:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005942:	4905      	ldr	r1, [pc, #20]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005944:	4313      	orrs	r3, r2
 8005946:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	42470068 	.word	0x42470068
 8005958:	40023800 	.word	0x40023800
 800595c:	40007000 	.word	0x40007000
 8005960:	42470e40 	.word	0x42470e40

08005964 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d13e      	bne.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005982:	4b23      	ldr	r3, [pc, #140]	; (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d12f      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800599a:	617b      	str	r3, [r7, #20]
          break;
 800599c:	e02f      	b.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800599e:	4b1c      	ldr	r3, [pc, #112]	; (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059aa:	d108      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059ac:	4b18      	ldr	r3, [pc, #96]	; (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059b4:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	e007      	b.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059be:	4b14      	ldr	r3, [pc, #80]	; (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c6:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80059ce:	4b10      	ldr	r3, [pc, #64]	; (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d4:	099b      	lsrs	r3, r3, #6
 80059d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	fb02 f303 	mul.w	r3, r2, r3
 80059e0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80059e2:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e8:	0f1b      	lsrs	r3, r3, #28
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]
          break;
 80059f6:	e002      	b.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]
          break;
 80059fc:	bf00      	nop
        }
      }
      break;
 80059fe:	bf00      	nop
    }
  }
  return frequency;
 8005a00:	697b      	ldr	r3, [r7, #20]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800
 8005a14:	00bb8000 	.word	0x00bb8000
 8005a18:	007a1200 	.word	0x007a1200
 8005a1c:	00f42400 	.word	0x00f42400

08005a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e07b      	b.n	8005b2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d108      	bne.n	8005a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a42:	d009      	beq.n	8005a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	61da      	str	r2, [r3, #28]
 8005a4a:	e005      	b.n	8005a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fb ff06 	bl	8001884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005adc:	ea42 0103 	orr.w	r1, r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	f003 0104 	and.w	r1, r3, #4
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	f003 0210 	and.w	r2, r3, #16
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e041      	b.n	8005bc8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7fb fedb 	bl	8001914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f000 fa79 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d001      	beq.n	8005be8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e046      	b.n	8005c76 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a23      	ldr	r2, [pc, #140]	; (8005c84 <HAL_TIM_Base_Start+0xb4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d022      	beq.n	8005c40 <HAL_TIM_Base_Start+0x70>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c02:	d01d      	beq.n	8005c40 <HAL_TIM_Base_Start+0x70>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1f      	ldr	r2, [pc, #124]	; (8005c88 <HAL_TIM_Base_Start+0xb8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d018      	beq.n	8005c40 <HAL_TIM_Base_Start+0x70>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1e      	ldr	r2, [pc, #120]	; (8005c8c <HAL_TIM_Base_Start+0xbc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_TIM_Base_Start+0x70>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1c      	ldr	r2, [pc, #112]	; (8005c90 <HAL_TIM_Base_Start+0xc0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00e      	beq.n	8005c40 <HAL_TIM_Base_Start+0x70>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <HAL_TIM_Base_Start+0xc4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_TIM_Base_Start+0x70>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a19      	ldr	r2, [pc, #100]	; (8005c98 <HAL_TIM_Base_Start+0xc8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_TIM_Base_Start+0x70>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <HAL_TIM_Base_Start+0xcc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d111      	bne.n	8005c64 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b06      	cmp	r3, #6
 8005c50:	d010      	beq.n	8005c74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0201 	orr.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c62:	e007      	b.n	8005c74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40001800 	.word	0x40001800

08005ca0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e041      	b.n	8005d36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f839 	bl	8005d3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	f000 f9c2 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e0ae      	b.n	8005ed0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b0c      	cmp	r3, #12
 8005d7e:	f200 809f 	bhi.w	8005ec0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005dbd 	.word	0x08005dbd
 8005d8c:	08005ec1 	.word	0x08005ec1
 8005d90:	08005ec1 	.word	0x08005ec1
 8005d94:	08005ec1 	.word	0x08005ec1
 8005d98:	08005dfd 	.word	0x08005dfd
 8005d9c:	08005ec1 	.word	0x08005ec1
 8005da0:	08005ec1 	.word	0x08005ec1
 8005da4:	08005ec1 	.word	0x08005ec1
 8005da8:	08005e3f 	.word	0x08005e3f
 8005dac:	08005ec1 	.word	0x08005ec1
 8005db0:	08005ec1 	.word	0x08005ec1
 8005db4:	08005ec1 	.word	0x08005ec1
 8005db8:	08005e7f 	.word	0x08005e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f9f0 	bl	80061a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0208 	orr.w	r2, r2, #8
 8005dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0204 	bic.w	r2, r2, #4
 8005de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6999      	ldr	r1, [r3, #24]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	619a      	str	r2, [r3, #24]
      break;
 8005dfa:	e064      	b.n	8005ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fa40 	bl	8006288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6999      	ldr	r1, [r3, #24]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	021a      	lsls	r2, r3, #8
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	619a      	str	r2, [r3, #24]
      break;
 8005e3c:	e043      	b.n	8005ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fa95 	bl	8006374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0208 	orr.w	r2, r2, #8
 8005e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0204 	bic.w	r2, r2, #4
 8005e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69d9      	ldr	r1, [r3, #28]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	61da      	str	r2, [r3, #28]
      break;
 8005e7c:	e023      	b.n	8005ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fae9 	bl	800645c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69d9      	ldr	r1, [r3, #28]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	021a      	lsls	r2, r3, #8
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	61da      	str	r2, [r3, #28]
      break;
 8005ebe:	e002      	b.n	8005ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d101      	bne.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e0b4      	b.n	800605e <HAL_TIM_ConfigClockSource+0x186>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2c:	d03e      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0xd4>
 8005f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f32:	f200 8087 	bhi.w	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3a:	f000 8086 	beq.w	800604a <HAL_TIM_ConfigClockSource+0x172>
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f42:	d87f      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f44:	2b70      	cmp	r3, #112	; 0x70
 8005f46:	d01a      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0xa6>
 8005f48:	2b70      	cmp	r3, #112	; 0x70
 8005f4a:	d87b      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f4c:	2b60      	cmp	r3, #96	; 0x60
 8005f4e:	d050      	beq.n	8005ff2 <HAL_TIM_ConfigClockSource+0x11a>
 8005f50:	2b60      	cmp	r3, #96	; 0x60
 8005f52:	d877      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f54:	2b50      	cmp	r3, #80	; 0x50
 8005f56:	d03c      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0xfa>
 8005f58:	2b50      	cmp	r3, #80	; 0x50
 8005f5a:	d873      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d058      	beq.n	8006012 <HAL_TIM_ConfigClockSource+0x13a>
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	d86f      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b30      	cmp	r3, #48	; 0x30
 8005f66:	d064      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f68:	2b30      	cmp	r3, #48	; 0x30
 8005f6a:	d86b      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	d060      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d867      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d05c      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d05a      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f7c:	e062      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6899      	ldr	r1, [r3, #8]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f000 fb35 	bl	80065fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	609a      	str	r2, [r3, #8]
      break;
 8005faa:	e04f      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6818      	ldr	r0, [r3, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	6899      	ldr	r1, [r3, #8]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f000 fb1e 	bl	80065fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fce:	609a      	str	r2, [r3, #8]
      break;
 8005fd0:	e03c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	6859      	ldr	r1, [r3, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f000 fa92 	bl	8006508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2150      	movs	r1, #80	; 0x50
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 faeb 	bl	80065c6 <TIM_ITRx_SetConfig>
      break;
 8005ff0:	e02c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6818      	ldr	r0, [r3, #0]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	6859      	ldr	r1, [r3, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f000 fab1 	bl	8006566 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2160      	movs	r1, #96	; 0x60
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fadb 	bl	80065c6 <TIM_ITRx_SetConfig>
      break;
 8006010:	e01c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	461a      	mov	r2, r3
 8006020:	f000 fa72 	bl	8006508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2140      	movs	r1, #64	; 0x40
 800602a:	4618      	mov	r0, r3
 800602c:	f000 facb 	bl	80065c6 <TIM_ITRx_SetConfig>
      break;
 8006030:	e00c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f000 fac2 	bl	80065c6 <TIM_ITRx_SetConfig>
      break;
 8006042:	e003      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
      break;
 8006048:	e000      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800604a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a40      	ldr	r2, [pc, #256]	; (800617c <TIM_Base_SetConfig+0x114>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d013      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d00f      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a3d      	ldr	r2, [pc, #244]	; (8006180 <TIM_Base_SetConfig+0x118>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00b      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a3c      	ldr	r2, [pc, #240]	; (8006184 <TIM_Base_SetConfig+0x11c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3b      	ldr	r2, [pc, #236]	; (8006188 <TIM_Base_SetConfig+0x120>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a3a      	ldr	r2, [pc, #232]	; (800618c <TIM_Base_SetConfig+0x124>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d108      	bne.n	80060ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2f      	ldr	r2, [pc, #188]	; (800617c <TIM_Base_SetConfig+0x114>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d02b      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c8:	d027      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2c      	ldr	r2, [pc, #176]	; (8006180 <TIM_Base_SetConfig+0x118>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d023      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2b      	ldr	r2, [pc, #172]	; (8006184 <TIM_Base_SetConfig+0x11c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d01f      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2a      	ldr	r2, [pc, #168]	; (8006188 <TIM_Base_SetConfig+0x120>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01b      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a29      	ldr	r2, [pc, #164]	; (800618c <TIM_Base_SetConfig+0x124>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d017      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a28      	ldr	r2, [pc, #160]	; (8006190 <TIM_Base_SetConfig+0x128>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a27      	ldr	r2, [pc, #156]	; (8006194 <TIM_Base_SetConfig+0x12c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00f      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a26      	ldr	r2, [pc, #152]	; (8006198 <TIM_Base_SetConfig+0x130>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00b      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a25      	ldr	r2, [pc, #148]	; (800619c <TIM_Base_SetConfig+0x134>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a24      	ldr	r2, [pc, #144]	; (80061a0 <TIM_Base_SetConfig+0x138>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a23      	ldr	r2, [pc, #140]	; (80061a4 <TIM_Base_SetConfig+0x13c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d108      	bne.n	800612c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a0a      	ldr	r2, [pc, #40]	; (800617c <TIM_Base_SetConfig+0x114>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_Base_SetConfig+0xf8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a0c      	ldr	r2, [pc, #48]	; (800618c <TIM_Base_SetConfig+0x124>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d103      	bne.n	8006168 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	615a      	str	r2, [r3, #20]
}
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40010000 	.word	0x40010000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40010400 	.word	0x40010400
 8006190:	40014000 	.word	0x40014000
 8006194:	40014400 	.word	0x40014400
 8006198:	40014800 	.word	0x40014800
 800619c:	40001800 	.word	0x40001800
 80061a0:	40001c00 	.word	0x40001c00
 80061a4:	40002000 	.word	0x40002000

080061a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 0302 	bic.w	r3, r3, #2
 80061f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a20      	ldr	r2, [pc, #128]	; (8006280 <TIM_OC1_SetConfig+0xd8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_OC1_SetConfig+0x64>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <TIM_OC1_SetConfig+0xdc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d10c      	bne.n	8006226 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0308 	bic.w	r3, r3, #8
 8006212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 0304 	bic.w	r3, r3, #4
 8006224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a15      	ldr	r2, [pc, #84]	; (8006280 <TIM_OC1_SetConfig+0xd8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_OC1_SetConfig+0x8e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a14      	ldr	r2, [pc, #80]	; (8006284 <TIM_OC1_SetConfig+0xdc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d111      	bne.n	800625a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800623c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40010000 	.word	0x40010000
 8006284:	40010400 	.word	0x40010400

08006288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f023 0210 	bic.w	r2, r3, #16
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0320 	bic.w	r3, r3, #32
 80062d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a22      	ldr	r2, [pc, #136]	; (800636c <TIM_OC2_SetConfig+0xe4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_OC2_SetConfig+0x68>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a21      	ldr	r2, [pc, #132]	; (8006370 <TIM_OC2_SetConfig+0xe8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10d      	bne.n	800630c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a17      	ldr	r2, [pc, #92]	; (800636c <TIM_OC2_SetConfig+0xe4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_OC2_SetConfig+0x94>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a16      	ldr	r2, [pc, #88]	; (8006370 <TIM_OC2_SetConfig+0xe8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d113      	bne.n	8006344 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800632a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400

08006374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a21      	ldr	r2, [pc, #132]	; (8006454 <TIM_OC3_SetConfig+0xe0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_OC3_SetConfig+0x66>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a20      	ldr	r2, [pc, #128]	; (8006458 <TIM_OC3_SetConfig+0xe4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d10d      	bne.n	80063f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a16      	ldr	r2, [pc, #88]	; (8006454 <TIM_OC3_SetConfig+0xe0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_OC3_SetConfig+0x92>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a15      	ldr	r2, [pc, #84]	; (8006458 <TIM_OC3_SetConfig+0xe4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d113      	bne.n	800642e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800640c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	621a      	str	r2, [r3, #32]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40010000 	.word	0x40010000
 8006458:	40010400 	.word	0x40010400

0800645c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	031b      	lsls	r3, r3, #12
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a12      	ldr	r2, [pc, #72]	; (8006500 <TIM_OC4_SetConfig+0xa4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC4_SetConfig+0x68>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a11      	ldr	r2, [pc, #68]	; (8006504 <TIM_OC4_SetConfig+0xa8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d109      	bne.n	80064d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	019b      	lsls	r3, r3, #6
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40010400 	.word	0x40010400

08006508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f023 0201 	bic.w	r2, r3, #1
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f023 030a 	bic.w	r3, r3, #10
 8006544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006566:	b480      	push	{r7}
 8006568:	b087      	sub	sp, #28
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f023 0210 	bic.w	r2, r3, #16
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	031b      	lsls	r3, r3, #12
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f043 0307 	orr.w	r3, r3, #7
 80065e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	609a      	str	r2, [r3, #8]
}
 80065f0:	bf00      	nop
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	021a      	lsls	r2, r3, #8
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	431a      	orrs	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4313      	orrs	r3, r2
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	609a      	str	r2, [r3, #8]
}
 8006630:	bf00      	nop
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006650:	2302      	movs	r3, #2
 8006652:	e05a      	b.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a21      	ldr	r2, [pc, #132]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d022      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a0:	d01d      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1d      	ldr	r2, [pc, #116]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d018      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d013      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00e      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a18      	ldr	r2, [pc, #96]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d009      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a17      	ldr	r2, [pc, #92]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d004      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a15      	ldr	r2, [pc, #84]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d10c      	bne.n	80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40010000 	.word	0x40010000
 800671c:	40000400 	.word	0x40000400
 8006720:	40000800 	.word	0x40000800
 8006724:	40000c00 	.word	0x40000c00
 8006728:	40010400 	.word	0x40010400
 800672c:	40014000 	.word	0x40014000
 8006730:	40001800 	.word	0x40001800

08006734 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800674c:	2302      	movs	r3, #2
 800674e:	e03d      	b.n	80067cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	4313      	orrs	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067d8:	b084      	sub	sp, #16
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	f107 001c 	add.w	r0, r7, #28
 80067e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d122      	bne.n	8006836 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681a:	2b01      	cmp	r3, #1
 800681c:	d105      	bne.n	800682a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9c0 	bl	8006bb0 <USB_CoreReset>
 8006830:	4603      	mov	r3, r0
 8006832:	73fb      	strb	r3, [r7, #15]
 8006834:	e01a      	b.n	800686c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9b4 	bl	8006bb0 <USB_CoreReset>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800684c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d106      	bne.n	8006860 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
 800685e:	e005      	b.n	800686c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	2b01      	cmp	r3, #1
 8006870:	d10b      	bne.n	800688a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f043 0206 	orr.w	r2, r3, #6
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006896:	b004      	add	sp, #16
 8006898:	4770      	bx	lr

0800689a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f043 0201 	orr.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f023 0201 	bic.w	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068fa:	78fb      	ldrb	r3, [r7, #3]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d115      	bne.n	800692c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800690c:	2001      	movs	r0, #1
 800690e:	f7fb fa05 	bl	8001d1c <HAL_Delay>
      ms++;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3301      	adds	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f93a 	bl	8006b92 <USB_GetMode>
 800691e:	4603      	mov	r3, r0
 8006920:	2b01      	cmp	r3, #1
 8006922:	d01e      	beq.n	8006962 <USB_SetCurrentMode+0x84>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b31      	cmp	r3, #49	; 0x31
 8006928:	d9f0      	bls.n	800690c <USB_SetCurrentMode+0x2e>
 800692a:	e01a      	b.n	8006962 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d115      	bne.n	800695e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800693e:	2001      	movs	r0, #1
 8006940:	f7fb f9ec 	bl	8001d1c <HAL_Delay>
      ms++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f921 	bl	8006b92 <USB_GetMode>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <USB_SetCurrentMode+0x84>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b31      	cmp	r3, #49	; 0x31
 800695a:	d9f0      	bls.n	800693e <USB_SetCurrentMode+0x60>
 800695c:	e001      	b.n	8006962 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e005      	b.n	800696e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b32      	cmp	r3, #50	; 0x32
 8006966:	d101      	bne.n	800696c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a13      	ldr	r2, [pc, #76]	; (80069dc <USB_FlushTxFifo+0x64>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d901      	bls.n	8006998 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e01b      	b.n	80069d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	daf2      	bge.n	8006986 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	019b      	lsls	r3, r3, #6
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a08      	ldr	r2, [pc, #32]	; (80069dc <USB_FlushTxFifo+0x64>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e006      	b.n	80069d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d0f0      	beq.n	80069b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	00030d40 	.word	0x00030d40

080069e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a11      	ldr	r2, [pc, #68]	; (8006a3c <USB_FlushRxFifo+0x5c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e018      	b.n	8006a30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	daf2      	bge.n	80069ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2210      	movs	r2, #16
 8006a0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3301      	adds	r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <USB_FlushRxFifo+0x5c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d901      	bls.n	8006a22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e006      	b.n	8006a30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b10      	cmp	r3, #16
 8006a2c:	d0f0      	beq.n	8006a10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	00030d40 	.word	0x00030d40

08006a40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b089      	sub	sp, #36	; 0x24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	460b      	mov	r3, r1
 8006a50:	71fb      	strb	r3, [r7, #7]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d123      	bne.n	8006aae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a66:	88bb      	ldrh	r3, [r7, #4]
 8006a68:	3303      	adds	r3, #3
 8006a6a:	089b      	lsrs	r3, r3, #2
 8006a6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e018      	b.n	8006aa6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	031a      	lsls	r2, r3, #12
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a80:	461a      	mov	r2, r3
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	3301      	adds	r3, #1
 8006a92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3301      	adds	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d3e2      	bcc.n	8006a74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3724      	adds	r7, #36	; 0x24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b08b      	sub	sp, #44	; 0x2c
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ad2:	88fb      	ldrh	r3, [r7, #6]
 8006ad4:	089b      	lsrs	r3, r3, #2
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	623b      	str	r3, [r7, #32]
 8006ae6:	e014      	b.n	8006b12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	3301      	adds	r3, #1
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	3301      	adds	r3, #1
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	3301      	adds	r3, #1
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	3301      	adds	r3, #1
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	623b      	str	r3, [r7, #32]
 8006b12:	6a3a      	ldr	r2, [r7, #32]
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d3e6      	bcc.n	8006ae8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b1a:	8bfb      	ldrh	r3, [r7, #30]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01e      	beq.n	8006b5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f107 0310 	add.w	r3, r7, #16
 8006b30:	6812      	ldr	r2, [r2, #0]
 8006b32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	701a      	strb	r2, [r3, #0]
      i++;
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	3301      	adds	r3, #1
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b52:	8bfb      	ldrh	r3, [r7, #30]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b58:	8bfb      	ldrh	r3, [r7, #30]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1ea      	bne.n	8006b34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	372c      	adds	r7, #44	; 0x2c
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4013      	ands	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b84:	68fb      	ldr	r3, [r7, #12]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <USB_CoreReset+0x64>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e01b      	b.n	8006c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	daf2      	bge.n	8006bbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f043 0201 	orr.w	r2, r3, #1
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3301      	adds	r3, #1
 8006bea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <USB_CoreReset+0x64>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d901      	bls.n	8006bf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e006      	b.n	8006c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d0f0      	beq.n	8006be6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	00030d40 	.word	0x00030d40

08006c18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c18:	b084      	sub	sp, #16
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b086      	sub	sp, #24
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d018      	beq.n	8006ca0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d10a      	bne.n	8006c8a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c82:	f043 0304 	orr.w	r3, r3, #4
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	e014      	b.n	8006cb4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c98:	f023 0304 	bic.w	r3, r3, #4
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	e009      	b.n	8006cb4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cae:	f023 0304 	bic.w	r3, r3, #4
 8006cb2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cb4:	2110      	movs	r1, #16
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fe5e 	bl	8006978 <USB_FlushTxFifo>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fe8a 	bl	80069e0 <USB_FlushRxFifo>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	613b      	str	r3, [r7, #16]
 8006cda:	e015      	b.n	8006d08 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	3301      	adds	r3, #1
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d3e5      	bcc.n	8006cdc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d1c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00b      	beq.n	8006d42 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <USB_HostInit+0x16c>)
 8006d36:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <USB_HostInit+0x170>)
 8006d3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006d40:	e009      	b.n	8006d56 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2280      	movs	r2, #128	; 0x80
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a10      	ldr	r2, [pc, #64]	; (8006d8c <USB_HostInit+0x174>)
 8006d4c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a0f      	ldr	r2, [pc, #60]	; (8006d90 <USB_HostInit+0x178>)
 8006d52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f043 0210 	orr.w	r2, r3, #16
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <USB_HostInit+0x17c>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d80:	b004      	add	sp, #16
 8006d82:	4770      	bx	lr
 8006d84:	01000200 	.word	0x01000200
 8006d88:	00e00300 	.word	0x00e00300
 8006d8c:	00600080 	.word	0x00600080
 8006d90:	004000e0 	.word	0x004000e0
 8006d94:	a3200008 	.word	0xa3200008

08006d98 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006db6:	f023 0303 	bic.w	r3, r3, #3
 8006dba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	68f9      	ldr	r1, [r7, #12]
 8006dcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d107      	bne.n	8006dea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006de0:	461a      	mov	r2, r3
 8006de2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006de6:	6053      	str	r3, [r2, #4]
 8006de8:	e009      	b.n	8006dfe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d106      	bne.n	8006dfe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006df6:	461a      	mov	r2, r3
 8006df8:	f241 7370 	movw	r3, #6000	; 0x1770
 8006dfc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d109      	bne.n	8006e50 <USB_DriveVbus+0x44>
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d106      	bne.n	8006e50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5a:	d109      	bne.n	8006e70 <USB_DriveVbus+0x64>
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	0c5b      	lsrs	r3, r3, #17
 8006e9c:	f003 0303 	and.w	r3, r3, #3
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	b29b      	uxth	r3, r3
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	4608      	mov	r0, r1
 8006eda:	4611      	mov	r1, r2
 8006edc:	461a      	mov	r2, r3
 8006ede:	4603      	mov	r3, r0
 8006ee0:	70fb      	strb	r3, [r7, #3]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	70bb      	strb	r3, [r7, #2]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006ef2:	78fb      	ldrb	r3, [r7, #3]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efe:	461a      	mov	r2, r3
 8006f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006f06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d87e      	bhi.n	800700c <USB_HC_Init+0x13c>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USB_HC_Init+0x44>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f25 	.word	0x08006f25
 8006f18:	08006fcf 	.word	0x08006fcf
 8006f1c:	08006f25 	.word	0x08006f25
 8006f20:	08006f91 	.word	0x08006f91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f30:	461a      	mov	r2, r3
 8006f32:	f240 439d 	movw	r3, #1181	; 0x49d
 8006f36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006f38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	da10      	bge.n	8006f62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006f60:	e057      	b.n	8007012 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d051      	beq.n	8007012 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006f6e:	78fb      	ldrb	r3, [r7, #3]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	78fa      	ldrb	r2, [r7, #3]
 8006f7e:	0151      	lsls	r1, r2, #5
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	440a      	add	r2, r1
 8006f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f8c:	60d3      	str	r3, [r2, #12]
      break;
 8006f8e:	e040      	b.n	8007012 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f90:	78fb      	ldrb	r3, [r7, #3]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006fa2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006fa4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	da34      	bge.n	8007016 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	78fa      	ldrb	r2, [r7, #3]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006fcc:	e023      	b.n	8007016 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f240 2325 	movw	r3, #549	; 0x225
 8006fe0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006fe2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	da17      	bge.n	800701a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	78fa      	ldrb	r2, [r7, #3]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007004:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007008:	60d3      	str	r3, [r2, #12]
      }
      break;
 800700a:	e006      	b.n	800701a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	77fb      	strb	r3, [r7, #31]
      break;
 8007010:	e004      	b.n	800701c <USB_HC_Init+0x14c>
      break;
 8007012:	bf00      	nop
 8007014:	e002      	b.n	800701c <USB_HC_Init+0x14c>
      break;
 8007016:	bf00      	nop
 8007018:	e000      	b.n	800701c <USB_HC_Init+0x14c>
      break;
 800701a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4413      	add	r3, r2
 8007024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	78fa      	ldrb	r2, [r7, #3]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	440a      	add	r2, r1
 8007032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007036:	f043 0302 	orr.w	r3, r3, #2
 800703a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007042:	699a      	ldr	r2, [r3, #24]
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	2101      	movs	r1, #1
 800704c:	fa01 f303 	lsl.w	r3, r1, r3
 8007050:	6939      	ldr	r1, [r7, #16]
 8007052:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007056:	4313      	orrs	r3, r2
 8007058:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007066:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800706a:	2b00      	cmp	r3, #0
 800706c:	da03      	bge.n	8007076 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800706e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007072:	61bb      	str	r3, [r7, #24]
 8007074:	e001      	b.n	800707a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff feff 	bl	8006e7e <USB_GetHostSpeed>
 8007080:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007086:	2b02      	cmp	r3, #2
 8007088:	d106      	bne.n	8007098 <USB_HC_Init+0x1c8>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b02      	cmp	r3, #2
 800708e:	d003      	beq.n	8007098 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007094:	617b      	str	r3, [r7, #20]
 8007096:	e001      	b.n	800709c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800709c:	787b      	ldrb	r3, [r7, #1]
 800709e:	059b      	lsls	r3, r3, #22
 80070a0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070a4:	78bb      	ldrb	r3, [r7, #2]
 80070a6:	02db      	lsls	r3, r3, #11
 80070a8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070ac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80070ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070b2:	049b      	lsls	r3, r3, #18
 80070b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80070bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80070c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	0159      	lsls	r1, r3, #5
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	440b      	add	r3, r1
 80070ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070d8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80070da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d003      	beq.n	80070ea <USB_HC_Init+0x21a>
 80070e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d10f      	bne.n	800710a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80070ea:	78fb      	ldrb	r3, [r7, #3]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	78fa      	ldrb	r2, [r7, #3]
 80070fa:	0151      	lsls	r1, r2, #5
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	440a      	add	r2, r1
 8007100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007108:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800710a:	7ffb      	ldrb	r3, [r7, #31]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3720      	adds	r7, #32
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08c      	sub	sp, #48	; 0x30
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800712c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007130:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713a:	2b00      	cmp	r3, #0
 800713c:	d02d      	beq.n	800719a <USB_HC_StartXfer+0x86>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	791b      	ldrb	r3, [r3, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d129      	bne.n	800719a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007146:	79fb      	ldrb	r3, [r7, #7]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d117      	bne.n	800717c <USB_HC_StartXfer+0x68>
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	79db      	ldrb	r3, [r3, #7]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <USB_HC_StartXfer+0x48>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	79db      	ldrb	r3, [r3, #7]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d10f      	bne.n	800717c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	4413      	add	r3, r2
 8007164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	0151      	lsls	r1, r2, #5
 800716e:	6a3a      	ldr	r2, [r7, #32]
 8007170:	440a      	add	r2, r1
 8007172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10b      	bne.n	800719a <USB_HC_StartXfer+0x86>
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	795b      	ldrb	r3, [r3, #5]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d107      	bne.n	800719a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	785b      	ldrb	r3, [r3, #1]
 800718e:	4619      	mov	r1, r3
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fa0f 	bl	80075b4 <USB_DoPing>
      return HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	e0f8      	b.n	800738c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d018      	beq.n	80071d4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	8912      	ldrh	r2, [r2, #8]
 80071aa:	4413      	add	r3, r2
 80071ac:	3b01      	subs	r3, #1
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	8912      	ldrh	r2, [r2, #8]
 80071b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80071b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80071ba:	8b7b      	ldrh	r3, [r7, #26]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d90b      	bls.n	80071d8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80071c0:	8b7b      	ldrh	r3, [r7, #26]
 80071c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	8912      	ldrh	r2, [r2, #8]
 80071ca:	fb03 f202 	mul.w	r2, r3, r2
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	611a      	str	r2, [r3, #16]
 80071d2:	e001      	b.n	80071d8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80071d4:	2301      	movs	r3, #1
 80071d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	78db      	ldrb	r3, [r3, #3]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	8912      	ldrh	r2, [r2, #8]
 80071e6:	fb03 f202 	mul.w	r2, r3, r2
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	611a      	str	r2, [r3, #16]
 80071ee:	e003      	b.n	80071f8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	695a      	ldr	r2, [r3, #20]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007200:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007202:	04d9      	lsls	r1, r3, #19
 8007204:	4b63      	ldr	r3, [pc, #396]	; (8007394 <USB_HC_StartXfer+0x280>)
 8007206:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007208:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	7a9b      	ldrb	r3, [r3, #10]
 800720e:	075b      	lsls	r3, r3, #29
 8007210:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007214:	69f9      	ldr	r1, [r7, #28]
 8007216:	0148      	lsls	r0, r1, #5
 8007218:	6a39      	ldr	r1, [r7, #32]
 800721a:	4401      	add	r1, r0
 800721c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007220:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007222:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	68d9      	ldr	r1, [r3, #12]
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	4413      	add	r3, r2
 8007236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723a:	460a      	mov	r2, r1
 800723c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	bf0c      	ite	eq
 800724e:	2301      	moveq	r3, #1
 8007250:	2300      	movne	r3, #0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	4413      	add	r3, r2
 800725e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	0151      	lsls	r1, r2, #5
 8007268:	6a3a      	ldr	r2, [r7, #32]
 800726a:	440a      	add	r2, r1
 800726c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007270:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007274:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	4413      	add	r3, r2
 800727e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	7e7b      	ldrb	r3, [r7, #25]
 8007286:	075b      	lsls	r3, r3, #29
 8007288:	69f9      	ldr	r1, [r7, #28]
 800728a:	0148      	lsls	r0, r1, #5
 800728c:	6a39      	ldr	r1, [r7, #32]
 800728e:	4401      	add	r1, r0
 8007290:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007294:	4313      	orrs	r3, r2
 8007296:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072ae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	78db      	ldrb	r3, [r3, #3]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	e003      	b.n	80072ca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072c8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072d0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072de:	461a      	mov	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80072e4:	79fb      	ldrb	r3, [r7, #7]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e04e      	b.n	800738c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	78db      	ldrb	r3, [r3, #3]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d149      	bne.n	800738a <USB_HC_StartXfer+0x276>
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d045      	beq.n	800738a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	79db      	ldrb	r3, [r3, #7]
 8007302:	2b03      	cmp	r3, #3
 8007304:	d830      	bhi.n	8007368 <USB_HC_StartXfer+0x254>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <USB_HC_StartXfer+0x1f8>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	0800731d 	.word	0x0800731d
 8007310:	08007341 	.word	0x08007341
 8007314:	0800731d 	.word	0x0800731d
 8007318:	08007341 	.word	0x08007341
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	3303      	adds	r3, #3
 8007322:	089b      	lsrs	r3, r3, #2
 8007324:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007326:	8afa      	ldrh	r2, [r7, #22]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	b29b      	uxth	r3, r3
 800732e:	429a      	cmp	r2, r3
 8007330:	d91c      	bls.n	800736c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f043 0220 	orr.w	r2, r3, #32
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	619a      	str	r2, [r3, #24]
        }
        break;
 800733e:	e015      	b.n	800736c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	3303      	adds	r3, #3
 8007346:	089b      	lsrs	r3, r3, #2
 8007348:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800734a:	8afa      	ldrh	r2, [r7, #22]
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	b29b      	uxth	r3, r3
 8007356:	429a      	cmp	r2, r3
 8007358:	d90a      	bls.n	8007370 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	619a      	str	r2, [r3, #24]
        }
        break;
 8007366:	e003      	b.n	8007370 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007368:	bf00      	nop
 800736a:	e002      	b.n	8007372 <USB_HC_StartXfer+0x25e>
        break;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <USB_HC_StartXfer+0x25e>
        break;
 8007370:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	68d9      	ldr	r1, [r3, #12]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	785a      	ldrb	r2, [r3, #1]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	b29b      	uxth	r3, r3
 8007380:	2000      	movs	r0, #0
 8007382:	9000      	str	r0, [sp, #0]
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff fb5b 	bl	8006a40 <USB_WritePacket>
  }

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3728      	adds	r7, #40	; 0x28
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	1ff80000 	.word	0x1ff80000

08007398 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	b29b      	uxth	r3, r3
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b089      	sub	sp, #36	; 0x24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	0c9b      	lsrs	r3, r3, #18
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	0fdb      	lsrs	r3, r3, #31
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b20      	cmp	r3, #32
 8007408:	d104      	bne.n	8007414 <USB_HC_Halt+0x5a>
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	e0c8      	b.n	80075a6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <USB_HC_Halt+0x66>
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d163      	bne.n	80074e8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	69fa      	ldr	r2, [r7, #28]
 8007434:	440a      	add	r2, r1
 8007436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800743a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800743e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	f040 80ab 	bne.w	80075a4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d133      	bne.n	80074c2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	4413      	add	r3, r2
 8007462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	69fa      	ldr	r2, [r7, #28]
 800746e:	440a      	add	r2, r1
 8007470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007478:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	4413      	add	r3, r2
 8007482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	69fa      	ldr	r2, [r7, #28]
 800748e:	440a      	add	r2, r1
 8007490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007498:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3301      	adds	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074a6:	d81d      	bhi.n	80074e4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074be:	d0ec      	beq.n	800749a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074c0:	e070      	b.n	80075a4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074e2:	e05f      	b.n	80075a4 <USB_HC_Halt+0x1ea>
            break;
 80074e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074e6:	e05d      	b.n	80075a4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007502:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007506:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d133      	bne.n	8007580 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	4413      	add	r3, r2
 8007520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	0151      	lsls	r1, r2, #5
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	440a      	add	r2, r1
 800752e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007532:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007536:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	4413      	add	r3, r2
 8007540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	0151      	lsls	r1, r2, #5
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	440a      	add	r2, r1
 800754e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007552:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007556:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3301      	adds	r3, #1
 800755c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007564:	d81d      	bhi.n	80075a2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800757c:	d0ec      	beq.n	8007558 <USB_HC_Halt+0x19e>
 800757e:	e011      	b.n	80075a4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	440a      	add	r2, r1
 8007596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800759a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	e000      	b.n	80075a4 <USB_HC_Halt+0x1ea>
          break;
 80075a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3724      	adds	r7, #36	; 0x24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80075c8:	2301      	movs	r3, #1
 80075ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	04da      	lsls	r2, r3, #19
 80075d0:	4b15      	ldr	r3, [pc, #84]	; (8007628 <USB_DoPing+0x74>)
 80075d2:	4013      	ands	r3, r2
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	0151      	lsls	r1, r2, #5
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	440a      	add	r2, r1
 80075dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007604:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	4413      	add	r3, r2
 800760e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007612:	461a      	mov	r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	1ff80000 	.word	0x1ff80000

0800762c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff f93b 	bl	80068bc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007646:	2110      	movs	r1, #16
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff f995 	bl	8006978 <USB_FlushTxFifo>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff f9c1 	bl	80069e0 <USB_FlushRxFifo>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007668:	2300      	movs	r3, #0
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	e01f      	b.n	80076ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	4413      	add	r3, r2
 8007676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007684:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800768c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007694:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	4413      	add	r3, r2
 800769e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a2:	461a      	mov	r2, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	3301      	adds	r3, #1
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b0f      	cmp	r3, #15
 80076b2:	d9dc      	bls.n	800766e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80076b4:	2300      	movs	r3, #0
 80076b6:	61bb      	str	r3, [r7, #24]
 80076b8:	e034      	b.n	8007724 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ee:	461a      	mov	r2, r3
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3301      	adds	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007700:	d80c      	bhi.n	800771c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	4413      	add	r3, r2
 800770a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007718:	d0ec      	beq.n	80076f4 <USB_StopHost+0xc8>
 800771a:	e000      	b.n	800771e <USB_StopHost+0xf2>
        break;
 800771c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	3301      	adds	r3, #1
 8007722:	61bb      	str	r3, [r7, #24]
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b0f      	cmp	r3, #15
 8007728:	d9c7      	bls.n	80076ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007730:	461a      	mov	r2, r3
 8007732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007736:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800773e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff f8aa 	bl	800689a <USB_EnableGlobalInt>

  return ret;
 8007746:	7ffb      	ldrb	r3, [r7, #31]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3720      	adds	r7, #32
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007750:	b590      	push	{r4, r7, lr}
 8007752:	b089      	sub	sp, #36	; 0x24
 8007754:	af04      	add	r7, sp, #16
 8007756:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007758:	2301      	movs	r3, #1
 800775a:	2202      	movs	r2, #2
 800775c:	2102      	movs	r1, #2
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fc66 	bl	8008030 <USBH_FindInterface>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2bff      	cmp	r3, #255	; 0xff
 800776c:	d002      	beq.n	8007774 <USBH_CDC_InterfaceInit+0x24>
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d901      	bls.n	8007778 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007774:	2302      	movs	r3, #2
 8007776:	e13d      	b.n	80079f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fc3b 	bl	8007ff8 <USBH_SelectInterface>
 8007782:	4603      	mov	r3, r0
 8007784:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800778c:	2302      	movs	r3, #2
 800778e:	e131      	b.n	80079f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007796:	2050      	movs	r0, #80	; 0x50
 8007798:	f001 fb12 	bl	8008dc0 <malloc>
 800779c:	4603      	mov	r3, r0
 800779e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80077b0:	2302      	movs	r3, #2
 80077b2:	e11f      	b.n	80079f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80077b4:	2250      	movs	r2, #80	; 0x50
 80077b6:	2100      	movs	r1, #0
 80077b8:	68b8      	ldr	r0, [r7, #8]
 80077ba:	f001 fb11 	bl	8008de0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	211a      	movs	r1, #26
 80077c4:	fb01 f303 	mul.w	r3, r1, r3
 80077c8:	4413      	add	r3, r2
 80077ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	b25b      	sxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da15      	bge.n	8007802 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	211a      	movs	r1, #26
 80077dc:	fb01 f303 	mul.w	r3, r1, r3
 80077e0:	4413      	add	r3, r2
 80077e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077e6:	781a      	ldrb	r2, [r3, #0]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	211a      	movs	r1, #26
 80077f2:	fb01 f303 	mul.w	r3, r1, r3
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077fc:	881a      	ldrh	r2, [r3, #0]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	785b      	ldrb	r3, [r3, #1]
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 ff9c 	bl	8008746 <USBH_AllocPipe>
 800780e:	4603      	mov	r3, r0
 8007810:	461a      	mov	r2, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	7819      	ldrb	r1, [r3, #0]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	7858      	ldrb	r0, [r3, #1]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	8952      	ldrh	r2, [r2, #10]
 800782e:	9202      	str	r2, [sp, #8]
 8007830:	2203      	movs	r2, #3
 8007832:	9201      	str	r2, [sp, #4]
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	4623      	mov	r3, r4
 8007838:	4602      	mov	r2, r0
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 ff54 	bl	80086e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2200      	movs	r2, #0
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fa17 	bl	8008c7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800784e:	2300      	movs	r3, #0
 8007850:	2200      	movs	r2, #0
 8007852:	210a      	movs	r1, #10
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fbeb 	bl	8008030 <USBH_FindInterface>
 800785a:	4603      	mov	r3, r0
 800785c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	2bff      	cmp	r3, #255	; 0xff
 8007862:	d002      	beq.n	800786a <USBH_CDC_InterfaceInit+0x11a>
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d901      	bls.n	800786e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800786a:	2302      	movs	r3, #2
 800786c:	e0c2      	b.n	80079f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	211a      	movs	r1, #26
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	4413      	add	r3, r2
 800787a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	b25b      	sxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	da16      	bge.n	80078b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	211a      	movs	r1, #26
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	4413      	add	r3, r2
 8007892:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007896:	781a      	ldrb	r2, [r3, #0]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	211a      	movs	r1, #26
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078ac:	881a      	ldrh	r2, [r3, #0]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	835a      	strh	r2, [r3, #26]
 80078b2:	e015      	b.n	80078e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	211a      	movs	r1, #26
 80078ba:	fb01 f303 	mul.w	r3, r1, r3
 80078be:	4413      	add	r3, r2
 80078c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	211a      	movs	r1, #26
 80078d0:	fb01 f303 	mul.w	r3, r1, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078da:	881a      	ldrh	r2, [r3, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	211a      	movs	r1, #26
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	b25b      	sxtb	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	da16      	bge.n	8007926 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	211a      	movs	r1, #26
 80078fe:	fb01 f303 	mul.w	r3, r1, r3
 8007902:	4413      	add	r3, r2
 8007904:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007908:	781a      	ldrb	r2, [r3, #0]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	211a      	movs	r1, #26
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	4413      	add	r3, r2
 800791a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800791e:	881a      	ldrh	r2, [r3, #0]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	835a      	strh	r2, [r3, #26]
 8007924:	e015      	b.n	8007952 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	211a      	movs	r1, #26
 800792c:	fb01 f303 	mul.w	r3, r1, r3
 8007930:	4413      	add	r3, r2
 8007932:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007936:	781a      	ldrb	r2, [r3, #0]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	211a      	movs	r1, #26
 8007942:	fb01 f303 	mul.w	r3, r1, r3
 8007946:	4413      	add	r3, r2
 8007948:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800794c:	881a      	ldrh	r2, [r3, #0]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	7b9b      	ldrb	r3, [r3, #14]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fef4 	bl	8008746 <USBH_AllocPipe>
 800795e:	4603      	mov	r3, r0
 8007960:	461a      	mov	r2, r3
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	7bdb      	ldrb	r3, [r3, #15]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 feea 	bl	8008746 <USBH_AllocPipe>
 8007972:	4603      	mov	r3, r0
 8007974:	461a      	mov	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	7b59      	ldrb	r1, [r3, #13]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	7b98      	ldrb	r0, [r3, #14]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	8b12      	ldrh	r2, [r2, #24]
 8007992:	9202      	str	r2, [sp, #8]
 8007994:	2202      	movs	r2, #2
 8007996:	9201      	str	r2, [sp, #4]
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	4623      	mov	r3, r4
 800799c:	4602      	mov	r2, r0
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fea2 	bl	80086e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	7b19      	ldrb	r1, [r3, #12]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	7bd8      	ldrb	r0, [r3, #15]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	8b52      	ldrh	r2, [r2, #26]
 80079bc:	9202      	str	r2, [sp, #8]
 80079be:	2202      	movs	r2, #2
 80079c0:	9201      	str	r2, [sp, #4]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	4623      	mov	r3, r4
 80079c6:	4602      	mov	r2, r0
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fe8d 	bl	80086e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	7b5b      	ldrb	r3, [r3, #13]
 80079da:	2200      	movs	r2, #0
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 f94c 	bl	8008c7c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	7b1b      	ldrb	r3, [r3, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f945 	bl	8008c7c <USBH_LL_SetToggle>

  return USBH_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd90      	pop	{r4, r7, pc}

080079fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00e      	beq.n	8007a34 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fe82 	bl	8008726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fead 	bl	8008788 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	7b1b      	ldrb	r3, [r3, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00e      	beq.n	8007a5a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	7b1b      	ldrb	r3, [r3, #12]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fe6f 	bl	8008726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	7b1b      	ldrb	r3, [r3, #12]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fe9a 	bl	8008788 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	7b5b      	ldrb	r3, [r3, #13]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00e      	beq.n	8007a80 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	7b5b      	ldrb	r3, [r3, #13]
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fe5c 	bl	8008726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	7b5b      	ldrb	r3, [r3, #13]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fe87 	bl	8008788 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f001 f99b 	bl	8008dd0 <free>
    phost->pActiveClass->pData = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3340      	adds	r3, #64	; 0x40
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f8b1 	bl	8007c2e <GetLineCoding>
 8007acc:	4603      	mov	r3, r0
 8007ace:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d105      	bne.n	8007ae2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007adc:	2102      	movs	r1, #2
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007ae2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d877      	bhi.n	8007c00 <USBH_CDC_Process+0x114>
 8007b10:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <USBH_CDC_Process+0x2c>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007b2d 	.word	0x08007b2d
 8007b1c:	08007b33 	.word	0x08007b33
 8007b20:	08007b63 	.word	0x08007b63
 8007b24:	08007bd7 	.word	0x08007bd7
 8007b28:	08007be5 	.word	0x08007be5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b30:	e06d      	b.n	8007c0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f897 	bl	8007c6c <SetLineCoding>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d104      	bne.n	8007b52 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b50:	e058      	b.n	8007c04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d055      	beq.n	8007c04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007b60:	e050      	b.n	8007c04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	3340      	adds	r3, #64	; 0x40
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f860 	bl	8007c2e <GetLineCoding>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d126      	bne.n	8007bc6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b8a:	791b      	ldrb	r3, [r3, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d13b      	bne.n	8007c08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d133      	bne.n	8007c08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007baa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d12b      	bne.n	8007c08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d124      	bne.n	8007c08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f958 	bl	8007e74 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007bc4:	e020      	b.n	8007c08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d01d      	beq.n	8007c08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2204      	movs	r2, #4
 8007bd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007bd4:	e018      	b.n	8007c08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f867 	bl	8007caa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f8da 	bl	8007d96 <CDC_ProcessReception>
      break;
 8007be2:	e014      	b.n	8007c0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007be4:	2100      	movs	r1, #0
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fb08 	bl	80081fc <USBH_ClrFeature>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007bfe:	e005      	b.n	8007c0c <USBH_CDC_Process+0x120>

    default:
      break;
 8007c00:	bf00      	nop
 8007c02:	e004      	b.n	8007c0e <USBH_CDC_Process+0x122>
      break;
 8007c04:	bf00      	nop
 8007c06:	e002      	b.n	8007c0e <USBH_CDC_Process+0x122>
      break;
 8007c08:	bf00      	nop
 8007c0a:	e000      	b.n	8007c0e <USBH_CDC_Process+0x122>
      break;
 8007c0c:	bf00      	nop

  }

  return status;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	22a1      	movs	r2, #161	; 0xa1
 8007c3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2221      	movs	r2, #33	; 0x21
 8007c42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2207      	movs	r2, #7
 8007c54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2207      	movs	r2, #7
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 faf1 	bl	8008244 <USBH_CtlReq>
 8007c62:	4603      	mov	r3, r0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2221      	movs	r2, #33	; 0x21
 8007c7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2207      	movs	r2, #7
 8007c92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2207      	movs	r2, #7
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fad2 	bl	8008244 <USBH_CtlReq>
 8007ca0:	4603      	mov	r3, r0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b086      	sub	sp, #24
 8007cae:	af02      	add	r7, sp, #8
 8007cb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d002      	beq.n	8007cd0 <CDC_ProcessTransmission+0x26>
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d023      	beq.n	8007d16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007cce:	e05e      	b.n	8007d8e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	8b12      	ldrh	r2, [r2, #24]
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d90b      	bls.n	8007cf4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	69d9      	ldr	r1, [r3, #28]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8b1a      	ldrh	r2, [r3, #24]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	7b5b      	ldrb	r3, [r3, #13]
 8007ce8:	2001      	movs	r0, #1
 8007cea:	9000      	str	r0, [sp, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fcb8 	bl	8008662 <USBH_BulkSendData>
 8007cf2:	e00b      	b.n	8007d0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	7b5b      	ldrb	r3, [r3, #13]
 8007d02:	2001      	movs	r0, #1
 8007d04:	9000      	str	r0, [sp, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fcab 	bl	8008662 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d14:	e03b      	b.n	8007d8e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	7b5b      	ldrb	r3, [r3, #13]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 ff83 	bl	8008c28 <USBH_LL_GetURBState>
 8007d22:	4603      	mov	r3, r0
 8007d24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007d26:	7afb      	ldrb	r3, [r7, #11]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d128      	bne.n	8007d7e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	8b12      	ldrh	r2, [r2, #24]
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d90e      	bls.n	8007d56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	8b12      	ldrh	r2, [r2, #24]
 8007d40:	1a9a      	subs	r2, r3, r2
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	8b12      	ldrh	r2, [r2, #24]
 8007d4e:	441a      	add	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	61da      	str	r2, [r3, #28]
 8007d54:	e002      	b.n	8007d5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d6c:	e00e      	b.n	8007d8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f868 	bl	8007e4c <USBH_CDC_TransmitCallback>
      break;
 8007d7c:	e006      	b.n	8007d8c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007d7e:	7afb      	ldrb	r3, [r7, #11]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d103      	bne.n	8007d8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d8c:	bf00      	nop
  }
}
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b086      	sub	sp, #24
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007da8:	2300      	movs	r3, #0
 8007daa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d002      	beq.n	8007dbc <CDC_ProcessReception+0x26>
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d00e      	beq.n	8007dd8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007dba:	e043      	b.n	8007e44 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	6a19      	ldr	r1, [r3, #32]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	8b5a      	ldrh	r2, [r3, #26]
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	7b1b      	ldrb	r3, [r3, #12]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fc6f 	bl	80086ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2204      	movs	r2, #4
 8007dd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007dd6:	e035      	b.n	8007e44 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	7b1b      	ldrb	r3, [r3, #12]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 ff22 	bl	8008c28 <USBH_LL_GetURBState>
 8007de4:	4603      	mov	r3, r0
 8007de6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007de8:	7cfb      	ldrb	r3, [r7, #19]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d129      	bne.n	8007e42 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	7b1b      	ldrb	r3, [r3, #12]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fe85 	bl	8008b04 <USBH_LL_GetLastXferSize>
 8007dfa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d016      	beq.n	8007e34 <CDC_ProcessReception+0x9e>
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	8b5b      	ldrh	r3, [r3, #26]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d910      	bls.n	8007e34 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	1ad2      	subs	r2, r2, r3
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	6a1a      	ldr	r2, [r3, #32]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	441a      	add	r2, r3
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2203      	movs	r2, #3
 8007e2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007e32:	e006      	b.n	8007e42 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f80f 	bl	8007e60 <USBH_CDC_ReceiveCallback>
      break;
 8007e42:	bf00      	nop
  }
}
 8007e44:	bf00      	nop
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	4613      	mov	r3, r2
 8007e94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e029      	b.n	8007ef4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	79fa      	ldrb	r2, [r7, #7]
 8007ea4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 f81f 	bl	8007efc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fd97 	bl	8008a20 <USBH_LL_Init>

  return USBH_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	e009      	b.n	8007f22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	33e0      	adds	r3, #224	; 0xe0
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	2200      	movs	r2, #0
 8007f1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b0f      	cmp	r3, #15
 8007f26:	d9f2      	bls.n	8007f0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e009      	b.n	8007f42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f48:	d3f1      	bcc.n	8007f2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2240      	movs	r2, #64	; 0x40
 8007f6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d016      	beq.n	8007fe6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10e      	bne.n	8007fe0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fc8:	1c59      	adds	r1, r3, #1
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	33de      	adds	r3, #222	; 0xde
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
 8007fde:	e004      	b.n	8007fea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	73fb      	strb	r3, [r7, #15]
 8007fe4:	e001      	b.n	8007fea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	429a      	cmp	r2, r3
 8008012:	d204      	bcs.n	800801e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800801c:	e001      	b.n	8008022 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800801e:	2302      	movs	r3, #2
 8008020:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008022:	7bfb      	ldrb	r3, [r7, #15]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	4608      	mov	r0, r1
 800803a:	4611      	mov	r1, r2
 800803c:	461a      	mov	r2, r3
 800803e:	4603      	mov	r3, r0
 8008040:	70fb      	strb	r3, [r7, #3]
 8008042:	460b      	mov	r3, r1
 8008044:	70bb      	strb	r3, [r7, #2]
 8008046:	4613      	mov	r3, r2
 8008048:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800804e:	2300      	movs	r3, #0
 8008050:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008058:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800805a:	e025      	b.n	80080a8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	221a      	movs	r2, #26
 8008060:	fb02 f303 	mul.w	r3, r2, r3
 8008064:	3308      	adds	r3, #8
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	4413      	add	r3, r2
 800806a:	3302      	adds	r3, #2
 800806c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	795b      	ldrb	r3, [r3, #5]
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	429a      	cmp	r2, r3
 8008076:	d002      	beq.n	800807e <USBH_FindInterface+0x4e>
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	2bff      	cmp	r3, #255	; 0xff
 800807c:	d111      	bne.n	80080a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008082:	78ba      	ldrb	r2, [r7, #2]
 8008084:	429a      	cmp	r2, r3
 8008086:	d002      	beq.n	800808e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008088:	78bb      	ldrb	r3, [r7, #2]
 800808a:	2bff      	cmp	r3, #255	; 0xff
 800808c:	d109      	bne.n	80080a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008092:	787a      	ldrb	r2, [r7, #1]
 8008094:	429a      	cmp	r2, r3
 8008096:	d002      	beq.n	800809e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008098:	787b      	ldrb	r3, [r7, #1]
 800809a:	2bff      	cmp	r3, #255	; 0xff
 800809c:	d101      	bne.n	80080a2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	e006      	b.n	80080b0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	3301      	adds	r3, #1
 80080a6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d9d6      	bls.n	800805c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80080ae:	23ff      	movs	r3, #255	; 0xff
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	371c      	adds	r7, #28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fce7 	bl	8008a98 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80080ca:	2101      	movs	r1, #1
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fdbe 	bl	8008c4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f804 	bl	800811e <USBH_HandleSof>
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b0b      	cmp	r3, #11
 800812e:	d10a      	bne.n	8008146 <USBH_HandleSof+0x28>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
  }
}
 8008146:	bf00      	nop
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800815e:	bf00      	nop
}
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800817a:	bf00      	nop
}
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fc7a 	bl	8008ace <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	791b      	ldrb	r3, [r3, #4]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fad1 	bl	8008788 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	795b      	ldrb	r3, [r3, #5]
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 facb 	bl	8008788 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	789b      	ldrb	r3, [r3, #2]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d10f      	bne.n	8008230 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008222:	78fb      	ldrb	r3, [r7, #3]
 8008224:	b29a      	uxth	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008230:	2200      	movs	r2, #0
 8008232:	2100      	movs	r1, #0
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f805 	bl	8008244 <USBH_CtlReq>
 800823a:	4603      	mov	r3, r0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008252:	2301      	movs	r3, #1
 8008254:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	789b      	ldrb	r3, [r3, #2]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d002      	beq.n	8008264 <USBH_CtlReq+0x20>
 800825e:	2b02      	cmp	r3, #2
 8008260:	d00f      	beq.n	8008282 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008262:	e027      	b.n	80082b4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	88fa      	ldrh	r2, [r7, #6]
 800826e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2201      	movs	r2, #1
 8008274:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2202      	movs	r2, #2
 800827a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800827c:	2301      	movs	r3, #1
 800827e:	75fb      	strb	r3, [r7, #23]
      break;
 8008280:	e018      	b.n	80082b4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 f81c 	bl	80082c0 <USBH_HandleControl>
 8008288:	4603      	mov	r3, r0
 800828a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <USBH_CtlReq+0x54>
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	2b03      	cmp	r3, #3
 8008296:	d106      	bne.n	80082a6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	761a      	strb	r2, [r3, #24]
      break;
 80082a4:	e005      	b.n	80082b2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d102      	bne.n	80082b2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	709a      	strb	r2, [r3, #2]
      break;
 80082b2:	bf00      	nop
  }
  return status;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af02      	add	r7, sp, #8
 80082c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80082c8:	2301      	movs	r3, #1
 80082ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	7e1b      	ldrb	r3, [r3, #24]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	2b0a      	cmp	r3, #10
 80082d8:	f200 8156 	bhi.w	8008588 <USBH_HandleControl+0x2c8>
 80082dc:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <USBH_HandleControl+0x24>)
 80082de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	08008311 	.word	0x08008311
 80082e8:	0800832b 	.word	0x0800832b
 80082ec:	08008395 	.word	0x08008395
 80082f0:	080083bb 	.word	0x080083bb
 80082f4:	080083f3 	.word	0x080083f3
 80082f8:	0800841d 	.word	0x0800841d
 80082fc:	0800846f 	.word	0x0800846f
 8008300:	08008491 	.word	0x08008491
 8008304:	080084cd 	.word	0x080084cd
 8008308:	080084f3 	.word	0x080084f3
 800830c:	08008531 	.word	0x08008531
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f103 0110 	add.w	r1, r3, #16
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	795b      	ldrb	r3, [r3, #5]
 800831a:	461a      	mov	r2, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f943 	bl	80085a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2202      	movs	r2, #2
 8008326:	761a      	strb	r2, [r3, #24]
      break;
 8008328:	e139      	b.n	800859e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	795b      	ldrb	r3, [r3, #5]
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fc79 	bl	8008c28 <USBH_LL_GetURBState>
 8008336:	4603      	mov	r3, r0
 8008338:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d11e      	bne.n	800837e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	7c1b      	ldrb	r3, [r3, #16]
 8008344:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008348:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	8adb      	ldrh	r3, [r3, #22]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008352:	7b7b      	ldrb	r3, [r7, #13]
 8008354:	2b80      	cmp	r3, #128	; 0x80
 8008356:	d103      	bne.n	8008360 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2203      	movs	r2, #3
 800835c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800835e:	e115      	b.n	800858c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2205      	movs	r2, #5
 8008364:	761a      	strb	r2, [r3, #24]
      break;
 8008366:	e111      	b.n	800858c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008368:	7b7b      	ldrb	r3, [r7, #13]
 800836a:	2b80      	cmp	r3, #128	; 0x80
 800836c:	d103      	bne.n	8008376 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2209      	movs	r2, #9
 8008372:	761a      	strb	r2, [r3, #24]
      break;
 8008374:	e10a      	b.n	800858c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2207      	movs	r2, #7
 800837a:	761a      	strb	r2, [r3, #24]
      break;
 800837c:	e106      	b.n	800858c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	2b04      	cmp	r3, #4
 8008382:	d003      	beq.n	800838c <USBH_HandleControl+0xcc>
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b02      	cmp	r3, #2
 8008388:	f040 8100 	bne.w	800858c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	220b      	movs	r2, #11
 8008390:	761a      	strb	r2, [r3, #24]
      break;
 8008392:	e0fb      	b.n	800858c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800839a:	b29a      	uxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6899      	ldr	r1, [r3, #8]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	899a      	ldrh	r2, [r3, #12]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	791b      	ldrb	r3, [r3, #4]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f93a 	bl	8008626 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2204      	movs	r2, #4
 80083b6:	761a      	strb	r2, [r3, #24]
      break;
 80083b8:	e0f1      	b.n	800859e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	791b      	ldrb	r3, [r3, #4]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fc31 	bl	8008c28 <USBH_LL_GetURBState>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d102      	bne.n	80083d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2209      	movs	r2, #9
 80083d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b05      	cmp	r3, #5
 80083da:	d102      	bne.n	80083e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083dc:	2303      	movs	r3, #3
 80083de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083e0:	e0d6      	b.n	8008590 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	f040 80d3 	bne.w	8008590 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	220b      	movs	r2, #11
 80083ee:	761a      	strb	r2, [r3, #24]
      break;
 80083f0:	e0ce      	b.n	8008590 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6899      	ldr	r1, [r3, #8]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	899a      	ldrh	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	795b      	ldrb	r3, [r3, #5]
 80083fe:	2001      	movs	r0, #1
 8008400:	9000      	str	r0, [sp, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f8ea 	bl	80085dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800840e:	b29a      	uxth	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2206      	movs	r2, #6
 8008418:	761a      	strb	r2, [r3, #24]
      break;
 800841a:	e0c0      	b.n	800859e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	795b      	ldrb	r3, [r3, #5]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fc00 	bl	8008c28 <USBH_LL_GetURBState>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d103      	bne.n	800843a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2207      	movs	r2, #7
 8008436:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008438:	e0ac      	b.n	8008594 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b05      	cmp	r3, #5
 800843e:	d105      	bne.n	800844c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	220c      	movs	r2, #12
 8008444:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008446:	2303      	movs	r3, #3
 8008448:	73fb      	strb	r3, [r7, #15]
      break;
 800844a:	e0a3      	b.n	8008594 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d103      	bne.n	800845a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2205      	movs	r2, #5
 8008456:	761a      	strb	r2, [r3, #24]
      break;
 8008458:	e09c      	b.n	8008594 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800845a:	7bbb      	ldrb	r3, [r7, #14]
 800845c:	2b04      	cmp	r3, #4
 800845e:	f040 8099 	bne.w	8008594 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	220b      	movs	r2, #11
 8008466:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008468:	2302      	movs	r3, #2
 800846a:	73fb      	strb	r3, [r7, #15]
      break;
 800846c:	e092      	b.n	8008594 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	791b      	ldrb	r3, [r3, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	2100      	movs	r1, #0
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f8d5 	bl	8008626 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008482:	b29a      	uxth	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2208      	movs	r2, #8
 800848c:	761a      	strb	r2, [r3, #24]

      break;
 800848e:	e086      	b.n	800859e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	791b      	ldrb	r3, [r3, #4]
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fbc6 	bl	8008c28 <USBH_LL_GetURBState>
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d105      	bne.n	80084b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	220d      	movs	r2, #13
 80084aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084b0:	e072      	b.n	8008598 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d103      	bne.n	80084c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	220b      	movs	r2, #11
 80084bc:	761a      	strb	r2, [r3, #24]
      break;
 80084be:	e06b      	b.n	8008598 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	d168      	bne.n	8008598 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80084c6:	2303      	movs	r3, #3
 80084c8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ca:	e065      	b.n	8008598 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	795b      	ldrb	r3, [r3, #5]
 80084d0:	2201      	movs	r2, #1
 80084d2:	9200      	str	r2, [sp, #0]
 80084d4:	2200      	movs	r2, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f87f 	bl	80085dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	220a      	movs	r2, #10
 80084ee:	761a      	strb	r2, [r3, #24]
      break;
 80084f0:	e055      	b.n	800859e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	795b      	ldrb	r3, [r3, #5]
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fb95 	bl	8008c28 <USBH_LL_GetURBState>
 80084fe:	4603      	mov	r3, r0
 8008500:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d105      	bne.n	8008514 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	220d      	movs	r2, #13
 8008510:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008512:	e043      	b.n	800859c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d103      	bne.n	8008522 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2209      	movs	r2, #9
 800851e:	761a      	strb	r2, [r3, #24]
      break;
 8008520:	e03c      	b.n	800859c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b04      	cmp	r3, #4
 8008526:	d139      	bne.n	800859c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	220b      	movs	r2, #11
 800852c:	761a      	strb	r2, [r3, #24]
      break;
 800852e:	e035      	b.n	800859c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	7e5b      	ldrb	r3, [r3, #25]
 8008534:	3301      	adds	r3, #1
 8008536:	b2da      	uxtb	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	765a      	strb	r2, [r3, #25]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7e5b      	ldrb	r3, [r3, #25]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d806      	bhi.n	8008552 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008550:	e025      	b.n	800859e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008558:	2106      	movs	r1, #6
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	795b      	ldrb	r3, [r3, #5]
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f90c 	bl	8008788 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	791b      	ldrb	r3, [r3, #4]
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f906 	bl	8008788 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008582:	2302      	movs	r3, #2
 8008584:	73fb      	strb	r3, [r7, #15]
      break;
 8008586:	e00a      	b.n	800859e <USBH_HandleControl+0x2de>

    default:
      break;
 8008588:	bf00      	nop
 800858a:	e008      	b.n	800859e <USBH_HandleControl+0x2de>
      break;
 800858c:	bf00      	nop
 800858e:	e006      	b.n	800859e <USBH_HandleControl+0x2de>
      break;
 8008590:	bf00      	nop
 8008592:	e004      	b.n	800859e <USBH_HandleControl+0x2de>
      break;
 8008594:	bf00      	nop
 8008596:	e002      	b.n	800859e <USBH_HandleControl+0x2de>
      break;
 8008598:	bf00      	nop
 800859a:	e000      	b.n	800859e <USBH_HandleControl+0x2de>
      break;
 800859c:	bf00      	nop
  }

  return status;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af04      	add	r7, sp, #16
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085b6:	79f9      	ldrb	r1, [r7, #7]
 80085b8:	2300      	movs	r3, #0
 80085ba:	9303      	str	r3, [sp, #12]
 80085bc:	2308      	movs	r3, #8
 80085be:	9302      	str	r3, [sp, #8]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	9301      	str	r3, [sp, #4]
 80085c4:	2300      	movs	r3, #0
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	2300      	movs	r3, #0
 80085ca:	2200      	movs	r2, #0
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 fafa 	bl	8008bc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b088      	sub	sp, #32
 80085e0:	af04      	add	r7, sp, #16
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4611      	mov	r1, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	460b      	mov	r3, r1
 80085ec:	80fb      	strh	r3, [r7, #6]
 80085ee:	4613      	mov	r3, r2
 80085f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008600:	7979      	ldrb	r1, [r7, #5]
 8008602:	7e3b      	ldrb	r3, [r7, #24]
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	9302      	str	r3, [sp, #8]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	2301      	movs	r3, #1
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	2200      	movs	r2, #0
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 fad5 	bl	8008bc6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b088      	sub	sp, #32
 800862a:	af04      	add	r7, sp, #16
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	4611      	mov	r1, r2
 8008632:	461a      	mov	r2, r3
 8008634:	460b      	mov	r3, r1
 8008636:	80fb      	strh	r3, [r7, #6]
 8008638:	4613      	mov	r3, r2
 800863a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800863c:	7979      	ldrb	r1, [r7, #5]
 800863e:	2300      	movs	r3, #0
 8008640:	9303      	str	r3, [sp, #12]
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	9302      	str	r3, [sp, #8]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	2301      	movs	r3, #1
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	2201      	movs	r2, #1
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fab7 	bl	8008bc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008658:	2300      	movs	r3, #0

}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b088      	sub	sp, #32
 8008666:	af04      	add	r7, sp, #16
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	4611      	mov	r1, r2
 800866e:	461a      	mov	r2, r3
 8008670:	460b      	mov	r3, r1
 8008672:	80fb      	strh	r3, [r7, #6]
 8008674:	4613      	mov	r3, r2
 8008676:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008686:	7979      	ldrb	r1, [r7, #5]
 8008688:	7e3b      	ldrb	r3, [r7, #24]
 800868a:	9303      	str	r3, [sp, #12]
 800868c:	88fb      	ldrh	r3, [r7, #6]
 800868e:	9302      	str	r3, [sp, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	2301      	movs	r3, #1
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	2302      	movs	r3, #2
 800869a:	2200      	movs	r2, #0
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 fa92 	bl	8008bc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af04      	add	r7, sp, #16
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	4611      	mov	r1, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	460b      	mov	r3, r1
 80086bc:	80fb      	strh	r3, [r7, #6]
 80086be:	4613      	mov	r3, r2
 80086c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086c2:	7979      	ldrb	r1, [r7, #5]
 80086c4:	2300      	movs	r3, #0
 80086c6:	9303      	str	r3, [sp, #12]
 80086c8:	88fb      	ldrh	r3, [r7, #6]
 80086ca:	9302      	str	r3, [sp, #8]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	9301      	str	r3, [sp, #4]
 80086d0:	2301      	movs	r3, #1
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	2302      	movs	r3, #2
 80086d6:	2201      	movs	r2, #1
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 fa74 	bl	8008bc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af04      	add	r7, sp, #16
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	4608      	mov	r0, r1
 80086f2:	4611      	mov	r1, r2
 80086f4:	461a      	mov	r2, r3
 80086f6:	4603      	mov	r3, r0
 80086f8:	70fb      	strb	r3, [r7, #3]
 80086fa:	460b      	mov	r3, r1
 80086fc:	70bb      	strb	r3, [r7, #2]
 80086fe:	4613      	mov	r3, r2
 8008700:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008702:	7878      	ldrb	r0, [r7, #1]
 8008704:	78ba      	ldrb	r2, [r7, #2]
 8008706:	78f9      	ldrb	r1, [r7, #3]
 8008708:	8b3b      	ldrh	r3, [r7, #24]
 800870a:	9302      	str	r3, [sp, #8]
 800870c:	7d3b      	ldrb	r3, [r7, #20]
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	7c3b      	ldrb	r3, [r7, #16]
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	4603      	mov	r3, r0
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fa07 	bl	8008b2a <USBH_LL_OpenPipe>

  return USBH_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa26 	bl	8008b88 <USBH_LL_ClosePipe>

  return USBH_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	460b      	mov	r3, r1
 8008750:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f836 	bl	80087c4 <USBH_GetFreePipe>
 8008758:	4603      	mov	r3, r0
 800875a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800875c:	89fb      	ldrh	r3, [r7, #14]
 800875e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008762:	4293      	cmp	r3, r2
 8008764:	d00a      	beq.n	800877c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	89fb      	ldrh	r3, [r7, #14]
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	33e0      	adds	r3, #224	; 0xe0
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800877c:	89fb      	ldrh	r3, [r7, #14]
 800877e:	b2db      	uxtb	r3, r3
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	2b0f      	cmp	r3, #15
 8008798:	d80d      	bhi.n	80087b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	33e0      	adds	r3, #224	; 0xe0
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	33e0      	adds	r3, #224	; 0xe0
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
 80087d4:	e00f      	b.n	80087f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	33e0      	adds	r3, #224	; 0xe0
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	e007      	b.n	8008800 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	3301      	adds	r3, #1
 80087f4:	73fb      	strb	r3, [r7, #15]
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	2b0f      	cmp	r3, #15
 80087fa:	d9ec      	bls.n	80087d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80087fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008810:	2201      	movs	r2, #1
 8008812:	490e      	ldr	r1, [pc, #56]	; (800884c <MX_USB_HOST_Init+0x40>)
 8008814:	480e      	ldr	r0, [pc, #56]	; (8008850 <MX_USB_HOST_Init+0x44>)
 8008816:	f7ff fb37 	bl	8007e88 <USBH_Init>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008820:	f7f8 fef4 	bl	800160c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008824:	490b      	ldr	r1, [pc, #44]	; (8008854 <MX_USB_HOST_Init+0x48>)
 8008826:	480a      	ldr	r0, [pc, #40]	; (8008850 <MX_USB_HOST_Init+0x44>)
 8008828:	f7ff fbbc 	bl	8007fa4 <USBH_RegisterClass>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008832:	f7f8 feeb 	bl	800160c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008836:	4806      	ldr	r0, [pc, #24]	; (8008850 <MX_USB_HOST_Init+0x44>)
 8008838:	f7ff fc40 	bl	80080bc <USBH_Start>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008842:	f7f8 fee3 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008846:	bf00      	nop
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	08008859 	.word	0x08008859
 8008850:	20000240 	.word	0x20000240
 8008854:	2000000c 	.word	0x2000000c

08008858 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	3b01      	subs	r3, #1
 8008868:	2b04      	cmp	r3, #4
 800886a:	d819      	bhi.n	80088a0 <USBH_UserProcess+0x48>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <USBH_UserProcess+0x1c>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	080088a1 	.word	0x080088a1
 8008878:	08008891 	.word	0x08008891
 800887c:	080088a1 	.word	0x080088a1
 8008880:	08008899 	.word	0x08008899
 8008884:	08008889 	.word	0x08008889
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008888:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <USBH_UserProcess+0x58>)
 800888a:	2203      	movs	r2, #3
 800888c:	701a      	strb	r2, [r3, #0]
  break;
 800888e:	e008      	b.n	80088a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <USBH_UserProcess+0x58>)
 8008892:	2202      	movs	r2, #2
 8008894:	701a      	strb	r2, [r3, #0]
  break;
 8008896:	e004      	b.n	80088a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008898:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <USBH_UserProcess+0x58>)
 800889a:	2201      	movs	r2, #1
 800889c:	701a      	strb	r2, [r3, #0]
  break;
 800889e:	e000      	b.n	80088a2 <USBH_UserProcess+0x4a>

  default:
  break;
 80088a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80088a2:	bf00      	nop
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	20000618 	.word	0x20000618

080088b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08a      	sub	sp, #40	; 0x28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088bc:	f107 0314 	add.w	r3, r7, #20
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	605a      	str	r2, [r3, #4]
 80088c6:	609a      	str	r2, [r3, #8]
 80088c8:	60da      	str	r2, [r3, #12]
 80088ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088d4:	d147      	bne.n	8008966 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088d6:	2300      	movs	r3, #0
 80088d8:	613b      	str	r3, [r7, #16]
 80088da:	4b25      	ldr	r3, [pc, #148]	; (8008970 <HAL_HCD_MspInit+0xbc>)
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	4a24      	ldr	r2, [pc, #144]	; (8008970 <HAL_HCD_MspInit+0xbc>)
 80088e0:	f043 0301 	orr.w	r3, r3, #1
 80088e4:	6313      	str	r3, [r2, #48]	; 0x30
 80088e6:	4b22      	ldr	r3, [pc, #136]	; (8008970 <HAL_HCD_MspInit+0xbc>)
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	613b      	str	r3, [r7, #16]
 80088f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80088f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088fc:	2300      	movs	r3, #0
 80088fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008900:	f107 0314 	add.w	r3, r7, #20
 8008904:	4619      	mov	r1, r3
 8008906:	481b      	ldr	r0, [pc, #108]	; (8008974 <HAL_HCD_MspInit+0xc0>)
 8008908:	f7f9 ff3e 	bl	8002788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800890c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008912:	2302      	movs	r3, #2
 8008914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008916:	2300      	movs	r3, #0
 8008918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800891a:	2300      	movs	r3, #0
 800891c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800891e:	230a      	movs	r3, #10
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008922:	f107 0314 	add.w	r3, r7, #20
 8008926:	4619      	mov	r1, r3
 8008928:	4812      	ldr	r0, [pc, #72]	; (8008974 <HAL_HCD_MspInit+0xc0>)
 800892a:	f7f9 ff2d 	bl	8002788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800892e:	4b10      	ldr	r3, [pc, #64]	; (8008970 <HAL_HCD_MspInit+0xbc>)
 8008930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008932:	4a0f      	ldr	r2, [pc, #60]	; (8008970 <HAL_HCD_MspInit+0xbc>)
 8008934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008938:	6353      	str	r3, [r2, #52]	; 0x34
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <HAL_HCD_MspInit+0xbc>)
 8008940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008942:	4a0b      	ldr	r2, [pc, #44]	; (8008970 <HAL_HCD_MspInit+0xbc>)
 8008944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008948:	6453      	str	r3, [r2, #68]	; 0x44
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <HAL_HCD_MspInit+0xbc>)
 800894c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800894e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008956:	2200      	movs	r2, #0
 8008958:	2100      	movs	r1, #0
 800895a:	2043      	movs	r0, #67	; 0x43
 800895c:	f7f9 fedd 	bl	800271a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008960:	2043      	movs	r0, #67	; 0x43
 8008962:	f7f9 fef6 	bl	8002752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008966:	bf00      	nop
 8008968:	3728      	adds	r7, #40	; 0x28
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	40023800 	.word	0x40023800
 8008974:	40020000 	.word	0x40020000

08008978 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff fbb7 	bl	80080fa <USBH_LL_IncTimer>
}
 800898c:	bf00      	nop
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7ff fbef 	bl	8008186 <USBH_LL_Connect>
}
 80089a8:	bf00      	nop
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089be:	4618      	mov	r0, r3
 80089c0:	f7ff fbf8 	bl	80081b4 <USBH_LL_Disconnect>
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
 80089d8:	4613      	mov	r3, r2
 80089da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff fba9 	bl	800814e <USBH_LL_PortEnabled>
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7ff fba9 	bl	800816a <USBH_LL_PortDisabled>
}
 8008a18:	bf00      	nop
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d12a      	bne.n	8008a88 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a32:	4a18      	ldr	r2, [pc, #96]	; (8008a94 <USBH_LL_Init+0x74>)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a15      	ldr	r2, [pc, #84]	; (8008a94 <USBH_LL_Init+0x74>)
 8008a3e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a42:	4b14      	ldr	r3, [pc, #80]	; (8008a94 <USBH_LL_Init+0x74>)
 8008a44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a48:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a4a:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <USBH_LL_Init+0x74>)
 8008a4c:	2208      	movs	r2, #8
 8008a4e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a50:	4b10      	ldr	r3, [pc, #64]	; (8008a94 <USBH_LL_Init+0x74>)
 8008a52:	2201      	movs	r2, #1
 8008a54:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a56:	4b0f      	ldr	r3, [pc, #60]	; (8008a94 <USBH_LL_Init+0x74>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <USBH_LL_Init+0x74>)
 8008a5e:	2202      	movs	r2, #2
 8008a60:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a62:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <USBH_LL_Init+0x74>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a68:	480a      	ldr	r0, [pc, #40]	; (8008a94 <USBH_LL_Init+0x74>)
 8008a6a:	f7fa f842 	bl	8002af2 <HAL_HCD_Init>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a74:	f7f8 fdca 	bl	800160c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a78:	4806      	ldr	r0, [pc, #24]	; (8008a94 <USBH_LL_Init+0x74>)
 8008a7a:	f7fa fc18 	bl	80032ae <HAL_HCD_GetCurrentFrame>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7ff fb2a 	bl	80080dc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	2000061c 	.word	0x2000061c

08008a98 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fa fb95 	bl	80031de <HAL_HCD_Start>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f90e 	bl	8008cdc <USBH_Get_USB_Status>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fa fb9d 	bl	8003224 <HAL_HCD_Stop>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f8f3 	bl	8008cdc <USBH_Get_USB_Status>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fa fbb3 	bl	8003286 <HAL_HCD_HC_GetXferCount>
 8008b20:	4603      	mov	r3, r0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b2a:	b590      	push	{r4, r7, lr}
 8008b2c:	b089      	sub	sp, #36	; 0x24
 8008b2e:	af04      	add	r7, sp, #16
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	4608      	mov	r0, r1
 8008b34:	4611      	mov	r1, r2
 8008b36:	461a      	mov	r2, r3
 8008b38:	4603      	mov	r3, r0
 8008b3a:	70fb      	strb	r3, [r7, #3]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70bb      	strb	r3, [r7, #2]
 8008b40:	4613      	mov	r3, r2
 8008b42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b52:	787c      	ldrb	r4, [r7, #1]
 8008b54:	78ba      	ldrb	r2, [r7, #2]
 8008b56:	78f9      	ldrb	r1, [r7, #3]
 8008b58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b5a:	9302      	str	r3, [sp, #8]
 8008b5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	4623      	mov	r3, r4
 8008b6a:	f7fa f824 	bl	8002bb6 <HAL_HCD_HC_Init>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 f8b1 	bl	8008cdc <USBH_Get_USB_Status>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd90      	pop	{r4, r7, pc}

08008b88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fa f894 	bl	8002cd4 <HAL_HCD_HC_Halt>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f892 	bl	8008cdc <USBH_Get_USB_Status>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008bc6:	b590      	push	{r4, r7, lr}
 8008bc8:	b089      	sub	sp, #36	; 0x24
 8008bca:	af04      	add	r7, sp, #16
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	4608      	mov	r0, r1
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	70fb      	strb	r3, [r7, #3]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70bb      	strb	r3, [r7, #2]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bee:	787c      	ldrb	r4, [r7, #1]
 8008bf0:	78ba      	ldrb	r2, [r7, #2]
 8008bf2:	78f9      	ldrb	r1, [r7, #3]
 8008bf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bf8:	9303      	str	r3, [sp, #12]
 8008bfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bfc:	9302      	str	r3, [sp, #8]
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	4623      	mov	r3, r4
 8008c0a:	f7fa f887 	bl	8002d1c <HAL_HCD_HC_SubmitRequest>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 f861 	bl	8008cdc <USBH_Get_USB_Status>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd90      	pop	{r4, r7, pc}

08008c28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c3a:	78fa      	ldrb	r2, [r7, #3]
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fa fb0d 	bl	800325e <HAL_HCD_HC_GetURBState>
 8008c44:	4603      	mov	r3, r0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	460b      	mov	r3, r1
 8008c58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d103      	bne.n	8008c6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 f864 	bl	8008d34 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c6c:	20c8      	movs	r0, #200	; 0xc8
 8008c6e:	f7f9 f855 	bl	8001d1c <HAL_Delay>
  return USBH_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	212c      	movs	r1, #44	; 0x2c
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	333b      	adds	r3, #59	; 0x3b
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d009      	beq.n	8008cbc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	212c      	movs	r1, #44	; 0x2c
 8008cae:	fb01 f303 	mul.w	r3, r1, r3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	3354      	adds	r3, #84	; 0x54
 8008cb6:	78ba      	ldrb	r2, [r7, #2]
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	e008      	b.n	8008cce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	212c      	movs	r1, #44	; 0x2c
 8008cc2:	fb01 f303 	mul.w	r3, r1, r3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3355      	adds	r3, #85	; 0x55
 8008cca:	78ba      	ldrb	r2, [r7, #2]
 8008ccc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d817      	bhi.n	8008d20 <USBH_Get_USB_Status+0x44>
 8008cf0:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <USBH_Get_USB_Status+0x1c>)
 8008cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf6:	bf00      	nop
 8008cf8:	08008d09 	.word	0x08008d09
 8008cfc:	08008d0f 	.word	0x08008d0f
 8008d00:	08008d15 	.word	0x08008d15
 8008d04:	08008d1b 	.word	0x08008d1b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0c:	e00b      	b.n	8008d26 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	73fb      	strb	r3, [r7, #15]
    break;
 8008d12:	e008      	b.n	8008d26 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d14:	2301      	movs	r3, #1
 8008d16:	73fb      	strb	r3, [r7, #15]
    break;
 8008d18:	e005      	b.n	8008d26 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1e:	e002      	b.n	8008d26 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d20:	2302      	movs	r3, #2
 8008d22:	73fb      	strb	r3, [r7, #15]
    break;
 8008d24:	bf00      	nop
  }
  return usb_status;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d102      	bne.n	8008d4e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
 8008d4c:	e001      	b.n	8008d52 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	461a      	mov	r2, r3
 8008d56:	2101      	movs	r1, #1
 8008d58:	4803      	ldr	r0, [pc, #12]	; (8008d68 <MX_DriverVbusFS+0x34>)
 8008d5a:	f7f9 feb1 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 8008d5e:	bf00      	nop
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	40020800 	.word	0x40020800

08008d6c <__errno>:
 8008d6c:	4b01      	ldr	r3, [pc, #4]	; (8008d74 <__errno+0x8>)
 8008d6e:	6818      	ldr	r0, [r3, #0]
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	2000002c 	.word	0x2000002c

08008d78 <__libc_init_array>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	4d0d      	ldr	r5, [pc, #52]	; (8008db0 <__libc_init_array+0x38>)
 8008d7c:	4c0d      	ldr	r4, [pc, #52]	; (8008db4 <__libc_init_array+0x3c>)
 8008d7e:	1b64      	subs	r4, r4, r5
 8008d80:	10a4      	asrs	r4, r4, #2
 8008d82:	2600      	movs	r6, #0
 8008d84:	42a6      	cmp	r6, r4
 8008d86:	d109      	bne.n	8008d9c <__libc_init_array+0x24>
 8008d88:	4d0b      	ldr	r5, [pc, #44]	; (8008db8 <__libc_init_array+0x40>)
 8008d8a:	4c0c      	ldr	r4, [pc, #48]	; (8008dbc <__libc_init_array+0x44>)
 8008d8c:	f001 f860 	bl	8009e50 <_init>
 8008d90:	1b64      	subs	r4, r4, r5
 8008d92:	10a4      	asrs	r4, r4, #2
 8008d94:	2600      	movs	r6, #0
 8008d96:	42a6      	cmp	r6, r4
 8008d98:	d105      	bne.n	8008da6 <__libc_init_array+0x2e>
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da0:	4798      	blx	r3
 8008da2:	3601      	adds	r6, #1
 8008da4:	e7ee      	b.n	8008d84 <__libc_init_array+0xc>
 8008da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008daa:	4798      	blx	r3
 8008dac:	3601      	adds	r6, #1
 8008dae:	e7f2      	b.n	8008d96 <__libc_init_array+0x1e>
 8008db0:	08009fd4 	.word	0x08009fd4
 8008db4:	08009fd4 	.word	0x08009fd4
 8008db8:	08009fd4 	.word	0x08009fd4
 8008dbc:	08009fd8 	.word	0x08009fd8

08008dc0 <malloc>:
 8008dc0:	4b02      	ldr	r3, [pc, #8]	; (8008dcc <malloc+0xc>)
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	f000 b87f 	b.w	8008ec8 <_malloc_r>
 8008dca:	bf00      	nop
 8008dcc:	2000002c 	.word	0x2000002c

08008dd0 <free>:
 8008dd0:	4b02      	ldr	r3, [pc, #8]	; (8008ddc <free+0xc>)
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	6818      	ldr	r0, [r3, #0]
 8008dd6:	f000 b80b 	b.w	8008df0 <_free_r>
 8008dda:	bf00      	nop
 8008ddc:	2000002c 	.word	0x2000002c

08008de0 <memset>:
 8008de0:	4402      	add	r2, r0
 8008de2:	4603      	mov	r3, r0
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d100      	bne.n	8008dea <memset+0xa>
 8008de8:	4770      	bx	lr
 8008dea:	f803 1b01 	strb.w	r1, [r3], #1
 8008dee:	e7f9      	b.n	8008de4 <memset+0x4>

08008df0 <_free_r>:
 8008df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df2:	2900      	cmp	r1, #0
 8008df4:	d044      	beq.n	8008e80 <_free_r+0x90>
 8008df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dfa:	9001      	str	r0, [sp, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f1a1 0404 	sub.w	r4, r1, #4
 8008e02:	bfb8      	it	lt
 8008e04:	18e4      	addlt	r4, r4, r3
 8008e06:	f000 f951 	bl	80090ac <__malloc_lock>
 8008e0a:	4a1e      	ldr	r2, [pc, #120]	; (8008e84 <_free_r+0x94>)
 8008e0c:	9801      	ldr	r0, [sp, #4]
 8008e0e:	6813      	ldr	r3, [r2, #0]
 8008e10:	b933      	cbnz	r3, 8008e20 <_free_r+0x30>
 8008e12:	6063      	str	r3, [r4, #4]
 8008e14:	6014      	str	r4, [r2, #0]
 8008e16:	b003      	add	sp, #12
 8008e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e1c:	f000 b94c 	b.w	80090b8 <__malloc_unlock>
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	d908      	bls.n	8008e36 <_free_r+0x46>
 8008e24:	6825      	ldr	r5, [r4, #0]
 8008e26:	1961      	adds	r1, r4, r5
 8008e28:	428b      	cmp	r3, r1
 8008e2a:	bf01      	itttt	eq
 8008e2c:	6819      	ldreq	r1, [r3, #0]
 8008e2e:	685b      	ldreq	r3, [r3, #4]
 8008e30:	1949      	addeq	r1, r1, r5
 8008e32:	6021      	streq	r1, [r4, #0]
 8008e34:	e7ed      	b.n	8008e12 <_free_r+0x22>
 8008e36:	461a      	mov	r2, r3
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	b10b      	cbz	r3, 8008e40 <_free_r+0x50>
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	d9fa      	bls.n	8008e36 <_free_r+0x46>
 8008e40:	6811      	ldr	r1, [r2, #0]
 8008e42:	1855      	adds	r5, r2, r1
 8008e44:	42a5      	cmp	r5, r4
 8008e46:	d10b      	bne.n	8008e60 <_free_r+0x70>
 8008e48:	6824      	ldr	r4, [r4, #0]
 8008e4a:	4421      	add	r1, r4
 8008e4c:	1854      	adds	r4, r2, r1
 8008e4e:	42a3      	cmp	r3, r4
 8008e50:	6011      	str	r1, [r2, #0]
 8008e52:	d1e0      	bne.n	8008e16 <_free_r+0x26>
 8008e54:	681c      	ldr	r4, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	6053      	str	r3, [r2, #4]
 8008e5a:	4421      	add	r1, r4
 8008e5c:	6011      	str	r1, [r2, #0]
 8008e5e:	e7da      	b.n	8008e16 <_free_r+0x26>
 8008e60:	d902      	bls.n	8008e68 <_free_r+0x78>
 8008e62:	230c      	movs	r3, #12
 8008e64:	6003      	str	r3, [r0, #0]
 8008e66:	e7d6      	b.n	8008e16 <_free_r+0x26>
 8008e68:	6825      	ldr	r5, [r4, #0]
 8008e6a:	1961      	adds	r1, r4, r5
 8008e6c:	428b      	cmp	r3, r1
 8008e6e:	bf04      	itt	eq
 8008e70:	6819      	ldreq	r1, [r3, #0]
 8008e72:	685b      	ldreq	r3, [r3, #4]
 8008e74:	6063      	str	r3, [r4, #4]
 8008e76:	bf04      	itt	eq
 8008e78:	1949      	addeq	r1, r1, r5
 8008e7a:	6021      	streq	r1, [r4, #0]
 8008e7c:	6054      	str	r4, [r2, #4]
 8008e7e:	e7ca      	b.n	8008e16 <_free_r+0x26>
 8008e80:	b003      	add	sp, #12
 8008e82:	bd30      	pop	{r4, r5, pc}
 8008e84:	20000920 	.word	0x20000920

08008e88 <sbrk_aligned>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	4e0e      	ldr	r6, [pc, #56]	; (8008ec4 <sbrk_aligned+0x3c>)
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	6831      	ldr	r1, [r6, #0]
 8008e90:	4605      	mov	r5, r0
 8008e92:	b911      	cbnz	r1, 8008e9a <sbrk_aligned+0x12>
 8008e94:	f000 f8ca 	bl	800902c <_sbrk_r>
 8008e98:	6030      	str	r0, [r6, #0]
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f000 f8c5 	bl	800902c <_sbrk_r>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d00a      	beq.n	8008ebc <sbrk_aligned+0x34>
 8008ea6:	1cc4      	adds	r4, r0, #3
 8008ea8:	f024 0403 	bic.w	r4, r4, #3
 8008eac:	42a0      	cmp	r0, r4
 8008eae:	d007      	beq.n	8008ec0 <sbrk_aligned+0x38>
 8008eb0:	1a21      	subs	r1, r4, r0
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f000 f8ba 	bl	800902c <_sbrk_r>
 8008eb8:	3001      	adds	r0, #1
 8008eba:	d101      	bne.n	8008ec0 <sbrk_aligned+0x38>
 8008ebc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	20000924 	.word	0x20000924

08008ec8 <_malloc_r>:
 8008ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ecc:	1ccd      	adds	r5, r1, #3
 8008ece:	f025 0503 	bic.w	r5, r5, #3
 8008ed2:	3508      	adds	r5, #8
 8008ed4:	2d0c      	cmp	r5, #12
 8008ed6:	bf38      	it	cc
 8008ed8:	250c      	movcc	r5, #12
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	4607      	mov	r7, r0
 8008ede:	db01      	blt.n	8008ee4 <_malloc_r+0x1c>
 8008ee0:	42a9      	cmp	r1, r5
 8008ee2:	d905      	bls.n	8008ef0 <_malloc_r+0x28>
 8008ee4:	230c      	movs	r3, #12
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	2600      	movs	r6, #0
 8008eea:	4630      	mov	r0, r6
 8008eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef0:	4e2e      	ldr	r6, [pc, #184]	; (8008fac <_malloc_r+0xe4>)
 8008ef2:	f000 f8db 	bl	80090ac <__malloc_lock>
 8008ef6:	6833      	ldr	r3, [r6, #0]
 8008ef8:	461c      	mov	r4, r3
 8008efa:	bb34      	cbnz	r4, 8008f4a <_malloc_r+0x82>
 8008efc:	4629      	mov	r1, r5
 8008efe:	4638      	mov	r0, r7
 8008f00:	f7ff ffc2 	bl	8008e88 <sbrk_aligned>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	4604      	mov	r4, r0
 8008f08:	d14d      	bne.n	8008fa6 <_malloc_r+0xde>
 8008f0a:	6834      	ldr	r4, [r6, #0]
 8008f0c:	4626      	mov	r6, r4
 8008f0e:	2e00      	cmp	r6, #0
 8008f10:	d140      	bne.n	8008f94 <_malloc_r+0xcc>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	4631      	mov	r1, r6
 8008f16:	4638      	mov	r0, r7
 8008f18:	eb04 0803 	add.w	r8, r4, r3
 8008f1c:	f000 f886 	bl	800902c <_sbrk_r>
 8008f20:	4580      	cmp	r8, r0
 8008f22:	d13a      	bne.n	8008f9a <_malloc_r+0xd2>
 8008f24:	6821      	ldr	r1, [r4, #0]
 8008f26:	3503      	adds	r5, #3
 8008f28:	1a6d      	subs	r5, r5, r1
 8008f2a:	f025 0503 	bic.w	r5, r5, #3
 8008f2e:	3508      	adds	r5, #8
 8008f30:	2d0c      	cmp	r5, #12
 8008f32:	bf38      	it	cc
 8008f34:	250c      	movcc	r5, #12
 8008f36:	4629      	mov	r1, r5
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f7ff ffa5 	bl	8008e88 <sbrk_aligned>
 8008f3e:	3001      	adds	r0, #1
 8008f40:	d02b      	beq.n	8008f9a <_malloc_r+0xd2>
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	442b      	add	r3, r5
 8008f46:	6023      	str	r3, [r4, #0]
 8008f48:	e00e      	b.n	8008f68 <_malloc_r+0xa0>
 8008f4a:	6822      	ldr	r2, [r4, #0]
 8008f4c:	1b52      	subs	r2, r2, r5
 8008f4e:	d41e      	bmi.n	8008f8e <_malloc_r+0xc6>
 8008f50:	2a0b      	cmp	r2, #11
 8008f52:	d916      	bls.n	8008f82 <_malloc_r+0xba>
 8008f54:	1961      	adds	r1, r4, r5
 8008f56:	42a3      	cmp	r3, r4
 8008f58:	6025      	str	r5, [r4, #0]
 8008f5a:	bf18      	it	ne
 8008f5c:	6059      	strne	r1, [r3, #4]
 8008f5e:	6863      	ldr	r3, [r4, #4]
 8008f60:	bf08      	it	eq
 8008f62:	6031      	streq	r1, [r6, #0]
 8008f64:	5162      	str	r2, [r4, r5]
 8008f66:	604b      	str	r3, [r1, #4]
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f104 060b 	add.w	r6, r4, #11
 8008f6e:	f000 f8a3 	bl	80090b8 <__malloc_unlock>
 8008f72:	f026 0607 	bic.w	r6, r6, #7
 8008f76:	1d23      	adds	r3, r4, #4
 8008f78:	1af2      	subs	r2, r6, r3
 8008f7a:	d0b6      	beq.n	8008eea <_malloc_r+0x22>
 8008f7c:	1b9b      	subs	r3, r3, r6
 8008f7e:	50a3      	str	r3, [r4, r2]
 8008f80:	e7b3      	b.n	8008eea <_malloc_r+0x22>
 8008f82:	6862      	ldr	r2, [r4, #4]
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	bf0c      	ite	eq
 8008f88:	6032      	streq	r2, [r6, #0]
 8008f8a:	605a      	strne	r2, [r3, #4]
 8008f8c:	e7ec      	b.n	8008f68 <_malloc_r+0xa0>
 8008f8e:	4623      	mov	r3, r4
 8008f90:	6864      	ldr	r4, [r4, #4]
 8008f92:	e7b2      	b.n	8008efa <_malloc_r+0x32>
 8008f94:	4634      	mov	r4, r6
 8008f96:	6876      	ldr	r6, [r6, #4]
 8008f98:	e7b9      	b.n	8008f0e <_malloc_r+0x46>
 8008f9a:	230c      	movs	r3, #12
 8008f9c:	603b      	str	r3, [r7, #0]
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	f000 f88a 	bl	80090b8 <__malloc_unlock>
 8008fa4:	e7a1      	b.n	8008eea <_malloc_r+0x22>
 8008fa6:	6025      	str	r5, [r4, #0]
 8008fa8:	e7de      	b.n	8008f68 <_malloc_r+0xa0>
 8008faa:	bf00      	nop
 8008fac:	20000920 	.word	0x20000920

08008fb0 <rand>:
 8008fb0:	4b16      	ldr	r3, [pc, #88]	; (800900c <rand+0x5c>)
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	681c      	ldr	r4, [r3, #0]
 8008fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008fb8:	b9b3      	cbnz	r3, 8008fe8 <rand+0x38>
 8008fba:	2018      	movs	r0, #24
 8008fbc:	f7ff ff00 	bl	8008dc0 <malloc>
 8008fc0:	63a0      	str	r0, [r4, #56]	; 0x38
 8008fc2:	b928      	cbnz	r0, 8008fd0 <rand+0x20>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	4b12      	ldr	r3, [pc, #72]	; (8009010 <rand+0x60>)
 8008fc8:	4812      	ldr	r0, [pc, #72]	; (8009014 <rand+0x64>)
 8008fca:	214e      	movs	r1, #78	; 0x4e
 8008fcc:	f000 f83e 	bl	800904c <__assert_func>
 8008fd0:	4a11      	ldr	r2, [pc, #68]	; (8009018 <rand+0x68>)
 8008fd2:	4b12      	ldr	r3, [pc, #72]	; (800901c <rand+0x6c>)
 8008fd4:	e9c0 2300 	strd	r2, r3, [r0]
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <rand+0x70>)
 8008fda:	6083      	str	r3, [r0, #8]
 8008fdc:	230b      	movs	r3, #11
 8008fde:	8183      	strh	r3, [r0, #12]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008fe8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8008fea:	4a0e      	ldr	r2, [pc, #56]	; (8009024 <rand+0x74>)
 8008fec:	6920      	ldr	r0, [r4, #16]
 8008fee:	6963      	ldr	r3, [r4, #20]
 8008ff0:	490d      	ldr	r1, [pc, #52]	; (8009028 <rand+0x78>)
 8008ff2:	4342      	muls	r2, r0
 8008ff4:	fb01 2203 	mla	r2, r1, r3, r2
 8008ff8:	fba0 0101 	umull	r0, r1, r0, r1
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	eb42 0001 	adc.w	r0, r2, r1
 8009002:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009006:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800900a:	bd10      	pop	{r4, pc}
 800900c:	2000002c 	.word	0x2000002c
 8009010:	08009e88 	.word	0x08009e88
 8009014:	08009e9f 	.word	0x08009e9f
 8009018:	abcd330e 	.word	0xabcd330e
 800901c:	e66d1234 	.word	0xe66d1234
 8009020:	0005deec 	.word	0x0005deec
 8009024:	5851f42d 	.word	0x5851f42d
 8009028:	4c957f2d 	.word	0x4c957f2d

0800902c <_sbrk_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d06      	ldr	r5, [pc, #24]	; (8009048 <_sbrk_r+0x1c>)
 8009030:	2300      	movs	r3, #0
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	f7f8 fd8c 	bl	8001b54 <_sbrk>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_sbrk_r+0x1a>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_sbrk_r+0x1a>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	20000928 	.word	0x20000928

0800904c <__assert_func>:
 800904c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800904e:	4614      	mov	r4, r2
 8009050:	461a      	mov	r2, r3
 8009052:	4b09      	ldr	r3, [pc, #36]	; (8009078 <__assert_func+0x2c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4605      	mov	r5, r0
 8009058:	68d8      	ldr	r0, [r3, #12]
 800905a:	b14c      	cbz	r4, 8009070 <__assert_func+0x24>
 800905c:	4b07      	ldr	r3, [pc, #28]	; (800907c <__assert_func+0x30>)
 800905e:	9100      	str	r1, [sp, #0]
 8009060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009064:	4906      	ldr	r1, [pc, #24]	; (8009080 <__assert_func+0x34>)
 8009066:	462b      	mov	r3, r5
 8009068:	f000 f80e 	bl	8009088 <fiprintf>
 800906c:	f000 fbd8 	bl	8009820 <abort>
 8009070:	4b04      	ldr	r3, [pc, #16]	; (8009084 <__assert_func+0x38>)
 8009072:	461c      	mov	r4, r3
 8009074:	e7f3      	b.n	800905e <__assert_func+0x12>
 8009076:	bf00      	nop
 8009078:	2000002c 	.word	0x2000002c
 800907c:	08009efa 	.word	0x08009efa
 8009080:	08009f07 	.word	0x08009f07
 8009084:	08009f35 	.word	0x08009f35

08009088 <fiprintf>:
 8009088:	b40e      	push	{r1, r2, r3}
 800908a:	b503      	push	{r0, r1, lr}
 800908c:	4601      	mov	r1, r0
 800908e:	ab03      	add	r3, sp, #12
 8009090:	4805      	ldr	r0, [pc, #20]	; (80090a8 <fiprintf+0x20>)
 8009092:	f853 2b04 	ldr.w	r2, [r3], #4
 8009096:	6800      	ldr	r0, [r0, #0]
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	f000 f83d 	bl	8009118 <_vfiprintf_r>
 800909e:	b002      	add	sp, #8
 80090a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090a4:	b003      	add	sp, #12
 80090a6:	4770      	bx	lr
 80090a8:	2000002c 	.word	0x2000002c

080090ac <__malloc_lock>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__malloc_lock+0x8>)
 80090ae:	f000 bd77 	b.w	8009ba0 <__retarget_lock_acquire_recursive>
 80090b2:	bf00      	nop
 80090b4:	2000092c 	.word	0x2000092c

080090b8 <__malloc_unlock>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__malloc_unlock+0x8>)
 80090ba:	f000 bd72 	b.w	8009ba2 <__retarget_lock_release_recursive>
 80090be:	bf00      	nop
 80090c0:	2000092c 	.word	0x2000092c

080090c4 <__sfputc_r>:
 80090c4:	6893      	ldr	r3, [r2, #8]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	b410      	push	{r4}
 80090cc:	6093      	str	r3, [r2, #8]
 80090ce:	da08      	bge.n	80090e2 <__sfputc_r+0x1e>
 80090d0:	6994      	ldr	r4, [r2, #24]
 80090d2:	42a3      	cmp	r3, r4
 80090d4:	db01      	blt.n	80090da <__sfputc_r+0x16>
 80090d6:	290a      	cmp	r1, #10
 80090d8:	d103      	bne.n	80090e2 <__sfputc_r+0x1e>
 80090da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090de:	f000 badf 	b.w	80096a0 <__swbuf_r>
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	1c58      	adds	r0, r3, #1
 80090e6:	6010      	str	r0, [r2, #0]
 80090e8:	7019      	strb	r1, [r3, #0]
 80090ea:	4608      	mov	r0, r1
 80090ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <__sfputs_r>:
 80090f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f4:	4606      	mov	r6, r0
 80090f6:	460f      	mov	r7, r1
 80090f8:	4614      	mov	r4, r2
 80090fa:	18d5      	adds	r5, r2, r3
 80090fc:	42ac      	cmp	r4, r5
 80090fe:	d101      	bne.n	8009104 <__sfputs_r+0x12>
 8009100:	2000      	movs	r0, #0
 8009102:	e007      	b.n	8009114 <__sfputs_r+0x22>
 8009104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009108:	463a      	mov	r2, r7
 800910a:	4630      	mov	r0, r6
 800910c:	f7ff ffda 	bl	80090c4 <__sfputc_r>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d1f3      	bne.n	80090fc <__sfputs_r+0xa>
 8009114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009118 <_vfiprintf_r>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	460d      	mov	r5, r1
 800911e:	b09d      	sub	sp, #116	; 0x74
 8009120:	4614      	mov	r4, r2
 8009122:	4698      	mov	r8, r3
 8009124:	4606      	mov	r6, r0
 8009126:	b118      	cbz	r0, 8009130 <_vfiprintf_r+0x18>
 8009128:	6983      	ldr	r3, [r0, #24]
 800912a:	b90b      	cbnz	r3, 8009130 <_vfiprintf_r+0x18>
 800912c:	f000 fc9a 	bl	8009a64 <__sinit>
 8009130:	4b89      	ldr	r3, [pc, #548]	; (8009358 <_vfiprintf_r+0x240>)
 8009132:	429d      	cmp	r5, r3
 8009134:	d11b      	bne.n	800916e <_vfiprintf_r+0x56>
 8009136:	6875      	ldr	r5, [r6, #4]
 8009138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800913a:	07d9      	lsls	r1, r3, #31
 800913c:	d405      	bmi.n	800914a <_vfiprintf_r+0x32>
 800913e:	89ab      	ldrh	r3, [r5, #12]
 8009140:	059a      	lsls	r2, r3, #22
 8009142:	d402      	bmi.n	800914a <_vfiprintf_r+0x32>
 8009144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009146:	f000 fd2b 	bl	8009ba0 <__retarget_lock_acquire_recursive>
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	071b      	lsls	r3, r3, #28
 800914e:	d501      	bpl.n	8009154 <_vfiprintf_r+0x3c>
 8009150:	692b      	ldr	r3, [r5, #16]
 8009152:	b9eb      	cbnz	r3, 8009190 <_vfiprintf_r+0x78>
 8009154:	4629      	mov	r1, r5
 8009156:	4630      	mov	r0, r6
 8009158:	f000 faf4 	bl	8009744 <__swsetup_r>
 800915c:	b1c0      	cbz	r0, 8009190 <_vfiprintf_r+0x78>
 800915e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009160:	07dc      	lsls	r4, r3, #31
 8009162:	d50e      	bpl.n	8009182 <_vfiprintf_r+0x6a>
 8009164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009168:	b01d      	add	sp, #116	; 0x74
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	4b7b      	ldr	r3, [pc, #492]	; (800935c <_vfiprintf_r+0x244>)
 8009170:	429d      	cmp	r5, r3
 8009172:	d101      	bne.n	8009178 <_vfiprintf_r+0x60>
 8009174:	68b5      	ldr	r5, [r6, #8]
 8009176:	e7df      	b.n	8009138 <_vfiprintf_r+0x20>
 8009178:	4b79      	ldr	r3, [pc, #484]	; (8009360 <_vfiprintf_r+0x248>)
 800917a:	429d      	cmp	r5, r3
 800917c:	bf08      	it	eq
 800917e:	68f5      	ldreq	r5, [r6, #12]
 8009180:	e7da      	b.n	8009138 <_vfiprintf_r+0x20>
 8009182:	89ab      	ldrh	r3, [r5, #12]
 8009184:	0598      	lsls	r0, r3, #22
 8009186:	d4ed      	bmi.n	8009164 <_vfiprintf_r+0x4c>
 8009188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800918a:	f000 fd0a 	bl	8009ba2 <__retarget_lock_release_recursive>
 800918e:	e7e9      	b.n	8009164 <_vfiprintf_r+0x4c>
 8009190:	2300      	movs	r3, #0
 8009192:	9309      	str	r3, [sp, #36]	; 0x24
 8009194:	2320      	movs	r3, #32
 8009196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800919a:	f8cd 800c 	str.w	r8, [sp, #12]
 800919e:	2330      	movs	r3, #48	; 0x30
 80091a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009364 <_vfiprintf_r+0x24c>
 80091a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091a8:	f04f 0901 	mov.w	r9, #1
 80091ac:	4623      	mov	r3, r4
 80091ae:	469a      	mov	sl, r3
 80091b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b4:	b10a      	cbz	r2, 80091ba <_vfiprintf_r+0xa2>
 80091b6:	2a25      	cmp	r2, #37	; 0x25
 80091b8:	d1f9      	bne.n	80091ae <_vfiprintf_r+0x96>
 80091ba:	ebba 0b04 	subs.w	fp, sl, r4
 80091be:	d00b      	beq.n	80091d8 <_vfiprintf_r+0xc0>
 80091c0:	465b      	mov	r3, fp
 80091c2:	4622      	mov	r2, r4
 80091c4:	4629      	mov	r1, r5
 80091c6:	4630      	mov	r0, r6
 80091c8:	f7ff ff93 	bl	80090f2 <__sfputs_r>
 80091cc:	3001      	adds	r0, #1
 80091ce:	f000 80aa 	beq.w	8009326 <_vfiprintf_r+0x20e>
 80091d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d4:	445a      	add	r2, fp
 80091d6:	9209      	str	r2, [sp, #36]	; 0x24
 80091d8:	f89a 3000 	ldrb.w	r3, [sl]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 80a2 	beq.w	8009326 <_vfiprintf_r+0x20e>
 80091e2:	2300      	movs	r3, #0
 80091e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ec:	f10a 0a01 	add.w	sl, sl, #1
 80091f0:	9304      	str	r3, [sp, #16]
 80091f2:	9307      	str	r3, [sp, #28]
 80091f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091f8:	931a      	str	r3, [sp, #104]	; 0x68
 80091fa:	4654      	mov	r4, sl
 80091fc:	2205      	movs	r2, #5
 80091fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009202:	4858      	ldr	r0, [pc, #352]	; (8009364 <_vfiprintf_r+0x24c>)
 8009204:	f7f6 ffe4 	bl	80001d0 <memchr>
 8009208:	9a04      	ldr	r2, [sp, #16]
 800920a:	b9d8      	cbnz	r0, 8009244 <_vfiprintf_r+0x12c>
 800920c:	06d1      	lsls	r1, r2, #27
 800920e:	bf44      	itt	mi
 8009210:	2320      	movmi	r3, #32
 8009212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009216:	0713      	lsls	r3, r2, #28
 8009218:	bf44      	itt	mi
 800921a:	232b      	movmi	r3, #43	; 0x2b
 800921c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009220:	f89a 3000 	ldrb.w	r3, [sl]
 8009224:	2b2a      	cmp	r3, #42	; 0x2a
 8009226:	d015      	beq.n	8009254 <_vfiprintf_r+0x13c>
 8009228:	9a07      	ldr	r2, [sp, #28]
 800922a:	4654      	mov	r4, sl
 800922c:	2000      	movs	r0, #0
 800922e:	f04f 0c0a 	mov.w	ip, #10
 8009232:	4621      	mov	r1, r4
 8009234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009238:	3b30      	subs	r3, #48	; 0x30
 800923a:	2b09      	cmp	r3, #9
 800923c:	d94e      	bls.n	80092dc <_vfiprintf_r+0x1c4>
 800923e:	b1b0      	cbz	r0, 800926e <_vfiprintf_r+0x156>
 8009240:	9207      	str	r2, [sp, #28]
 8009242:	e014      	b.n	800926e <_vfiprintf_r+0x156>
 8009244:	eba0 0308 	sub.w	r3, r0, r8
 8009248:	fa09 f303 	lsl.w	r3, r9, r3
 800924c:	4313      	orrs	r3, r2
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	46a2      	mov	sl, r4
 8009252:	e7d2      	b.n	80091fa <_vfiprintf_r+0xe2>
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	1d19      	adds	r1, r3, #4
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	9103      	str	r1, [sp, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	bfbb      	ittet	lt
 8009260:	425b      	neglt	r3, r3
 8009262:	f042 0202 	orrlt.w	r2, r2, #2
 8009266:	9307      	strge	r3, [sp, #28]
 8009268:	9307      	strlt	r3, [sp, #28]
 800926a:	bfb8      	it	lt
 800926c:	9204      	strlt	r2, [sp, #16]
 800926e:	7823      	ldrb	r3, [r4, #0]
 8009270:	2b2e      	cmp	r3, #46	; 0x2e
 8009272:	d10c      	bne.n	800928e <_vfiprintf_r+0x176>
 8009274:	7863      	ldrb	r3, [r4, #1]
 8009276:	2b2a      	cmp	r3, #42	; 0x2a
 8009278:	d135      	bne.n	80092e6 <_vfiprintf_r+0x1ce>
 800927a:	9b03      	ldr	r3, [sp, #12]
 800927c:	1d1a      	adds	r2, r3, #4
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	9203      	str	r2, [sp, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	bfb8      	it	lt
 8009286:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800928a:	3402      	adds	r4, #2
 800928c:	9305      	str	r3, [sp, #20]
 800928e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009374 <_vfiprintf_r+0x25c>
 8009292:	7821      	ldrb	r1, [r4, #0]
 8009294:	2203      	movs	r2, #3
 8009296:	4650      	mov	r0, sl
 8009298:	f7f6 ff9a 	bl	80001d0 <memchr>
 800929c:	b140      	cbz	r0, 80092b0 <_vfiprintf_r+0x198>
 800929e:	2340      	movs	r3, #64	; 0x40
 80092a0:	eba0 000a 	sub.w	r0, r0, sl
 80092a4:	fa03 f000 	lsl.w	r0, r3, r0
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	4303      	orrs	r3, r0
 80092ac:	3401      	adds	r4, #1
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b4:	482c      	ldr	r0, [pc, #176]	; (8009368 <_vfiprintf_r+0x250>)
 80092b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092ba:	2206      	movs	r2, #6
 80092bc:	f7f6 ff88 	bl	80001d0 <memchr>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d03f      	beq.n	8009344 <_vfiprintf_r+0x22c>
 80092c4:	4b29      	ldr	r3, [pc, #164]	; (800936c <_vfiprintf_r+0x254>)
 80092c6:	bb1b      	cbnz	r3, 8009310 <_vfiprintf_r+0x1f8>
 80092c8:	9b03      	ldr	r3, [sp, #12]
 80092ca:	3307      	adds	r3, #7
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	3308      	adds	r3, #8
 80092d2:	9303      	str	r3, [sp, #12]
 80092d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d6:	443b      	add	r3, r7
 80092d8:	9309      	str	r3, [sp, #36]	; 0x24
 80092da:	e767      	b.n	80091ac <_vfiprintf_r+0x94>
 80092dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e0:	460c      	mov	r4, r1
 80092e2:	2001      	movs	r0, #1
 80092e4:	e7a5      	b.n	8009232 <_vfiprintf_r+0x11a>
 80092e6:	2300      	movs	r3, #0
 80092e8:	3401      	adds	r4, #1
 80092ea:	9305      	str	r3, [sp, #20]
 80092ec:	4619      	mov	r1, r3
 80092ee:	f04f 0c0a 	mov.w	ip, #10
 80092f2:	4620      	mov	r0, r4
 80092f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f8:	3a30      	subs	r2, #48	; 0x30
 80092fa:	2a09      	cmp	r2, #9
 80092fc:	d903      	bls.n	8009306 <_vfiprintf_r+0x1ee>
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d0c5      	beq.n	800928e <_vfiprintf_r+0x176>
 8009302:	9105      	str	r1, [sp, #20]
 8009304:	e7c3      	b.n	800928e <_vfiprintf_r+0x176>
 8009306:	fb0c 2101 	mla	r1, ip, r1, r2
 800930a:	4604      	mov	r4, r0
 800930c:	2301      	movs	r3, #1
 800930e:	e7f0      	b.n	80092f2 <_vfiprintf_r+0x1da>
 8009310:	ab03      	add	r3, sp, #12
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	462a      	mov	r2, r5
 8009316:	4b16      	ldr	r3, [pc, #88]	; (8009370 <_vfiprintf_r+0x258>)
 8009318:	a904      	add	r1, sp, #16
 800931a:	4630      	mov	r0, r6
 800931c:	f3af 8000 	nop.w
 8009320:	4607      	mov	r7, r0
 8009322:	1c78      	adds	r0, r7, #1
 8009324:	d1d6      	bne.n	80092d4 <_vfiprintf_r+0x1bc>
 8009326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009328:	07d9      	lsls	r1, r3, #31
 800932a:	d405      	bmi.n	8009338 <_vfiprintf_r+0x220>
 800932c:	89ab      	ldrh	r3, [r5, #12]
 800932e:	059a      	lsls	r2, r3, #22
 8009330:	d402      	bmi.n	8009338 <_vfiprintf_r+0x220>
 8009332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009334:	f000 fc35 	bl	8009ba2 <__retarget_lock_release_recursive>
 8009338:	89ab      	ldrh	r3, [r5, #12]
 800933a:	065b      	lsls	r3, r3, #25
 800933c:	f53f af12 	bmi.w	8009164 <_vfiprintf_r+0x4c>
 8009340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009342:	e711      	b.n	8009168 <_vfiprintf_r+0x50>
 8009344:	ab03      	add	r3, sp, #12
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	462a      	mov	r2, r5
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <_vfiprintf_r+0x258>)
 800934c:	a904      	add	r1, sp, #16
 800934e:	4630      	mov	r0, r6
 8009350:	f000 f880 	bl	8009454 <_printf_i>
 8009354:	e7e4      	b.n	8009320 <_vfiprintf_r+0x208>
 8009356:	bf00      	nop
 8009358:	08009f8c 	.word	0x08009f8c
 800935c:	08009fac 	.word	0x08009fac
 8009360:	08009f6c 	.word	0x08009f6c
 8009364:	08009f36 	.word	0x08009f36
 8009368:	08009f40 	.word	0x08009f40
 800936c:	00000000 	.word	0x00000000
 8009370:	080090f3 	.word	0x080090f3
 8009374:	08009f3c 	.word	0x08009f3c

08009378 <_printf_common>:
 8009378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800937c:	4616      	mov	r6, r2
 800937e:	4699      	mov	r9, r3
 8009380:	688a      	ldr	r2, [r1, #8]
 8009382:	690b      	ldr	r3, [r1, #16]
 8009384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009388:	4293      	cmp	r3, r2
 800938a:	bfb8      	it	lt
 800938c:	4613      	movlt	r3, r2
 800938e:	6033      	str	r3, [r6, #0]
 8009390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009394:	4607      	mov	r7, r0
 8009396:	460c      	mov	r4, r1
 8009398:	b10a      	cbz	r2, 800939e <_printf_common+0x26>
 800939a:	3301      	adds	r3, #1
 800939c:	6033      	str	r3, [r6, #0]
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	0699      	lsls	r1, r3, #26
 80093a2:	bf42      	ittt	mi
 80093a4:	6833      	ldrmi	r3, [r6, #0]
 80093a6:	3302      	addmi	r3, #2
 80093a8:	6033      	strmi	r3, [r6, #0]
 80093aa:	6825      	ldr	r5, [r4, #0]
 80093ac:	f015 0506 	ands.w	r5, r5, #6
 80093b0:	d106      	bne.n	80093c0 <_printf_common+0x48>
 80093b2:	f104 0a19 	add.w	sl, r4, #25
 80093b6:	68e3      	ldr	r3, [r4, #12]
 80093b8:	6832      	ldr	r2, [r6, #0]
 80093ba:	1a9b      	subs	r3, r3, r2
 80093bc:	42ab      	cmp	r3, r5
 80093be:	dc26      	bgt.n	800940e <_printf_common+0x96>
 80093c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093c4:	1e13      	subs	r3, r2, #0
 80093c6:	6822      	ldr	r2, [r4, #0]
 80093c8:	bf18      	it	ne
 80093ca:	2301      	movne	r3, #1
 80093cc:	0692      	lsls	r2, r2, #26
 80093ce:	d42b      	bmi.n	8009428 <_printf_common+0xb0>
 80093d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093d4:	4649      	mov	r1, r9
 80093d6:	4638      	mov	r0, r7
 80093d8:	47c0      	blx	r8
 80093da:	3001      	adds	r0, #1
 80093dc:	d01e      	beq.n	800941c <_printf_common+0xa4>
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	68e5      	ldr	r5, [r4, #12]
 80093e2:	6832      	ldr	r2, [r6, #0]
 80093e4:	f003 0306 	and.w	r3, r3, #6
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	bf08      	it	eq
 80093ec:	1aad      	subeq	r5, r5, r2
 80093ee:	68a3      	ldr	r3, [r4, #8]
 80093f0:	6922      	ldr	r2, [r4, #16]
 80093f2:	bf0c      	ite	eq
 80093f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093f8:	2500      	movne	r5, #0
 80093fa:	4293      	cmp	r3, r2
 80093fc:	bfc4      	itt	gt
 80093fe:	1a9b      	subgt	r3, r3, r2
 8009400:	18ed      	addgt	r5, r5, r3
 8009402:	2600      	movs	r6, #0
 8009404:	341a      	adds	r4, #26
 8009406:	42b5      	cmp	r5, r6
 8009408:	d11a      	bne.n	8009440 <_printf_common+0xc8>
 800940a:	2000      	movs	r0, #0
 800940c:	e008      	b.n	8009420 <_printf_common+0xa8>
 800940e:	2301      	movs	r3, #1
 8009410:	4652      	mov	r2, sl
 8009412:	4649      	mov	r1, r9
 8009414:	4638      	mov	r0, r7
 8009416:	47c0      	blx	r8
 8009418:	3001      	adds	r0, #1
 800941a:	d103      	bne.n	8009424 <_printf_common+0xac>
 800941c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009424:	3501      	adds	r5, #1
 8009426:	e7c6      	b.n	80093b6 <_printf_common+0x3e>
 8009428:	18e1      	adds	r1, r4, r3
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	2030      	movs	r0, #48	; 0x30
 800942e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009432:	4422      	add	r2, r4
 8009434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800943c:	3302      	adds	r3, #2
 800943e:	e7c7      	b.n	80093d0 <_printf_common+0x58>
 8009440:	2301      	movs	r3, #1
 8009442:	4622      	mov	r2, r4
 8009444:	4649      	mov	r1, r9
 8009446:	4638      	mov	r0, r7
 8009448:	47c0      	blx	r8
 800944a:	3001      	adds	r0, #1
 800944c:	d0e6      	beq.n	800941c <_printf_common+0xa4>
 800944e:	3601      	adds	r6, #1
 8009450:	e7d9      	b.n	8009406 <_printf_common+0x8e>
	...

08009454 <_printf_i>:
 8009454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009458:	7e0f      	ldrb	r7, [r1, #24]
 800945a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800945c:	2f78      	cmp	r7, #120	; 0x78
 800945e:	4691      	mov	r9, r2
 8009460:	4680      	mov	r8, r0
 8009462:	460c      	mov	r4, r1
 8009464:	469a      	mov	sl, r3
 8009466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800946a:	d807      	bhi.n	800947c <_printf_i+0x28>
 800946c:	2f62      	cmp	r7, #98	; 0x62
 800946e:	d80a      	bhi.n	8009486 <_printf_i+0x32>
 8009470:	2f00      	cmp	r7, #0
 8009472:	f000 80d8 	beq.w	8009626 <_printf_i+0x1d2>
 8009476:	2f58      	cmp	r7, #88	; 0x58
 8009478:	f000 80a3 	beq.w	80095c2 <_printf_i+0x16e>
 800947c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009484:	e03a      	b.n	80094fc <_printf_i+0xa8>
 8009486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800948a:	2b15      	cmp	r3, #21
 800948c:	d8f6      	bhi.n	800947c <_printf_i+0x28>
 800948e:	a101      	add	r1, pc, #4	; (adr r1, 8009494 <_printf_i+0x40>)
 8009490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009494:	080094ed 	.word	0x080094ed
 8009498:	08009501 	.word	0x08009501
 800949c:	0800947d 	.word	0x0800947d
 80094a0:	0800947d 	.word	0x0800947d
 80094a4:	0800947d 	.word	0x0800947d
 80094a8:	0800947d 	.word	0x0800947d
 80094ac:	08009501 	.word	0x08009501
 80094b0:	0800947d 	.word	0x0800947d
 80094b4:	0800947d 	.word	0x0800947d
 80094b8:	0800947d 	.word	0x0800947d
 80094bc:	0800947d 	.word	0x0800947d
 80094c0:	0800960d 	.word	0x0800960d
 80094c4:	08009531 	.word	0x08009531
 80094c8:	080095ef 	.word	0x080095ef
 80094cc:	0800947d 	.word	0x0800947d
 80094d0:	0800947d 	.word	0x0800947d
 80094d4:	0800962f 	.word	0x0800962f
 80094d8:	0800947d 	.word	0x0800947d
 80094dc:	08009531 	.word	0x08009531
 80094e0:	0800947d 	.word	0x0800947d
 80094e4:	0800947d 	.word	0x0800947d
 80094e8:	080095f7 	.word	0x080095f7
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	1d1a      	adds	r2, r3, #4
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	602a      	str	r2, [r5, #0]
 80094f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094fc:	2301      	movs	r3, #1
 80094fe:	e0a3      	b.n	8009648 <_printf_i+0x1f4>
 8009500:	6820      	ldr	r0, [r4, #0]
 8009502:	6829      	ldr	r1, [r5, #0]
 8009504:	0606      	lsls	r6, r0, #24
 8009506:	f101 0304 	add.w	r3, r1, #4
 800950a:	d50a      	bpl.n	8009522 <_printf_i+0xce>
 800950c:	680e      	ldr	r6, [r1, #0]
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	2e00      	cmp	r6, #0
 8009512:	da03      	bge.n	800951c <_printf_i+0xc8>
 8009514:	232d      	movs	r3, #45	; 0x2d
 8009516:	4276      	negs	r6, r6
 8009518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800951c:	485e      	ldr	r0, [pc, #376]	; (8009698 <_printf_i+0x244>)
 800951e:	230a      	movs	r3, #10
 8009520:	e019      	b.n	8009556 <_printf_i+0x102>
 8009522:	680e      	ldr	r6, [r1, #0]
 8009524:	602b      	str	r3, [r5, #0]
 8009526:	f010 0f40 	tst.w	r0, #64	; 0x40
 800952a:	bf18      	it	ne
 800952c:	b236      	sxthne	r6, r6
 800952e:	e7ef      	b.n	8009510 <_printf_i+0xbc>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	6820      	ldr	r0, [r4, #0]
 8009534:	1d19      	adds	r1, r3, #4
 8009536:	6029      	str	r1, [r5, #0]
 8009538:	0601      	lsls	r1, r0, #24
 800953a:	d501      	bpl.n	8009540 <_printf_i+0xec>
 800953c:	681e      	ldr	r6, [r3, #0]
 800953e:	e002      	b.n	8009546 <_printf_i+0xf2>
 8009540:	0646      	lsls	r6, r0, #25
 8009542:	d5fb      	bpl.n	800953c <_printf_i+0xe8>
 8009544:	881e      	ldrh	r6, [r3, #0]
 8009546:	4854      	ldr	r0, [pc, #336]	; (8009698 <_printf_i+0x244>)
 8009548:	2f6f      	cmp	r7, #111	; 0x6f
 800954a:	bf0c      	ite	eq
 800954c:	2308      	moveq	r3, #8
 800954e:	230a      	movne	r3, #10
 8009550:	2100      	movs	r1, #0
 8009552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009556:	6865      	ldr	r5, [r4, #4]
 8009558:	60a5      	str	r5, [r4, #8]
 800955a:	2d00      	cmp	r5, #0
 800955c:	bfa2      	ittt	ge
 800955e:	6821      	ldrge	r1, [r4, #0]
 8009560:	f021 0104 	bicge.w	r1, r1, #4
 8009564:	6021      	strge	r1, [r4, #0]
 8009566:	b90e      	cbnz	r6, 800956c <_printf_i+0x118>
 8009568:	2d00      	cmp	r5, #0
 800956a:	d04d      	beq.n	8009608 <_printf_i+0x1b4>
 800956c:	4615      	mov	r5, r2
 800956e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009572:	fb03 6711 	mls	r7, r3, r1, r6
 8009576:	5dc7      	ldrb	r7, [r0, r7]
 8009578:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800957c:	4637      	mov	r7, r6
 800957e:	42bb      	cmp	r3, r7
 8009580:	460e      	mov	r6, r1
 8009582:	d9f4      	bls.n	800956e <_printf_i+0x11a>
 8009584:	2b08      	cmp	r3, #8
 8009586:	d10b      	bne.n	80095a0 <_printf_i+0x14c>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	07de      	lsls	r6, r3, #31
 800958c:	d508      	bpl.n	80095a0 <_printf_i+0x14c>
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	6861      	ldr	r1, [r4, #4]
 8009592:	4299      	cmp	r1, r3
 8009594:	bfde      	ittt	le
 8009596:	2330      	movle	r3, #48	; 0x30
 8009598:	f805 3c01 	strble.w	r3, [r5, #-1]
 800959c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80095a0:	1b52      	subs	r2, r2, r5
 80095a2:	6122      	str	r2, [r4, #16]
 80095a4:	f8cd a000 	str.w	sl, [sp]
 80095a8:	464b      	mov	r3, r9
 80095aa:	aa03      	add	r2, sp, #12
 80095ac:	4621      	mov	r1, r4
 80095ae:	4640      	mov	r0, r8
 80095b0:	f7ff fee2 	bl	8009378 <_printf_common>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d14c      	bne.n	8009652 <_printf_i+0x1fe>
 80095b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095bc:	b004      	add	sp, #16
 80095be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c2:	4835      	ldr	r0, [pc, #212]	; (8009698 <_printf_i+0x244>)
 80095c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095c8:	6829      	ldr	r1, [r5, #0]
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80095d0:	6029      	str	r1, [r5, #0]
 80095d2:	061d      	lsls	r5, r3, #24
 80095d4:	d514      	bpl.n	8009600 <_printf_i+0x1ac>
 80095d6:	07df      	lsls	r7, r3, #31
 80095d8:	bf44      	itt	mi
 80095da:	f043 0320 	orrmi.w	r3, r3, #32
 80095de:	6023      	strmi	r3, [r4, #0]
 80095e0:	b91e      	cbnz	r6, 80095ea <_printf_i+0x196>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	f023 0320 	bic.w	r3, r3, #32
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	2310      	movs	r3, #16
 80095ec:	e7b0      	b.n	8009550 <_printf_i+0xfc>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	f043 0320 	orr.w	r3, r3, #32
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	2378      	movs	r3, #120	; 0x78
 80095f8:	4828      	ldr	r0, [pc, #160]	; (800969c <_printf_i+0x248>)
 80095fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095fe:	e7e3      	b.n	80095c8 <_printf_i+0x174>
 8009600:	0659      	lsls	r1, r3, #25
 8009602:	bf48      	it	mi
 8009604:	b2b6      	uxthmi	r6, r6
 8009606:	e7e6      	b.n	80095d6 <_printf_i+0x182>
 8009608:	4615      	mov	r5, r2
 800960a:	e7bb      	b.n	8009584 <_printf_i+0x130>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	6826      	ldr	r6, [r4, #0]
 8009610:	6961      	ldr	r1, [r4, #20]
 8009612:	1d18      	adds	r0, r3, #4
 8009614:	6028      	str	r0, [r5, #0]
 8009616:	0635      	lsls	r5, r6, #24
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	d501      	bpl.n	8009620 <_printf_i+0x1cc>
 800961c:	6019      	str	r1, [r3, #0]
 800961e:	e002      	b.n	8009626 <_printf_i+0x1d2>
 8009620:	0670      	lsls	r0, r6, #25
 8009622:	d5fb      	bpl.n	800961c <_printf_i+0x1c8>
 8009624:	8019      	strh	r1, [r3, #0]
 8009626:	2300      	movs	r3, #0
 8009628:	6123      	str	r3, [r4, #16]
 800962a:	4615      	mov	r5, r2
 800962c:	e7ba      	b.n	80095a4 <_printf_i+0x150>
 800962e:	682b      	ldr	r3, [r5, #0]
 8009630:	1d1a      	adds	r2, r3, #4
 8009632:	602a      	str	r2, [r5, #0]
 8009634:	681d      	ldr	r5, [r3, #0]
 8009636:	6862      	ldr	r2, [r4, #4]
 8009638:	2100      	movs	r1, #0
 800963a:	4628      	mov	r0, r5
 800963c:	f7f6 fdc8 	bl	80001d0 <memchr>
 8009640:	b108      	cbz	r0, 8009646 <_printf_i+0x1f2>
 8009642:	1b40      	subs	r0, r0, r5
 8009644:	6060      	str	r0, [r4, #4]
 8009646:	6863      	ldr	r3, [r4, #4]
 8009648:	6123      	str	r3, [r4, #16]
 800964a:	2300      	movs	r3, #0
 800964c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009650:	e7a8      	b.n	80095a4 <_printf_i+0x150>
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	462a      	mov	r2, r5
 8009656:	4649      	mov	r1, r9
 8009658:	4640      	mov	r0, r8
 800965a:	47d0      	blx	sl
 800965c:	3001      	adds	r0, #1
 800965e:	d0ab      	beq.n	80095b8 <_printf_i+0x164>
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	079b      	lsls	r3, r3, #30
 8009664:	d413      	bmi.n	800968e <_printf_i+0x23a>
 8009666:	68e0      	ldr	r0, [r4, #12]
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	4298      	cmp	r0, r3
 800966c:	bfb8      	it	lt
 800966e:	4618      	movlt	r0, r3
 8009670:	e7a4      	b.n	80095bc <_printf_i+0x168>
 8009672:	2301      	movs	r3, #1
 8009674:	4632      	mov	r2, r6
 8009676:	4649      	mov	r1, r9
 8009678:	4640      	mov	r0, r8
 800967a:	47d0      	blx	sl
 800967c:	3001      	adds	r0, #1
 800967e:	d09b      	beq.n	80095b8 <_printf_i+0x164>
 8009680:	3501      	adds	r5, #1
 8009682:	68e3      	ldr	r3, [r4, #12]
 8009684:	9903      	ldr	r1, [sp, #12]
 8009686:	1a5b      	subs	r3, r3, r1
 8009688:	42ab      	cmp	r3, r5
 800968a:	dcf2      	bgt.n	8009672 <_printf_i+0x21e>
 800968c:	e7eb      	b.n	8009666 <_printf_i+0x212>
 800968e:	2500      	movs	r5, #0
 8009690:	f104 0619 	add.w	r6, r4, #25
 8009694:	e7f5      	b.n	8009682 <_printf_i+0x22e>
 8009696:	bf00      	nop
 8009698:	08009f47 	.word	0x08009f47
 800969c:	08009f58 	.word	0x08009f58

080096a0 <__swbuf_r>:
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a2:	460e      	mov	r6, r1
 80096a4:	4614      	mov	r4, r2
 80096a6:	4605      	mov	r5, r0
 80096a8:	b118      	cbz	r0, 80096b2 <__swbuf_r+0x12>
 80096aa:	6983      	ldr	r3, [r0, #24]
 80096ac:	b90b      	cbnz	r3, 80096b2 <__swbuf_r+0x12>
 80096ae:	f000 f9d9 	bl	8009a64 <__sinit>
 80096b2:	4b21      	ldr	r3, [pc, #132]	; (8009738 <__swbuf_r+0x98>)
 80096b4:	429c      	cmp	r4, r3
 80096b6:	d12b      	bne.n	8009710 <__swbuf_r+0x70>
 80096b8:	686c      	ldr	r4, [r5, #4]
 80096ba:	69a3      	ldr	r3, [r4, #24]
 80096bc:	60a3      	str	r3, [r4, #8]
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	071a      	lsls	r2, r3, #28
 80096c2:	d52f      	bpl.n	8009724 <__swbuf_r+0x84>
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	b36b      	cbz	r3, 8009724 <__swbuf_r+0x84>
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	6820      	ldr	r0, [r4, #0]
 80096cc:	1ac0      	subs	r0, r0, r3
 80096ce:	6963      	ldr	r3, [r4, #20]
 80096d0:	b2f6      	uxtb	r6, r6
 80096d2:	4283      	cmp	r3, r0
 80096d4:	4637      	mov	r7, r6
 80096d6:	dc04      	bgt.n	80096e2 <__swbuf_r+0x42>
 80096d8:	4621      	mov	r1, r4
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 f92e 	bl	800993c <_fflush_r>
 80096e0:	bb30      	cbnz	r0, 8009730 <__swbuf_r+0x90>
 80096e2:	68a3      	ldr	r3, [r4, #8]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	60a3      	str	r3, [r4, #8]
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	6022      	str	r2, [r4, #0]
 80096ee:	701e      	strb	r6, [r3, #0]
 80096f0:	6963      	ldr	r3, [r4, #20]
 80096f2:	3001      	adds	r0, #1
 80096f4:	4283      	cmp	r3, r0
 80096f6:	d004      	beq.n	8009702 <__swbuf_r+0x62>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	07db      	lsls	r3, r3, #31
 80096fc:	d506      	bpl.n	800970c <__swbuf_r+0x6c>
 80096fe:	2e0a      	cmp	r6, #10
 8009700:	d104      	bne.n	800970c <__swbuf_r+0x6c>
 8009702:	4621      	mov	r1, r4
 8009704:	4628      	mov	r0, r5
 8009706:	f000 f919 	bl	800993c <_fflush_r>
 800970a:	b988      	cbnz	r0, 8009730 <__swbuf_r+0x90>
 800970c:	4638      	mov	r0, r7
 800970e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <__swbuf_r+0x9c>)
 8009712:	429c      	cmp	r4, r3
 8009714:	d101      	bne.n	800971a <__swbuf_r+0x7a>
 8009716:	68ac      	ldr	r4, [r5, #8]
 8009718:	e7cf      	b.n	80096ba <__swbuf_r+0x1a>
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <__swbuf_r+0xa0>)
 800971c:	429c      	cmp	r4, r3
 800971e:	bf08      	it	eq
 8009720:	68ec      	ldreq	r4, [r5, #12]
 8009722:	e7ca      	b.n	80096ba <__swbuf_r+0x1a>
 8009724:	4621      	mov	r1, r4
 8009726:	4628      	mov	r0, r5
 8009728:	f000 f80c 	bl	8009744 <__swsetup_r>
 800972c:	2800      	cmp	r0, #0
 800972e:	d0cb      	beq.n	80096c8 <__swbuf_r+0x28>
 8009730:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009734:	e7ea      	b.n	800970c <__swbuf_r+0x6c>
 8009736:	bf00      	nop
 8009738:	08009f8c 	.word	0x08009f8c
 800973c:	08009fac 	.word	0x08009fac
 8009740:	08009f6c 	.word	0x08009f6c

08009744 <__swsetup_r>:
 8009744:	4b32      	ldr	r3, [pc, #200]	; (8009810 <__swsetup_r+0xcc>)
 8009746:	b570      	push	{r4, r5, r6, lr}
 8009748:	681d      	ldr	r5, [r3, #0]
 800974a:	4606      	mov	r6, r0
 800974c:	460c      	mov	r4, r1
 800974e:	b125      	cbz	r5, 800975a <__swsetup_r+0x16>
 8009750:	69ab      	ldr	r3, [r5, #24]
 8009752:	b913      	cbnz	r3, 800975a <__swsetup_r+0x16>
 8009754:	4628      	mov	r0, r5
 8009756:	f000 f985 	bl	8009a64 <__sinit>
 800975a:	4b2e      	ldr	r3, [pc, #184]	; (8009814 <__swsetup_r+0xd0>)
 800975c:	429c      	cmp	r4, r3
 800975e:	d10f      	bne.n	8009780 <__swsetup_r+0x3c>
 8009760:	686c      	ldr	r4, [r5, #4]
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009768:	0719      	lsls	r1, r3, #28
 800976a:	d42c      	bmi.n	80097c6 <__swsetup_r+0x82>
 800976c:	06dd      	lsls	r5, r3, #27
 800976e:	d411      	bmi.n	8009794 <__swsetup_r+0x50>
 8009770:	2309      	movs	r3, #9
 8009772:	6033      	str	r3, [r6, #0]
 8009774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009778:	81a3      	strh	r3, [r4, #12]
 800977a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800977e:	e03e      	b.n	80097fe <__swsetup_r+0xba>
 8009780:	4b25      	ldr	r3, [pc, #148]	; (8009818 <__swsetup_r+0xd4>)
 8009782:	429c      	cmp	r4, r3
 8009784:	d101      	bne.n	800978a <__swsetup_r+0x46>
 8009786:	68ac      	ldr	r4, [r5, #8]
 8009788:	e7eb      	b.n	8009762 <__swsetup_r+0x1e>
 800978a:	4b24      	ldr	r3, [pc, #144]	; (800981c <__swsetup_r+0xd8>)
 800978c:	429c      	cmp	r4, r3
 800978e:	bf08      	it	eq
 8009790:	68ec      	ldreq	r4, [r5, #12]
 8009792:	e7e6      	b.n	8009762 <__swsetup_r+0x1e>
 8009794:	0758      	lsls	r0, r3, #29
 8009796:	d512      	bpl.n	80097be <__swsetup_r+0x7a>
 8009798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800979a:	b141      	cbz	r1, 80097ae <__swsetup_r+0x6a>
 800979c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097a0:	4299      	cmp	r1, r3
 80097a2:	d002      	beq.n	80097aa <__swsetup_r+0x66>
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7ff fb23 	bl	8008df0 <_free_r>
 80097aa:	2300      	movs	r3, #0
 80097ac:	6363      	str	r3, [r4, #52]	; 0x34
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097b4:	81a3      	strh	r3, [r4, #12]
 80097b6:	2300      	movs	r3, #0
 80097b8:	6063      	str	r3, [r4, #4]
 80097ba:	6923      	ldr	r3, [r4, #16]
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	f043 0308 	orr.w	r3, r3, #8
 80097c4:	81a3      	strh	r3, [r4, #12]
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	b94b      	cbnz	r3, 80097de <__swsetup_r+0x9a>
 80097ca:	89a3      	ldrh	r3, [r4, #12]
 80097cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d4:	d003      	beq.n	80097de <__swsetup_r+0x9a>
 80097d6:	4621      	mov	r1, r4
 80097d8:	4630      	mov	r0, r6
 80097da:	f000 fa09 	bl	8009bf0 <__smakebuf_r>
 80097de:	89a0      	ldrh	r0, [r4, #12]
 80097e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097e4:	f010 0301 	ands.w	r3, r0, #1
 80097e8:	d00a      	beq.n	8009800 <__swsetup_r+0xbc>
 80097ea:	2300      	movs	r3, #0
 80097ec:	60a3      	str	r3, [r4, #8]
 80097ee:	6963      	ldr	r3, [r4, #20]
 80097f0:	425b      	negs	r3, r3
 80097f2:	61a3      	str	r3, [r4, #24]
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	b943      	cbnz	r3, 800980a <__swsetup_r+0xc6>
 80097f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097fc:	d1ba      	bne.n	8009774 <__swsetup_r+0x30>
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
 8009800:	0781      	lsls	r1, r0, #30
 8009802:	bf58      	it	pl
 8009804:	6963      	ldrpl	r3, [r4, #20]
 8009806:	60a3      	str	r3, [r4, #8]
 8009808:	e7f4      	b.n	80097f4 <__swsetup_r+0xb0>
 800980a:	2000      	movs	r0, #0
 800980c:	e7f7      	b.n	80097fe <__swsetup_r+0xba>
 800980e:	bf00      	nop
 8009810:	2000002c 	.word	0x2000002c
 8009814:	08009f8c 	.word	0x08009f8c
 8009818:	08009fac 	.word	0x08009fac
 800981c:	08009f6c 	.word	0x08009f6c

08009820 <abort>:
 8009820:	b508      	push	{r3, lr}
 8009822:	2006      	movs	r0, #6
 8009824:	f000 fa4c 	bl	8009cc0 <raise>
 8009828:	2001      	movs	r0, #1
 800982a:	f7f8 f91b 	bl	8001a64 <_exit>
	...

08009830 <__sflush_r>:
 8009830:	898a      	ldrh	r2, [r1, #12]
 8009832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009836:	4605      	mov	r5, r0
 8009838:	0710      	lsls	r0, r2, #28
 800983a:	460c      	mov	r4, r1
 800983c:	d458      	bmi.n	80098f0 <__sflush_r+0xc0>
 800983e:	684b      	ldr	r3, [r1, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	dc05      	bgt.n	8009850 <__sflush_r+0x20>
 8009844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	dc02      	bgt.n	8009850 <__sflush_r+0x20>
 800984a:	2000      	movs	r0, #0
 800984c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009852:	2e00      	cmp	r6, #0
 8009854:	d0f9      	beq.n	800984a <__sflush_r+0x1a>
 8009856:	2300      	movs	r3, #0
 8009858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800985c:	682f      	ldr	r7, [r5, #0]
 800985e:	602b      	str	r3, [r5, #0]
 8009860:	d032      	beq.n	80098c8 <__sflush_r+0x98>
 8009862:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	075a      	lsls	r2, r3, #29
 8009868:	d505      	bpl.n	8009876 <__sflush_r+0x46>
 800986a:	6863      	ldr	r3, [r4, #4]
 800986c:	1ac0      	subs	r0, r0, r3
 800986e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009870:	b10b      	cbz	r3, 8009876 <__sflush_r+0x46>
 8009872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009874:	1ac0      	subs	r0, r0, r3
 8009876:	2300      	movs	r3, #0
 8009878:	4602      	mov	r2, r0
 800987a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	4628      	mov	r0, r5
 8009880:	47b0      	blx	r6
 8009882:	1c43      	adds	r3, r0, #1
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	d106      	bne.n	8009896 <__sflush_r+0x66>
 8009888:	6829      	ldr	r1, [r5, #0]
 800988a:	291d      	cmp	r1, #29
 800988c:	d82c      	bhi.n	80098e8 <__sflush_r+0xb8>
 800988e:	4a2a      	ldr	r2, [pc, #168]	; (8009938 <__sflush_r+0x108>)
 8009890:	40ca      	lsrs	r2, r1
 8009892:	07d6      	lsls	r6, r2, #31
 8009894:	d528      	bpl.n	80098e8 <__sflush_r+0xb8>
 8009896:	2200      	movs	r2, #0
 8009898:	6062      	str	r2, [r4, #4]
 800989a:	04d9      	lsls	r1, r3, #19
 800989c:	6922      	ldr	r2, [r4, #16]
 800989e:	6022      	str	r2, [r4, #0]
 80098a0:	d504      	bpl.n	80098ac <__sflush_r+0x7c>
 80098a2:	1c42      	adds	r2, r0, #1
 80098a4:	d101      	bne.n	80098aa <__sflush_r+0x7a>
 80098a6:	682b      	ldr	r3, [r5, #0]
 80098a8:	b903      	cbnz	r3, 80098ac <__sflush_r+0x7c>
 80098aa:	6560      	str	r0, [r4, #84]	; 0x54
 80098ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ae:	602f      	str	r7, [r5, #0]
 80098b0:	2900      	cmp	r1, #0
 80098b2:	d0ca      	beq.n	800984a <__sflush_r+0x1a>
 80098b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098b8:	4299      	cmp	r1, r3
 80098ba:	d002      	beq.n	80098c2 <__sflush_r+0x92>
 80098bc:	4628      	mov	r0, r5
 80098be:	f7ff fa97 	bl	8008df0 <_free_r>
 80098c2:	2000      	movs	r0, #0
 80098c4:	6360      	str	r0, [r4, #52]	; 0x34
 80098c6:	e7c1      	b.n	800984c <__sflush_r+0x1c>
 80098c8:	6a21      	ldr	r1, [r4, #32]
 80098ca:	2301      	movs	r3, #1
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b0      	blx	r6
 80098d0:	1c41      	adds	r1, r0, #1
 80098d2:	d1c7      	bne.n	8009864 <__sflush_r+0x34>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0c4      	beq.n	8009864 <__sflush_r+0x34>
 80098da:	2b1d      	cmp	r3, #29
 80098dc:	d001      	beq.n	80098e2 <__sflush_r+0xb2>
 80098de:	2b16      	cmp	r3, #22
 80098e0:	d101      	bne.n	80098e6 <__sflush_r+0xb6>
 80098e2:	602f      	str	r7, [r5, #0]
 80098e4:	e7b1      	b.n	800984a <__sflush_r+0x1a>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	e7ad      	b.n	800984c <__sflush_r+0x1c>
 80098f0:	690f      	ldr	r7, [r1, #16]
 80098f2:	2f00      	cmp	r7, #0
 80098f4:	d0a9      	beq.n	800984a <__sflush_r+0x1a>
 80098f6:	0793      	lsls	r3, r2, #30
 80098f8:	680e      	ldr	r6, [r1, #0]
 80098fa:	bf08      	it	eq
 80098fc:	694b      	ldreq	r3, [r1, #20]
 80098fe:	600f      	str	r7, [r1, #0]
 8009900:	bf18      	it	ne
 8009902:	2300      	movne	r3, #0
 8009904:	eba6 0807 	sub.w	r8, r6, r7
 8009908:	608b      	str	r3, [r1, #8]
 800990a:	f1b8 0f00 	cmp.w	r8, #0
 800990e:	dd9c      	ble.n	800984a <__sflush_r+0x1a>
 8009910:	6a21      	ldr	r1, [r4, #32]
 8009912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009914:	4643      	mov	r3, r8
 8009916:	463a      	mov	r2, r7
 8009918:	4628      	mov	r0, r5
 800991a:	47b0      	blx	r6
 800991c:	2800      	cmp	r0, #0
 800991e:	dc06      	bgt.n	800992e <__sflush_r+0xfe>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009926:	81a3      	strh	r3, [r4, #12]
 8009928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800992c:	e78e      	b.n	800984c <__sflush_r+0x1c>
 800992e:	4407      	add	r7, r0
 8009930:	eba8 0800 	sub.w	r8, r8, r0
 8009934:	e7e9      	b.n	800990a <__sflush_r+0xda>
 8009936:	bf00      	nop
 8009938:	20400001 	.word	0x20400001

0800993c <_fflush_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	690b      	ldr	r3, [r1, #16]
 8009940:	4605      	mov	r5, r0
 8009942:	460c      	mov	r4, r1
 8009944:	b913      	cbnz	r3, 800994c <_fflush_r+0x10>
 8009946:	2500      	movs	r5, #0
 8009948:	4628      	mov	r0, r5
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	b118      	cbz	r0, 8009956 <_fflush_r+0x1a>
 800994e:	6983      	ldr	r3, [r0, #24]
 8009950:	b90b      	cbnz	r3, 8009956 <_fflush_r+0x1a>
 8009952:	f000 f887 	bl	8009a64 <__sinit>
 8009956:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <_fflush_r+0x6c>)
 8009958:	429c      	cmp	r4, r3
 800995a:	d11b      	bne.n	8009994 <_fflush_r+0x58>
 800995c:	686c      	ldr	r4, [r5, #4]
 800995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0ef      	beq.n	8009946 <_fflush_r+0xa>
 8009966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009968:	07d0      	lsls	r0, r2, #31
 800996a:	d404      	bmi.n	8009976 <_fflush_r+0x3a>
 800996c:	0599      	lsls	r1, r3, #22
 800996e:	d402      	bmi.n	8009976 <_fflush_r+0x3a>
 8009970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009972:	f000 f915 	bl	8009ba0 <__retarget_lock_acquire_recursive>
 8009976:	4628      	mov	r0, r5
 8009978:	4621      	mov	r1, r4
 800997a:	f7ff ff59 	bl	8009830 <__sflush_r>
 800997e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009980:	07da      	lsls	r2, r3, #31
 8009982:	4605      	mov	r5, r0
 8009984:	d4e0      	bmi.n	8009948 <_fflush_r+0xc>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	059b      	lsls	r3, r3, #22
 800998a:	d4dd      	bmi.n	8009948 <_fflush_r+0xc>
 800998c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800998e:	f000 f908 	bl	8009ba2 <__retarget_lock_release_recursive>
 8009992:	e7d9      	b.n	8009948 <_fflush_r+0xc>
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <_fflush_r+0x70>)
 8009996:	429c      	cmp	r4, r3
 8009998:	d101      	bne.n	800999e <_fflush_r+0x62>
 800999a:	68ac      	ldr	r4, [r5, #8]
 800999c:	e7df      	b.n	800995e <_fflush_r+0x22>
 800999e:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <_fflush_r+0x74>)
 80099a0:	429c      	cmp	r4, r3
 80099a2:	bf08      	it	eq
 80099a4:	68ec      	ldreq	r4, [r5, #12]
 80099a6:	e7da      	b.n	800995e <_fflush_r+0x22>
 80099a8:	08009f8c 	.word	0x08009f8c
 80099ac:	08009fac 	.word	0x08009fac
 80099b0:	08009f6c 	.word	0x08009f6c

080099b4 <std>:
 80099b4:	2300      	movs	r3, #0
 80099b6:	b510      	push	{r4, lr}
 80099b8:	4604      	mov	r4, r0
 80099ba:	e9c0 3300 	strd	r3, r3, [r0]
 80099be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099c2:	6083      	str	r3, [r0, #8]
 80099c4:	8181      	strh	r1, [r0, #12]
 80099c6:	6643      	str	r3, [r0, #100]	; 0x64
 80099c8:	81c2      	strh	r2, [r0, #14]
 80099ca:	6183      	str	r3, [r0, #24]
 80099cc:	4619      	mov	r1, r3
 80099ce:	2208      	movs	r2, #8
 80099d0:	305c      	adds	r0, #92	; 0x5c
 80099d2:	f7ff fa05 	bl	8008de0 <memset>
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <std+0x38>)
 80099d8:	6263      	str	r3, [r4, #36]	; 0x24
 80099da:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <std+0x3c>)
 80099dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80099de:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <std+0x40>)
 80099e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099e2:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <std+0x44>)
 80099e4:	6224      	str	r4, [r4, #32]
 80099e6:	6323      	str	r3, [r4, #48]	; 0x30
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	bf00      	nop
 80099ec:	08009cf9 	.word	0x08009cf9
 80099f0:	08009d1b 	.word	0x08009d1b
 80099f4:	08009d53 	.word	0x08009d53
 80099f8:	08009d77 	.word	0x08009d77

080099fc <_cleanup_r>:
 80099fc:	4901      	ldr	r1, [pc, #4]	; (8009a04 <_cleanup_r+0x8>)
 80099fe:	f000 b8af 	b.w	8009b60 <_fwalk_reent>
 8009a02:	bf00      	nop
 8009a04:	0800993d 	.word	0x0800993d

08009a08 <__sfmoreglue>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	2268      	movs	r2, #104	; 0x68
 8009a0c:	1e4d      	subs	r5, r1, #1
 8009a0e:	4355      	muls	r5, r2
 8009a10:	460e      	mov	r6, r1
 8009a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a16:	f7ff fa57 	bl	8008ec8 <_malloc_r>
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	b140      	cbz	r0, 8009a30 <__sfmoreglue+0x28>
 8009a1e:	2100      	movs	r1, #0
 8009a20:	e9c0 1600 	strd	r1, r6, [r0]
 8009a24:	300c      	adds	r0, #12
 8009a26:	60a0      	str	r0, [r4, #8]
 8009a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a2c:	f7ff f9d8 	bl	8008de0 <memset>
 8009a30:	4620      	mov	r0, r4
 8009a32:	bd70      	pop	{r4, r5, r6, pc}

08009a34 <__sfp_lock_acquire>:
 8009a34:	4801      	ldr	r0, [pc, #4]	; (8009a3c <__sfp_lock_acquire+0x8>)
 8009a36:	f000 b8b3 	b.w	8009ba0 <__retarget_lock_acquire_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	2000092d 	.word	0x2000092d

08009a40 <__sfp_lock_release>:
 8009a40:	4801      	ldr	r0, [pc, #4]	; (8009a48 <__sfp_lock_release+0x8>)
 8009a42:	f000 b8ae 	b.w	8009ba2 <__retarget_lock_release_recursive>
 8009a46:	bf00      	nop
 8009a48:	2000092d 	.word	0x2000092d

08009a4c <__sinit_lock_acquire>:
 8009a4c:	4801      	ldr	r0, [pc, #4]	; (8009a54 <__sinit_lock_acquire+0x8>)
 8009a4e:	f000 b8a7 	b.w	8009ba0 <__retarget_lock_acquire_recursive>
 8009a52:	bf00      	nop
 8009a54:	2000092e 	.word	0x2000092e

08009a58 <__sinit_lock_release>:
 8009a58:	4801      	ldr	r0, [pc, #4]	; (8009a60 <__sinit_lock_release+0x8>)
 8009a5a:	f000 b8a2 	b.w	8009ba2 <__retarget_lock_release_recursive>
 8009a5e:	bf00      	nop
 8009a60:	2000092e 	.word	0x2000092e

08009a64 <__sinit>:
 8009a64:	b510      	push	{r4, lr}
 8009a66:	4604      	mov	r4, r0
 8009a68:	f7ff fff0 	bl	8009a4c <__sinit_lock_acquire>
 8009a6c:	69a3      	ldr	r3, [r4, #24]
 8009a6e:	b11b      	cbz	r3, 8009a78 <__sinit+0x14>
 8009a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a74:	f7ff bff0 	b.w	8009a58 <__sinit_lock_release>
 8009a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8009a7e:	4b13      	ldr	r3, [pc, #76]	; (8009acc <__sinit+0x68>)
 8009a80:	4a13      	ldr	r2, [pc, #76]	; (8009ad0 <__sinit+0x6c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	bf04      	itt	eq
 8009a8a:	2301      	moveq	r3, #1
 8009a8c:	61a3      	streq	r3, [r4, #24]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 f820 	bl	8009ad4 <__sfp>
 8009a94:	6060      	str	r0, [r4, #4]
 8009a96:	4620      	mov	r0, r4
 8009a98:	f000 f81c 	bl	8009ad4 <__sfp>
 8009a9c:	60a0      	str	r0, [r4, #8]
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 f818 	bl	8009ad4 <__sfp>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	60e0      	str	r0, [r4, #12]
 8009aa8:	2104      	movs	r1, #4
 8009aaa:	6860      	ldr	r0, [r4, #4]
 8009aac:	f7ff ff82 	bl	80099b4 <std>
 8009ab0:	68a0      	ldr	r0, [r4, #8]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	2109      	movs	r1, #9
 8009ab6:	f7ff ff7d 	bl	80099b4 <std>
 8009aba:	68e0      	ldr	r0, [r4, #12]
 8009abc:	2202      	movs	r2, #2
 8009abe:	2112      	movs	r1, #18
 8009ac0:	f7ff ff78 	bl	80099b4 <std>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	61a3      	str	r3, [r4, #24]
 8009ac8:	e7d2      	b.n	8009a70 <__sinit+0xc>
 8009aca:	bf00      	nop
 8009acc:	08009e84 	.word	0x08009e84
 8009ad0:	080099fd 	.word	0x080099fd

08009ad4 <__sfp>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	4607      	mov	r7, r0
 8009ad8:	f7ff ffac 	bl	8009a34 <__sfp_lock_acquire>
 8009adc:	4b1e      	ldr	r3, [pc, #120]	; (8009b58 <__sfp+0x84>)
 8009ade:	681e      	ldr	r6, [r3, #0]
 8009ae0:	69b3      	ldr	r3, [r6, #24]
 8009ae2:	b913      	cbnz	r3, 8009aea <__sfp+0x16>
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f7ff ffbd 	bl	8009a64 <__sinit>
 8009aea:	3648      	adds	r6, #72	; 0x48
 8009aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	d503      	bpl.n	8009afc <__sfp+0x28>
 8009af4:	6833      	ldr	r3, [r6, #0]
 8009af6:	b30b      	cbz	r3, 8009b3c <__sfp+0x68>
 8009af8:	6836      	ldr	r6, [r6, #0]
 8009afa:	e7f7      	b.n	8009aec <__sfp+0x18>
 8009afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b00:	b9d5      	cbnz	r5, 8009b38 <__sfp+0x64>
 8009b02:	4b16      	ldr	r3, [pc, #88]	; (8009b5c <__sfp+0x88>)
 8009b04:	60e3      	str	r3, [r4, #12]
 8009b06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b0c:	f000 f847 	bl	8009b9e <__retarget_lock_init_recursive>
 8009b10:	f7ff ff96 	bl	8009a40 <__sfp_lock_release>
 8009b14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b1c:	6025      	str	r5, [r4, #0]
 8009b1e:	61a5      	str	r5, [r4, #24]
 8009b20:	2208      	movs	r2, #8
 8009b22:	4629      	mov	r1, r5
 8009b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b28:	f7ff f95a 	bl	8008de0 <memset>
 8009b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b34:	4620      	mov	r0, r4
 8009b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b38:	3468      	adds	r4, #104	; 0x68
 8009b3a:	e7d9      	b.n	8009af0 <__sfp+0x1c>
 8009b3c:	2104      	movs	r1, #4
 8009b3e:	4638      	mov	r0, r7
 8009b40:	f7ff ff62 	bl	8009a08 <__sfmoreglue>
 8009b44:	4604      	mov	r4, r0
 8009b46:	6030      	str	r0, [r6, #0]
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d1d5      	bne.n	8009af8 <__sfp+0x24>
 8009b4c:	f7ff ff78 	bl	8009a40 <__sfp_lock_release>
 8009b50:	230c      	movs	r3, #12
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	e7ee      	b.n	8009b34 <__sfp+0x60>
 8009b56:	bf00      	nop
 8009b58:	08009e84 	.word	0x08009e84
 8009b5c:	ffff0001 	.word	0xffff0001

08009b60 <_fwalk_reent>:
 8009b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b64:	4606      	mov	r6, r0
 8009b66:	4688      	mov	r8, r1
 8009b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b6c:	2700      	movs	r7, #0
 8009b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b72:	f1b9 0901 	subs.w	r9, r9, #1
 8009b76:	d505      	bpl.n	8009b84 <_fwalk_reent+0x24>
 8009b78:	6824      	ldr	r4, [r4, #0]
 8009b7a:	2c00      	cmp	r4, #0
 8009b7c:	d1f7      	bne.n	8009b6e <_fwalk_reent+0xe>
 8009b7e:	4638      	mov	r0, r7
 8009b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b84:	89ab      	ldrh	r3, [r5, #12]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d907      	bls.n	8009b9a <_fwalk_reent+0x3a>
 8009b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	d003      	beq.n	8009b9a <_fwalk_reent+0x3a>
 8009b92:	4629      	mov	r1, r5
 8009b94:	4630      	mov	r0, r6
 8009b96:	47c0      	blx	r8
 8009b98:	4307      	orrs	r7, r0
 8009b9a:	3568      	adds	r5, #104	; 0x68
 8009b9c:	e7e9      	b.n	8009b72 <_fwalk_reent+0x12>

08009b9e <__retarget_lock_init_recursive>:
 8009b9e:	4770      	bx	lr

08009ba0 <__retarget_lock_acquire_recursive>:
 8009ba0:	4770      	bx	lr

08009ba2 <__retarget_lock_release_recursive>:
 8009ba2:	4770      	bx	lr

08009ba4 <__swhatbuf_r>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	460e      	mov	r6, r1
 8009ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bac:	2900      	cmp	r1, #0
 8009bae:	b096      	sub	sp, #88	; 0x58
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	461d      	mov	r5, r3
 8009bb4:	da08      	bge.n	8009bc8 <__swhatbuf_r+0x24>
 8009bb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	602a      	str	r2, [r5, #0]
 8009bbe:	061a      	lsls	r2, r3, #24
 8009bc0:	d410      	bmi.n	8009be4 <__swhatbuf_r+0x40>
 8009bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bc6:	e00e      	b.n	8009be6 <__swhatbuf_r+0x42>
 8009bc8:	466a      	mov	r2, sp
 8009bca:	f000 f8fb 	bl	8009dc4 <_fstat_r>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	dbf1      	blt.n	8009bb6 <__swhatbuf_r+0x12>
 8009bd2:	9a01      	ldr	r2, [sp, #4]
 8009bd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bdc:	425a      	negs	r2, r3
 8009bde:	415a      	adcs	r2, r3
 8009be0:	602a      	str	r2, [r5, #0]
 8009be2:	e7ee      	b.n	8009bc2 <__swhatbuf_r+0x1e>
 8009be4:	2340      	movs	r3, #64	; 0x40
 8009be6:	2000      	movs	r0, #0
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	b016      	add	sp, #88	; 0x58
 8009bec:	bd70      	pop	{r4, r5, r6, pc}
	...

08009bf0 <__smakebuf_r>:
 8009bf0:	898b      	ldrh	r3, [r1, #12]
 8009bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bf4:	079d      	lsls	r5, r3, #30
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	d507      	bpl.n	8009c0c <__smakebuf_r+0x1c>
 8009bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	2301      	movs	r3, #1
 8009c06:	6163      	str	r3, [r4, #20]
 8009c08:	b002      	add	sp, #8
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
 8009c0c:	ab01      	add	r3, sp, #4
 8009c0e:	466a      	mov	r2, sp
 8009c10:	f7ff ffc8 	bl	8009ba4 <__swhatbuf_r>
 8009c14:	9900      	ldr	r1, [sp, #0]
 8009c16:	4605      	mov	r5, r0
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff f955 	bl	8008ec8 <_malloc_r>
 8009c1e:	b948      	cbnz	r0, 8009c34 <__smakebuf_r+0x44>
 8009c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c24:	059a      	lsls	r2, r3, #22
 8009c26:	d4ef      	bmi.n	8009c08 <__smakebuf_r+0x18>
 8009c28:	f023 0303 	bic.w	r3, r3, #3
 8009c2c:	f043 0302 	orr.w	r3, r3, #2
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	e7e3      	b.n	8009bfc <__smakebuf_r+0xc>
 8009c34:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <__smakebuf_r+0x7c>)
 8009c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	6020      	str	r0, [r4, #0]
 8009c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	9b00      	ldr	r3, [sp, #0]
 8009c44:	6163      	str	r3, [r4, #20]
 8009c46:	9b01      	ldr	r3, [sp, #4]
 8009c48:	6120      	str	r0, [r4, #16]
 8009c4a:	b15b      	cbz	r3, 8009c64 <__smakebuf_r+0x74>
 8009c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c50:	4630      	mov	r0, r6
 8009c52:	f000 f8c9 	bl	8009de8 <_isatty_r>
 8009c56:	b128      	cbz	r0, 8009c64 <__smakebuf_r+0x74>
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	f023 0303 	bic.w	r3, r3, #3
 8009c5e:	f043 0301 	orr.w	r3, r3, #1
 8009c62:	81a3      	strh	r3, [r4, #12]
 8009c64:	89a0      	ldrh	r0, [r4, #12]
 8009c66:	4305      	orrs	r5, r0
 8009c68:	81a5      	strh	r5, [r4, #12]
 8009c6a:	e7cd      	b.n	8009c08 <__smakebuf_r+0x18>
 8009c6c:	080099fd 	.word	0x080099fd

08009c70 <_raise_r>:
 8009c70:	291f      	cmp	r1, #31
 8009c72:	b538      	push	{r3, r4, r5, lr}
 8009c74:	4604      	mov	r4, r0
 8009c76:	460d      	mov	r5, r1
 8009c78:	d904      	bls.n	8009c84 <_raise_r+0x14>
 8009c7a:	2316      	movs	r3, #22
 8009c7c:	6003      	str	r3, [r0, #0]
 8009c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c86:	b112      	cbz	r2, 8009c8e <_raise_r+0x1e>
 8009c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c8c:	b94b      	cbnz	r3, 8009ca2 <_raise_r+0x32>
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 f830 	bl	8009cf4 <_getpid_r>
 8009c94:	462a      	mov	r2, r5
 8009c96:	4601      	mov	r1, r0
 8009c98:	4620      	mov	r0, r4
 8009c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c9e:	f000 b817 	b.w	8009cd0 <_kill_r>
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d00a      	beq.n	8009cbc <_raise_r+0x4c>
 8009ca6:	1c59      	adds	r1, r3, #1
 8009ca8:	d103      	bne.n	8009cb2 <_raise_r+0x42>
 8009caa:	2316      	movs	r3, #22
 8009cac:	6003      	str	r3, [r0, #0]
 8009cae:	2001      	movs	r0, #1
 8009cb0:	e7e7      	b.n	8009c82 <_raise_r+0x12>
 8009cb2:	2400      	movs	r4, #0
 8009cb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cb8:	4628      	mov	r0, r5
 8009cba:	4798      	blx	r3
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	e7e0      	b.n	8009c82 <_raise_r+0x12>

08009cc0 <raise>:
 8009cc0:	4b02      	ldr	r3, [pc, #8]	; (8009ccc <raise+0xc>)
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	f7ff bfd3 	b.w	8009c70 <_raise_r>
 8009cca:	bf00      	nop
 8009ccc:	2000002c 	.word	0x2000002c

08009cd0 <_kill_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4d07      	ldr	r5, [pc, #28]	; (8009cf0 <_kill_r+0x20>)
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	4608      	mov	r0, r1
 8009cda:	4611      	mov	r1, r2
 8009cdc:	602b      	str	r3, [r5, #0]
 8009cde:	f7f7 feb1 	bl	8001a44 <_kill>
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	d102      	bne.n	8009cec <_kill_r+0x1c>
 8009ce6:	682b      	ldr	r3, [r5, #0]
 8009ce8:	b103      	cbz	r3, 8009cec <_kill_r+0x1c>
 8009cea:	6023      	str	r3, [r4, #0]
 8009cec:	bd38      	pop	{r3, r4, r5, pc}
 8009cee:	bf00      	nop
 8009cf0:	20000928 	.word	0x20000928

08009cf4 <_getpid_r>:
 8009cf4:	f7f7 be9e 	b.w	8001a34 <_getpid>

08009cf8 <__sread>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d00:	f000 f894 	bl	8009e2c <_read_r>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	bfab      	itete	ge
 8009d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d0c:	181b      	addge	r3, r3, r0
 8009d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d12:	bfac      	ite	ge
 8009d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d16:	81a3      	strhlt	r3, [r4, #12]
 8009d18:	bd10      	pop	{r4, pc}

08009d1a <__swrite>:
 8009d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1e:	461f      	mov	r7, r3
 8009d20:	898b      	ldrh	r3, [r1, #12]
 8009d22:	05db      	lsls	r3, r3, #23
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	4616      	mov	r6, r2
 8009d2a:	d505      	bpl.n	8009d38 <__swrite+0x1e>
 8009d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d30:	2302      	movs	r3, #2
 8009d32:	2200      	movs	r2, #0
 8009d34:	f000 f868 	bl	8009e08 <_lseek_r>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	4632      	mov	r2, r6
 8009d46:	463b      	mov	r3, r7
 8009d48:	4628      	mov	r0, r5
 8009d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4e:	f000 b817 	b.w	8009d80 <_write_r>

08009d52 <__sseek>:
 8009d52:	b510      	push	{r4, lr}
 8009d54:	460c      	mov	r4, r1
 8009d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5a:	f000 f855 	bl	8009e08 <_lseek_r>
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	bf15      	itete	ne
 8009d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d6e:	81a3      	strheq	r3, [r4, #12]
 8009d70:	bf18      	it	ne
 8009d72:	81a3      	strhne	r3, [r4, #12]
 8009d74:	bd10      	pop	{r4, pc}

08009d76 <__sclose>:
 8009d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7a:	f000 b813 	b.w	8009da4 <_close_r>
	...

08009d80 <_write_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d07      	ldr	r5, [pc, #28]	; (8009da0 <_write_r+0x20>)
 8009d84:	4604      	mov	r4, r0
 8009d86:	4608      	mov	r0, r1
 8009d88:	4611      	mov	r1, r2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f7f7 fe8f 	bl	8001ab2 <_write>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_write_r+0x1e>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_write_r+0x1e>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	20000928 	.word	0x20000928

08009da4 <_close_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d06      	ldr	r5, [pc, #24]	; (8009dc0 <_close_r+0x1c>)
 8009da8:	2300      	movs	r3, #0
 8009daa:	4604      	mov	r4, r0
 8009dac:	4608      	mov	r0, r1
 8009dae:	602b      	str	r3, [r5, #0]
 8009db0:	f7f7 fe9b 	bl	8001aea <_close>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_close_r+0x1a>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_close_r+0x1a>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	20000928 	.word	0x20000928

08009dc4 <_fstat_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4d07      	ldr	r5, [pc, #28]	; (8009de4 <_fstat_r+0x20>)
 8009dc8:	2300      	movs	r3, #0
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4608      	mov	r0, r1
 8009dce:	4611      	mov	r1, r2
 8009dd0:	602b      	str	r3, [r5, #0]
 8009dd2:	f7f7 fe96 	bl	8001b02 <_fstat>
 8009dd6:	1c43      	adds	r3, r0, #1
 8009dd8:	d102      	bne.n	8009de0 <_fstat_r+0x1c>
 8009dda:	682b      	ldr	r3, [r5, #0]
 8009ddc:	b103      	cbz	r3, 8009de0 <_fstat_r+0x1c>
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	bd38      	pop	{r3, r4, r5, pc}
 8009de2:	bf00      	nop
 8009de4:	20000928 	.word	0x20000928

08009de8 <_isatty_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d06      	ldr	r5, [pc, #24]	; (8009e04 <_isatty_r+0x1c>)
 8009dec:	2300      	movs	r3, #0
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	602b      	str	r3, [r5, #0]
 8009df4:	f7f7 fe95 	bl	8001b22 <_isatty>
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d102      	bne.n	8009e02 <_isatty_r+0x1a>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	b103      	cbz	r3, 8009e02 <_isatty_r+0x1a>
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
 8009e04:	20000928 	.word	0x20000928

08009e08 <_lseek_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d07      	ldr	r5, [pc, #28]	; (8009e28 <_lseek_r+0x20>)
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4608      	mov	r0, r1
 8009e10:	4611      	mov	r1, r2
 8009e12:	2200      	movs	r2, #0
 8009e14:	602a      	str	r2, [r5, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	f7f7 fe8e 	bl	8001b38 <_lseek>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_lseek_r+0x1e>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_lseek_r+0x1e>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	20000928 	.word	0x20000928

08009e2c <_read_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	; (8009e4c <_read_r+0x20>)
 8009e30:	4604      	mov	r4, r0
 8009e32:	4608      	mov	r0, r1
 8009e34:	4611      	mov	r1, r2
 8009e36:	2200      	movs	r2, #0
 8009e38:	602a      	str	r2, [r5, #0]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f7f7 fe1c 	bl	8001a78 <_read>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_read_r+0x1e>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_read_r+0x1e>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	20000928 	.word	0x20000928

08009e50 <_init>:
 8009e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e52:	bf00      	nop
 8009e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e56:	bc08      	pop	{r3}
 8009e58:	469e      	mov	lr, r3
 8009e5a:	4770      	bx	lr

08009e5c <_fini>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	bf00      	nop
 8009e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e62:	bc08      	pop	{r3}
 8009e64:	469e      	mov	lr, r3
 8009e66:	4770      	bx	lr
